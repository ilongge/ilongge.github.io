<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>iOS--浅谈消息转发机制</title>
      <link href="/2021/10/18/ios-qian-tan-xiao-xi-zhuan-fa-ji-zhi/"/>
      <url>/2021/10/18/ios-qian-tan-xiao-xi-zhuan-fa-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="iOS–浅谈消息转发机制"><a href="#iOS–浅谈消息转发机制" class="headerlink" title="iOS–浅谈消息转发机制"></a>iOS–浅谈消息转发机制</h2><p>相信大家对这句话<code>unrecognized selector sent to instance 0x*********</code>一点都不陌生吧。</p><p>下面就来简单说一下 拯救即将崩溃代码–iOS的消息转发</p> <span id="more"></span><h3 id="动态绑定引发"><a href="#动态绑定引发" class="headerlink" title="动态绑定引发"></a>动态绑定引发</h3><p>因为OC是一个动态运行时语言，其中之一的特性就是动态绑定。</p><p>关于动态绑定，苹果官网的给的解释为：（determining the method to invoke at runtime）。</p><p>简单点来说就是：<strong>程序直到执行时才能确定实际要调用的方法。</strong></p><p>这样就会造成一个问题，我可以向一个实例发送一个消息，让它执行一个不属于自己的方法。这个时候就会出现<strong>unrecognized selector sent to instance</strong>。</p><p>如果发生这种情况，那么我们就可以应用消息转发来解决这个问题。<br>把这个不属于自己的方法变成属于自己的方法，或者找一个有这个方法的实例来执行这个方法。<br>在程序抛出这个错误之前我们有<strong>三次</strong>可以修正这个错误的机会。</p><h3 id="拯救即将崩溃代码"><a href="#拯救即将崩溃代码" class="headerlink" title="拯救即将崩溃代码"></a>拯救即将崩溃代码</h3><h4 id="第一步-方法解析处理阶段-动态方法决议"><a href="#第一步-方法解析处理阶段-动态方法决议" class="headerlink" title="第一步 方法解析处理阶段 | 动态方法决议"></a>第一步 方法解析处理阶段 | 动态方法决议</h4><p> 该方法内可为当前类动态添加方法。</p><p> 将sel的方法实现指向一个已存在的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 方法解析处理阶段 | 动态方法决议</span><br><span class="line"> 该方法内可为当前类动态添加方法。</span><br><span class="line"> 将sel的方法实现指向一个已存在的方法</span><br><span class="line"> */</span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel</span><br><span class="line">&#123;</span><br><span class="line">    NSString *selectorString = NSStringFromSelector(sel);</span><br><span class="line">    printf(&quot;%s %s\n&quot;, __func__, selectorString.UTF8String);</span><br><span class="line">    </span><br><span class="line">    // 根据 sel 得到 class 的实例方法</span><br><span class="line">    Method method = class_getInstanceMethod([self class], @selector(dynamic_method));</span><br><span class="line">    // 根据 sel 得到 class 的函数指针</span><br><span class="line">    IMP method_imp = class_getMethodImplementation([self class], @selector(dynamic_method));</span><br><span class="line">    // 给找不到实现的sel添加实现</span><br><span class="line">    BOOL ret = class_addMethod([self class], sel, method_imp, method_getTypeEncoding(method));</span><br><span class="line">    printf(&quot;%s\n&quot;, ret?&quot;交换添加成功&quot;:&quot;交换添加失败&quot;);</span><br><span class="line">    // 返回结果不影响流程</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么说上面resolveInstanceMethod的返回结果不影响实际流程呢，看下面runtime的源码。<br>我们可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/***********************************************************************</span><br><span class="line">* resolveInstanceMethod</span><br><span class="line">* Call +resolveInstanceMethod, looking for a method to be added to class cls.</span><br><span class="line">* cls may be a metaclass or a non-meta class.</span><br><span class="line">* Does not check if the method already exists.</span><br><span class="line">**********************************************************************/</span><br><span class="line">static void resolveInstanceMethod(id inst, SEL sel, Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    runtimeLock.assertUnlocked();</span><br><span class="line">    ASSERT(cls-&gt;isRealized());</span><br><span class="line">    SEL resolve_sel = @selector(resolveInstanceMethod:);</span><br><span class="line"></span><br><span class="line">    if (!lookUpImpOrNilTryCache(cls, resolve_sel, cls-&gt;ISA(/*authenticated*/true))) &#123;</span><br><span class="line">        // Resolver not implemented.</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BOOL (*msg)(Class, SEL, SEL) = (typeof(msg))objc_msgSend;</span><br><span class="line">    // 执行了resolveInstanceMethod方法，得到了一个结果resolved</span><br><span class="line">    bool resolved = msg(cls, resolve_sel, sel);</span><br><span class="line"></span><br><span class="line">    // Cache the result (good or bad) so the resolver doesn&#x27;t fire next time.</span><br><span class="line">    // +resolveInstanceMethod adds to self a.k.a. cls</span><br><span class="line">    IMP imp = lookUpImpOrNilTryCache(inst, sel, cls);</span><br><span class="line">    // resolved只影响了信息的输出</span><br><span class="line">    if (resolved  &amp;&amp;  PrintResolving) &#123;</span><br><span class="line">        if (imp) &#123;</span><br><span class="line">            _objc_inform(&quot;RESOLVE: method %c[%s %s] &quot;</span><br><span class="line">                         &quot;dynamically resolved to %p&quot;, </span><br><span class="line">                         cls-&gt;isMetaClass() ? &#x27;+&#x27; : &#x27;-&#x27;, </span><br><span class="line">                         cls-&gt;nameForLogging(), sel_getName(sel), imp);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            // Method resolver didn&#x27;t add anything?</span><br><span class="line">            _objc_inform(&quot;RESOLVE: +[%s resolveInstanceMethod:%s] returned YES&quot;</span><br><span class="line">                         &quot;, but no new implementation of %c[%s %s] was found&quot;,</span><br><span class="line">                         cls-&gt;nameForLogging(), sel_getName(sel), </span><br><span class="line">                         cls-&gt;isMetaClass() ? &#x27;+&#x27; : &#x27;-&#x27;, </span><br><span class="line">                         cls-&gt;nameForLogging(), sel_getName(sel));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二步-快速转发阶段-快速查找"><a href="#第二步-快速转发阶段-快速查找" class="headerlink" title="第二步 快速转发阶段 | 快速查找"></a>第二步 快速转发阶段 | 快速查找</h4><p> 上一步未解决问题时触发。</p><p> 返回一个能响应aSelector的实例，即将aSelector转发给另外的类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> 快速转发阶段 | 快速查找</span><br><span class="line"> 上一步未解决问题时触发。</span><br><span class="line"> 返回一个能响应aSelector的实例，即将aSelector转发给另外的类。</span><br><span class="line"> */</span><br><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector</span><br><span class="line">&#123;</span><br><span class="line">    NSString *selectorString = NSStringFromSelector(aSelector);</span><br><span class="line">    printf(&quot;%s %s\n&quot;, __func__, selectorString.UTF8String);</span><br><span class="line">    </span><br><span class="line">    if ([selectorString isEqualToString:@&quot;no_imp_method&quot;]) &#123;</span><br><span class="line">        // 返回一个实现了aSelector函数的实例</span><br><span class="line">        // 如果该实例没有实现aSelector，则进入下一步methodSignatureForSelector</span><br><span class="line">        printf(&quot;%s 转发消息至BackUpClass\n&quot;,__func__);</span><br><span class="line">        return  [[BackUpClass alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    // 返回self或者nil,则说明没有可以响应的目标,则进入下一步methodSignatureForSelector。</span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第三步-常规转发阶段-慢速查找"><a href="#第三步-常规转发阶段-慢速查找" class="headerlink" title="第三步 常规转发阶段 | 慢速查找"></a>第三步 常规转发阶段 | 慢速查找</h4><p> 获得一个方法签名。签名由一个能响应aSelector的实例生成。<br> 有签名则进入消息转发的最后一步forwardInvocation。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> 常规转发阶段 | 慢速查找</span><br><span class="line"> 返回一个方法签名。签名由一个能响应aSelector的实例生成。</span><br><span class="line"> </span><br><span class="line"> */</span><br><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</span><br><span class="line">&#123;</span><br><span class="line">    NSString *selectorString = NSStringFromSelector(aSelector);</span><br><span class="line">    printf(&quot;%s %s\n&quot;, __func__, selectorString.UTF8String);</span><br><span class="line">    </span><br><span class="line">    BackUpClass * backUp = [BackUpClass new];</span><br><span class="line">    NSMethodSignature * sign = [backUp methodSignatureForSelector:aSelector];</span><br><span class="line">    //有签名则进入消息转发的最后一步forwardInvocation</span><br><span class="line">    return sign;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以什么都不处理，至此本次消息转发结束，程序也不会crash。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> 将sel转发给一个真正实现了sel的对象</span><br><span class="line"> 也可以什么都不处理，至此本次消息转发结束，也不会crash。</span><br><span class="line"> */</span><br><span class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%s %s\n&quot;,__func__ , anInvocation.description.UTF8String);</span><br><span class="line">    </span><br><span class="line">    // 创建备用消息接收对象</span><br><span class="line">    BackUpClass * backUp = [[BackUpClass alloc] init];</span><br><span class="line">    printf(&quot;%s 转发消息至BackUpClass\n&quot;,__func__);</span><br><span class="line">    [anInvocation invokeWithTarget:backUp];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p>浅谈。可以交流。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows--远程桌面账号密码输入正确却显示凭据失败</title>
      <link href="/2021/10/11/windows-remotedestopone/"/>
      <url>/2021/10/11/windows-remotedestopone/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows–远程桌面账号密码输入正确却显示凭据失败的解决方法"><a href="#Windows–远程桌面账号密码输入正确却显示凭据失败的解决方法" class="headerlink" title="Windows–远程桌面账号密码输入正确却显示凭据失败的解决方法"></a>Windows–远程桌面账号密码输入正确却显示凭据失败的解决方法</h2><p>Windows A电脑 通过自带的远程桌面连接 Windows B电脑</p><p>A电脑：<strong>客户端</strong></p><p>B电脑：<strong>服务器</strong></p><p>一般来说客户端不需要什么操作</p><p>下面来说一下服务器端</p> <span id="more"></span><ul><li><p>第一步：Win+R</p></li><li><p>第二步：输入gpedit.msc 然后回车 </p></li><li><p>进入计算机策略配置</p></li><li><p>依次点开“计算机配置”→“Window设置”→“安全设置”→“本地策略”→“安全选项”<br><img src="https://img-blog.csdnimg.cn/img_convert/1db8c0035db8d4cdce8095e60181c256.png" alt="104A9D02-9443-4FB2-81BC-C38D573C5B40.png"></p></li><li><p>找到“网络访问：本地账户的共享和安全模型” 按下图更改为“经典-对本地用户进行身份验证，不改变其本来身份”</p></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/ed809f83957a53bf790f6a95b2852824.png" alt="WX20211011-102024@2x.png"></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS--AES加密</title>
      <link href="/2021/07/29/ios-aes-encrypt/"/>
      <url>/2021/07/29/ios-aes-encrypt/</url>
      
        <content type="html"><![CDATA[<p>密码学中的高级加密标准（Advanced Encryption Standard，AES），又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。<br>加密代码都在这里</p> <span id="more"></span><p>AES加密方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * AES加密</span><br><span class="line"> * aesKey 加密Key</span><br><span class="line"> */</span><br><span class="line">+(NSData *)AESParmEncryptWithKey:(NSString *)AES_Key andEncryptData:(NSData *)encryptData  //加密</span><br><span class="line">&#123;</span><br><span class="line">    NSString * kInitVector = [AES_Key copy]; //16位偏移，CBC模式才有</span><br><span class="line">    NSData *initVector = [kInitVector dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class="line">    //公钥</span><br><span class="line">    char keyPtr[kCCKeySizeAES128+1];</span><br><span class="line">    memset(keyPtr, 0, sizeof(keyPtr));</span><br><span class="line">    [AES_Key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];</span><br><span class="line">    //数据长度</span><br><span class="line">    NSUInteger dataLength = encryptData.length;</span><br><span class="line">    //加密输出缓冲区大小</span><br><span class="line">    size_t bufferSize = dataLength + kCCBlockSizeAES128;</span><br><span class="line">    //加密输出缓冲区</span><br><span class="line">    void *buffer = malloc(bufferSize);</span><br><span class="line">    //实际输出大小</span><br><span class="line">    size_t numBytesEncrypted = 0;</span><br><span class="line">    CCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt,//kCCEncrypt 代表加密 kCCDecrypt代表解密</span><br><span class="line">                                          kCCAlgorithmAES,//加密算法</span><br><span class="line">                                          kCCOptionPKCS7Padding,//CBC -&gt; PKCS7Padding，ECB -&gt; kCCOptionPKCS7Padding|kCCOptionECBMode</span><br><span class="line">                                          keyPtr,</span><br><span class="line">                                          kCCBlockSizeAES128,//密钥长度128</span><br><span class="line">                                          initVector.bytes,//偏移字符串, ECB模式传NULL</span><br><span class="line">                                          encryptData.bytes,//编码内容</span><br><span class="line">                                          dataLength,</span><br><span class="line">                                          buffer,</span><br><span class="line">                                          bufferSize,</span><br><span class="line">                                          &amp;numBytesEncrypted);</span><br><span class="line">    if (cryptStatus == kCCSuccess) &#123;</span><br><span class="line">        return [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];</span><br><span class="line">    &#125;</span><br><span class="line">    free(buffer);</span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * AES加密</span><br><span class="line"> * aesKey 加密Key</span><br><span class="line"> */</span><br><span class="line">+ (NSString *)AES_EncryptWithKey:(NSString *)AES_Key andEncryptText:(NSString *)encryptText</span><br><span class="line">&#123;</span><br><span class="line">    AES_Key = [AESUtils checkAESKey:AES_Key];</span><br><span class="line">    const char *cstr = [encryptText cStringUsingEncoding:NSUTF8StringEncoding];</span><br><span class="line">    NSData *data = [NSData dataWithBytes:cstr length:encryptText.length];</span><br><span class="line">    //对数据进行加密</span><br><span class="line">    NSData *result = [AESUtils AESParmEncryptWithKey:AES_Key andEncryptData:data];</span><br><span class="line">    //转换为2进制字符串</span><br><span class="line">    if (result &amp;&amp; result.length &gt; 0) &#123;</span><br><span class="line">        Byte *datas = (Byte*)[result bytes];</span><br><span class="line">        NSMutableString *output = [NSMutableString stringWithCapacity:result.length * 2];</span><br><span class="line">        for(int i = 0; i &lt; result.length; i++)&#123;</span><br><span class="line">            [output appendFormat:@&quot;%02x&quot;, datas[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        return output;</span><br><span class="line">    &#125;</span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AES解密方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * AES解密</span><br><span class="line"> * aesKey 加密Key</span><br><span class="line"> */</span><br><span class="line">+ (NSData *)AESParmDecryptWithKey:(NSString *)AES_Key andDecryptData:(NSData *)decryptData  //解密</span><br><span class="line">&#123;</span><br><span class="line">    NSString * kInitVector = [AES_Key copy]; //16位偏移，CBC模式才有</span><br><span class="line">    NSData *initVector = [kInitVector dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class="line">    //公钥</span><br><span class="line">    char keyPtr[kCCKeySizeAES128+1];</span><br><span class="line">    memset(keyPtr, 0, sizeof(keyPtr));</span><br><span class="line">    [AES_Key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];</span><br><span class="line">    //数据长度</span><br><span class="line">    NSUInteger dataLength = decryptData.length;</span><br><span class="line">    //加密输出缓冲区大小</span><br><span class="line">    size_t bufferSize = dataLength + kCCBlockSizeAES128;</span><br><span class="line">    //加密输出缓冲区</span><br><span class="line">    void *buffer = malloc(bufferSize);</span><br><span class="line">    //实际输出大小</span><br><span class="line">    size_t numBytesDecrypted = 0;</span><br><span class="line">    CCCryptorStatus cryptStatus = CCCrypt(kCCDecrypt,//kCCEncrypt 代表加密 kCCDecrypt代表解密</span><br><span class="line">                                          kCCAlgorithmAES,//加密算法</span><br><span class="line">                                          kCCOptionPKCS7Padding,//CBC -&gt; PKCS7Padding，ECB -&gt; kCCOptionPKCS7Padding|kCCOptionECBMode</span><br><span class="line">                                          keyPtr,</span><br><span class="line">                                          kCCBlockSizeAES128,//密钥长度128</span><br><span class="line">                                          initVector.bytes,//偏移字符串,, ECB模式传NULL</span><br><span class="line">                                          decryptData.bytes,//编码内容</span><br><span class="line">                                          dataLength,</span><br><span class="line">                                          buffer,</span><br><span class="line">                                          bufferSize,</span><br><span class="line">                                          &amp;numBytesDecrypted);</span><br><span class="line">    if (cryptStatus == kCCSuccess) &#123;</span><br><span class="line">        return [NSData dataWithBytesNoCopy:buffer length:numBytesDecrypted];</span><br><span class="line">    &#125;</span><br><span class="line">    free(buffer);</span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * AES解密</span><br><span class="line"> * aesKey 加密Key</span><br><span class="line"> */</span><br><span class="line">+ (NSString *)AES_DecryptWithKey:(NSString *)AES_Key andDecryptText:(NSString *)decryptText</span><br><span class="line">&#123;</span><br><span class="line">    AES_Key = [AESUtils checkAESKey:AES_Key];    </span><br><span class="line">    //转换为2进制Data</span><br><span class="line">    NSMutableData *data = [NSMutableData dataWithCapacity:decryptText.length / 2];</span><br><span class="line">    unsigned char whole_byte;</span><br><span class="line">    char byte_chars[3] = &#123;&#x27;\0&#x27;,&#x27;\0&#x27;,&#x27;\0&#x27;&#125;;</span><br><span class="line">    int i;</span><br><span class="line">    for (i=0; i &lt; [decryptText length] / 2; i++) &#123;</span><br><span class="line">        byte_chars[0] = [decryptText characterAtIndex:i*2];</span><br><span class="line">        byte_chars[1] = [decryptText characterAtIndex:i*2+1];</span><br><span class="line">        whole_byte = strtol(byte_chars, NULL, 16);</span><br><span class="line">        [data appendBytes:&amp;whole_byte length:1];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //对数据进行解密</span><br><span class="line">    NSData* result = [AESUtils AESParmDecryptWithKey:AES_Key andDecryptData:data];</span><br><span class="line">    if (result &amp;&amp; result.length &gt; 0) &#123;</span><br><span class="line">        return [[NSString alloc] initWithData:result encoding:NSUTF8StringEncoding];</span><br><span class="line">    &#125;</span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 加密key检查</span><br><span class="line"> * aesKey 加密Key</span><br><span class="line"> */</span><br><span class="line">+ (NSString *)checkAESKey:(NSString *)AES_Key</span><br><span class="line">&#123;</span><br><span class="line">    if (AES_Key.length &lt; 16) &#123;</span><br><span class="line">        NSMutableArray *array = [NSMutableArray arrayWithArray:@[AES_Key]];</span><br><span class="line">        while (array.count &lt;= 16 - AES_Key.length) &#123;</span><br><span class="line">            [array insertObject:@&quot;0&quot; atIndex:0];</span><br><span class="line">        &#125;</span><br><span class="line">        AES_Key = [array componentsJoinedByString:@&quot;&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">    return AES_Key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Demo地址<a href="https://gitee.com/LiynXu/aesutils/tree/master/AESUtilsDemo">Demo</a><br>如有错误请指出。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS--引用子类对象作为属性</title>
      <link href="/2021/04/22/ios-yin-yong-zi-lei-dui-xiang-zuo-wei-shu-xing/"/>
      <url>/2021/04/22/ios-yin-yong-zi-lei-dui-xiang-zuo-wei-shu-xing/</url>
      
        <content type="html"><![CDATA[<p>某位同事编码。一个类引用一个子类对象作为属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;CycleFindTestClas.h&quot;</span><br><span class="line"></span><br><span class="line">@interface TestObjectClass : NSObject</span><br><span class="line">@property (nonatomic, strong) CycleFindTestClas *cycle;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure> <span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;TestObjectClass.h&quot;</span><br><span class="line"></span><br><span class="line">// 此声明CycleFindTestClas类的代码会被编译器报错</span><br><span class="line"></span><br><span class="line">//（Cannot find interface declaration for &#x27;TestObjectClass&#x27;, superclass of &#x27;CycleFindTestClas&#x27;）</span><br><span class="line"></span><br><span class="line">@interface CycleFindTestClas : TestObjectClass</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>以下为本人猜测，如果纰漏请多多指教。</p><p>究其原因，其实很简单。编译器查找某个类无非是两种。</p><ul><li>通过文件查找 #import “ClassName.h”</li><li>通过前置声明 @class name;</li></ul><p>上述代码没有前置声明，那么查找TestObjectClass类必然要通过文件，于是开始了下面的流程</p><ul><li>编译器查到了TestObjectClass.h文件</li><li>然后开始从上到下遍历TestObjectClass.h代码</li><li>发现Foundation.h内没有，于是查找下一行CycleFindTestClas.h</li><li>发现CycleFindTestClas.h有TestObjectClass，但是这个TestObjectClass是个父类，那么继续开始查找TestObjectClass的声明</li><li>编译器查到了TestObjectClass.h文件</li><li>然后开始从上到下遍历TestObjectClass.h代码</li><li>······························ 是不是循环了</li></ul><p>所以根本就查找不到 TestObjectClass的声明@interface TestObjectClass : NSObject。<br>所以我们在日常编码中 .h 内尽量不再引用其他自定义类的 .h 文件，尽量使用前置声明某个类.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@class CycleFindTestClas;</span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">@interface TestObjectClass : NSObject</span><br><span class="line">@property (nonatomic, strong) CycleFindTestClas *cycle;</span><br><span class="line">@end </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS--浅谈生成一个单例</title>
      <link href="/2021/04/22/ios-qian-tan-sheng-cheng-yi-ge-dan-li/"/>
      <url>/2021/04/22/ios-qian-tan-sheng-cheng-yi-ge-dan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="浅谈生成一个单例"><a href="#浅谈生成一个单例" class="headerlink" title="浅谈生成一个单例"></a>浅谈生成一个单例</h2><p>单例作为非常常用的一个设计模式来说，是每个Coder必备的技能之一，但是还有很多人可能写了个假单例，就是我换种实例化方法可能就生成了一个新的对象。</p><h3 id="1、为什么要生成一个单例对象"><a href="#1、为什么要生成一个单例对象" class="headerlink" title="1、为什么要生成一个单例对象"></a>1、为什么要生成一个单例对象</h3><ul><li>为了确保在整个应用期间只有一个实例，以达到用户的特定的使用目的。</li><li>对于频繁使用的对象，可以把多次创建对象所花费的时间节省下来，提高运行效率。</li><li>如果对象所占用的空间大，那么就可以节省大量不必要的空间，降了内存压力。   <span id="more"></span><h3 id="2、生成单例需要注意的问题"><a href="#2、生成单例需要注意的问题" class="headerlink" title="2、生成单例需要注意的问题"></a>2、生成单例需要注意的问题</h3></li><li>不同实例化方法可能返回不同的对象</li></ul><h3 id="3、如何生成一个单例"><a href="#3、如何生成一个单例" class="headerlink" title="3、如何生成一个单例"></a>3、如何生成一个单例</h3><p>首先在当前类文件中声明一个全局静态对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@implementation TestObjectClass</span><br><span class="line">static  TestObjectClass *_testClass = nil;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写一个类方法，初始化全局静态对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)shareObject&#123;</span><br><span class="line">    if (_testClass == nil) &#123;</span><br><span class="line">        _testClass = [[super alloc]init];</span><br><span class="line">    &#125;</span><br><span class="line">    return _testClass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写allocWithZone方法，拦截alloc方法，防止生成新对象（使用synchronized，并优化同步锁）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)allocWithZone:(struct _NSZone *)zone &#123;</span><br><span class="line">    if (_testClass == nil) &#123;</span><br><span class="line">        @synchronized (self) &#123;</span><br><span class="line">            if (_testClass == nil) &#123;</span><br><span class="line">                _testClass = [super allocWithZone:zone];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return _testClass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写allocWithZone方法，拦截alloc方法，防止生成新对象（使用dispatch_once）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)allocWithZone:(struct _NSZone *)zone &#123;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        if (_testClass == nil) &#123;</span><br><span class="line">            _testClass = [super allocWithZone:zone];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    return _testClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重写copyWithZone方法，拦截copy方法，防止生成新对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (id)copyWithZone:(nullable NSZone *)zone &#123;</span><br><span class="line">    return _testClass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写mutableCopyWithZone方法，拦截mutableCopy方法，防止生成新对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (id)mutableCopyWithZone:(nullable NSZone *)zone &#123;</span><br><span class="line">    return _testClass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如有纰漏请多多指教。</p><p><a href="https://www.jianshu.com/p/03eb4f2203bd">简书：https://www.jianshu.com/p/03eb4f2203bd</a><br><a href="https://blog.csdn.net/ZuoWeiXiaoDuZuoZuo/article/details/116001644">CSDN：https://blog.csdn.net/ZuoWeiXiaoDuZuoZuo/article/details/116001644</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS--cocoapodsPackager编译动态库</title>
      <link href="/2020/09/28/macos-cocoapodspackager-bian-yi-dong-tai-ku/"/>
      <url>/2020/09/28/macos-cocoapodspackager-bian-yi-dong-tai-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="cocoapods-packager编译动态库失败的解决"><a href="#cocoapods-packager编译动态库失败的解决" class="headerlink" title="cocoapods-packager编译动态库失败的解决"></a>cocoapods-packager编译动态库失败的解决</h2><p>由于近期在研究私有库打包，发现此问题。</p><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>一开始运行此段代码<code>pod package *******.podspec --force --no-mangle</code>毫无问题。<br>然后就开始尝试生成一个动态库，于是加上了<code>--dynamic</code>，此时出现了下面一大串代码。</p> <span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   CocoaPods : 1.9.3</span><br><span class="line">        Ruby : ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin19]</span><br><span class="line">    RubyGems : 3.0.3</span><br><span class="line">        Host : Mac OS X 10.15 (19A582a)</span><br><span class="line">       Xcode : 11.3.1 (11C504)</span><br><span class="line">         Git : git version 2.21.1 (Apple Git-122.3)</span><br><span class="line">Ruby lib dir : /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib</span><br><span class="line">Repositories : ARSpecRepo - git - git@gitlab.allride-ai.cn:infra/ios-common.git @ b1f3805d2a766c9509bde74f4574270917dce669</span><br><span class="line"></span><br><span class="line">               cocoa-local - file system</span><br><span class="line">               master - git - https://github.com/CocoaPods/Specs.git @ 163b8a8c3e6980b42c623bc76f6b136f8c68d19c</span><br><span class="line"></span><br><span class="line">               trunk - CDN - https://cdn.cocoapods.org/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cocoapods-art         : 1.0.4</span><br><span class="line">cocoapods-deintegrate : 1.0.4</span><br><span class="line">cocoapods-packager    : 1.5.0</span><br><span class="line">cocoapods-plugins     : 1.0.0</span><br><span class="line">cocoapods-search      : 1.0.0</span><br><span class="line">cocoapods-stats       : 1.1.0</span><br><span class="line">cocoapods-trunk       : 1.4.1</span><br><span class="line">cocoapods-try         : 1.1.0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ArgumentError - wrong number of arguments (given 3, expected 7..10)</span><br><span class="line">/usr/local/lib/ruby/gems/2.6.0/gems/cocoapods-1.9.3/lib/cocoapods/target/pod_target.rb:137:in `initialize&#x27;</span><br><span class="line">/usr/local/lib/ruby/gems/2.6.0/gems/cocoapods-packager-1.5.0/lib/cocoapods-packager/pod_utils.rb:161:in `new&#x27;</span><br><span class="line">/usr/local/lib/ruby/gems/2.6.0/gems/cocoapods-packager-1.5.0/lib/cocoapods-packager/pod_utils.rb:161:in `build_dynamic_target&#x27;</span><br><span class="line">/usr/local/lib/ruby/gems/2.6.0/gems/cocoapods-packager-1.5.0/lib/cocoapods-packager/pod_utils.rb:131:in `install_dynamic_pod&#x27;</span><br><span class="line">/usr/local/lib/ruby/gems/2.6.0/gems/cocoapods-packager-1.5.0/lib/pod/command/package.rb:83:in `build_in_sandbox&#x27;</span><br><span class="line">/usr/local/lib/ruby/gems/2.6.0/gems/cocoapods-packager-1.5.0/lib/pod/command/package.rb:100:in `block in build_package&#x27;</span><br><span class="line">/usr/local/lib/ruby/gems/2.6.0/gems/cocoapods-packager-1.5.0/lib/pod/command/package.rb:99:in `each&#x27;</span><br><span class="line">/usr/local/lib/ruby/gems/2.6.0/gems/cocoapods-packager-1.5.0/lib/pod/command/package.rb:99:in `build_package&#x27;</span><br><span class="line">/usr/local/lib/ruby/gems/2.6.0/gems/cocoapods-packager-1.5.0/lib/pod/command/package.rb:66:in `run&#x27;</span><br><span class="line">/usr/local/lib/ruby/gems/2.6.0/gems/claide-1.0.3/lib/claide/command.rb:334:in `run&#x27;</span><br><span class="line">/usr/local/lib/ruby/gems/2.6.0/gems/cocoapods-1.9.3/lib/cocoapods/command.rb:52:in `run&#x27;</span><br><span class="line">/usr/local/lib/ruby/gems/2.6.0/gems/cocoapods-1.9.3/bin/pod:55:in `&lt;top (required)&gt;&#x27;</span><br><span class="line">/usr/local/lib/ruby/gems/2.6.0/bin/pod:24:in `load&#x27;</span><br><span class="line">/usr/local/lib/ruby/gems/2.6.0/bin/pod:24:in `&lt;main&gt;&#x27;</span><br></pre></td></tr></table></figure><p>然后同事的电脑可以正常打包，我查看了他的电脑环境，发现ruby是2.3.7，我以为是此处发生问题，于是开始了降级Ruby，然而。。。。。。事情并没有这么简单。</p><h3 id="我以为降级就会成功"><a href="#我以为降级就会成功" class="headerlink" title="我以为降级就会成功"></a>我以为降级就会成功</h3><p>因为我的系统已经更新到了10.15 Catalina，默认的Ruby版本就是2.6.3。</p><p>降级Ruby就得降级系统，但是降级系统到10.14总是不成功，总是提示</p><p><code>更新固件时发生错误。退出安装器以重新启动电脑，然后再次尝试。</code></p><p>然后我想起来这可能是联网验证的结果，于是我关闭wifi，调整时间到15年，然而。。。。。。。。。。还是会出现</p><p><code>更新固件时发生错误。退出安装器以重新启动电脑，然后再次尝试。</code></p><p>看来断了wifi还是没有用，最后发现安装过程中会重启几次，重启的时候wifi会自动开启然后连上我的路由器，于是我就把路由器的网线拔了，wifi让你连有网算我输！</p><p>然后。。。。。。。。居然成功了。哎。我太难了。</p><p>进入系统后一顿初始化，</p><pre><code>* 下载Xcode* 安装cocoapods* 安装cocoapods-packager* 拉代码</code></pre><p>等啊等，个把小时搞定这些事。</p><figure class="highlight plaintext"><figcaption><span>package *******.podspec --force --dynamic --no-mangle```打包ing</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">然后。。。。。。啊。。。。。。。还是报错啊！！！！！！！！！！！</span><br><span class="line"></span><br><span class="line">和之前除了工具版本不一致。其他基本一模一样。</span><br><span class="line"></span><br><span class="line">看来不是Ruby版本的问题。</span><br><span class="line"></span><br><span class="line">### 刚才方向不对，再来</span><br><span class="line"></span><br><span class="line">于是我就想是不是cocoapods-packager自己的锅。</span><br><span class="line"></span><br><span class="line">迅速去Github上的cocoapods-packager项目看issues。</span><br><span class="line"></span><br><span class="line">发现了一个问题： [**issues#257** Fail to build a pod into dynamic framework](https://github.com/CocoaPods/cocoapods-packager/issues/257)</span><br><span class="line"></span><br><span class="line">细心的我发现了一句话</span><br><span class="line">```Look at the master branch, the calling to Pod::PodTarget.new has changed.```</span><br><span class="line"></span><br><span class="line">我马不停蹄的查看了cocoapods-packager本机的代码，目录在这</span><br><span class="line">```cocoapods-packager/lib/cocoapods-packager/pod_utils.rb```</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>    file_accessors = create_file_accessors(static_target, dynamic_sandbox)    archs = []    dynamic_target = Pod::PodTarget.new(dynamic_sandbox, true, static_target.user_build_configurations, archs, platform, static_target.specs, static_target.target_definitions, file_accessors)    dynamic_target      end</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Githu上现存的master分支</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>    dynamic_target = Pod::PodTarget.new(static_target.specs, static_target.target_definitions, dynamic_sandbox)    dynamic_target.host_requires_frameworks = true    dynamic_target.user_build_configurations = static_target.user_build_configurations    dynamic_target      end</code></pre><pre><code>对比发现这一段代码不一样，虽然我看不懂、、、、、、我是真的不会ruby。问题到这里差不多就解决了一大半，因为我已经找到了原因。### 发现解决方法这个时候我```sudo gem uninstall cocoapods-packager```，卸载掉cocoapods-packager。开始源码安装cocoapods-packager。首先拉取源代码```git clone https://github.com/CocoaPods/cocoapods-packager.git```完毕之后进入目录 ```cocoapods-packager```* 查看bundler是否安装```gem list bundler ```(没有出现bundler的话就```gem install bundler```)* 安装依赖项```bundler install```* 执行```sudo gem build cocoapods-packager.gemspec ```语句后会生成cocoapods-packager-1.5.0.gem文件* 将生成的cocoapods-packager-1.5.0.gem 文件执行本地安装```sudo gem install cocoapods-packager-1.5.0.gem -l```为了更稳我重启了终端。接着 ```pod package *******.podspec --force --dynamic --no-mangle```打包ing出现了```Building dynamic framework **** (****) with configuration Release```成功了。。。。。。太难了。此时我的编译环境是    * macOS 10.14.6    * Xcode 11.3下面就想，新系统上行不行的通，现在验证之前又不能升级。。。。emmmm。。。。。我还有个blackApple。### 最新编译环境验证另外一个设备的编译环境是    * macOS 10.15.7    * Xcode 12.0.1都是最新的。卸载掉gem安装的cocoapods-packager。源码安装cocoapods-packager。接着 ```pod package *******.podspec --force --dynamic --no-mangle```打包ing出现了```Building dynamic framework **** (****) with configuration Release```哎。又成功了。Happy。。。。马上把我笔记本的东西都升级了。美滋滋。。。特此记录。。。。。。。。。。。### 完</code></pre>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS--制作Mac引导盘</title>
      <link href="/2018/04/07/macos-make-boot-usb-disk-for-mac/"/>
      <url>/2018/04/07/macos-make-boot-usb-disk-for-mac/</url>
      
        <content type="html"><![CDATA[<h2 id="如何制作Mac引导盘"><a href="#如何制作Mac引导盘" class="headerlink" title="如何制作Mac引导盘"></a>如何制作Mac引导盘</h2><p>制作mac的引导盘方法不止这一种，请严格按照要求来操作，出毛病我是不负责的哦。</p> <span id="more"></span><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>8GB U盘一个（这个是容量下限，最低8GB，最好是USB3.0或者以上）</li><li>一个正常使用的macOS</li></ul><h3 id="下载原版系统-已下载可以忽略"><a href="#下载原版系统-已下载可以忽略" class="headerlink" title="下载原版系统 (已下载可以忽略)"></a>下载原版系统 (已下载可以忽略)</h3><ul><li>打开AppStore</li><li>看AppStore窗口右侧</li><li>macOS ······ 点击</li><li>下载</li><li>等（这个看网速的）</li></ul><h3 id="制作引导盘"><a href="#制作引导盘" class="headerlink" title="制作引导盘"></a>制作引导盘</h3><p>【注意】每个输入都和之前的一句隔着一个 <strong>空格</strong></p><ul><li>打开终端（terminal）</li><li>输入 <strong>“sudo”</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo</span><br></pre></td></tr></table></figure><ul><li>打开Finder（新版系统叫<strong>访达</strong>）</li><li>进入应用程序</li><li>点击刚刚下载的系统</li><li>右键–显示包内容 找到路径**”Contents/Resources/createinstallmedia”**，直接拖至终端,然后代码应该是下面这种 </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo /Applications/Install\ macOS\ High\ Sierra.app/Contents/Resources/createinstallmedia</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意 sudo 后有 <strong>空格</strong> </p><ul><li>接着输入以下代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">--volume</span><br></pre></td></tr></table></figure><ul><li><strong>语句现在是这样的</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo /Applications/Install\ macOS\ High\ Sierra.app/Contents/Resources/createinstallmedia --volume</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>然后输入你的U盘盘符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/Volumes/macOS</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>语句现在是这样的</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo /Applications/Install\ macOS\ High\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/macOS</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>下一步</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">--applicationpath</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>语句现在是这样的</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo /Applications/Install\ macOS\ High\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/macOS --applicationpath</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>下一步</li></ul><p>直接把应用程序内的“安装macOS High Sierra.app”拖进终端</p><ul><li><strong>语句现在是这样的</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo /Applications/Install\ macOS\ High\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/macOS --applicationpath /Applications/Install\ macOS\ High\ Sierra.app</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>下一步</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">--nointeraction</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>语句现在是这样的</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo /Applications/Install\ macOS\ High\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/macOS --applicationpath /Applications/Install\ macOS\ High\ Sierra.app --nointeraction</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>回车 （提示输入密码）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Password:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输入管理员密码</strong> <strong>回车</strong></p><ul><li><strong>正在格式化磁盘</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Erasing Disk: 0%... 10%... 20%... 30%...100%...</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>正在拷贝安装器文件</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Copying installer files to disk...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个时候你就可以看到你的U盘名称变了，而且里面多了一个系统，不过这个时候并没有完成</p><p>大概需要等待5-10分钟，这个时间长短主要取决于你U盘的写入速率</p><ul><li><strong>当显示下面信息是就代表制作完成</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Copy complete.</span><br><span class="line">Making disk bootable...</span><br><span class="line">Copying boot files...</span><br><span class="line">Copy complete.</span><br><span class="line">Done.</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer--U盘引导盘制作工具集合</title>
      <link href="/2018/04/05/computer-pe-boot-usb-disk-tools-set/"/>
      <url>/2018/04/05/computer-pe-boot-usb-disk-tools-set/</url>
      
        <content type="html"><![CDATA[<h3 id="写作目的"><a href="#写作目的" class="headerlink" title="写作目的"></a>写作目的</h3><p>为了向电脑小白科普目前，使用人数较多的PE引导盘的制作工具软件，这玩意的用处真的是很大很大了。</p><p>千万不要说PE只能重装系统。</p><ul><li>新硬盘无操作系统无分区，<strong>需要PE</strong>。</li><li>系统忘记登录密码不想重装，<strong>需要PE</strong>。</li><li>系统崩溃还有资料在桌面或者C盘，<strong>需要PE</strong>。</li><li>全盘数据恢复，<strong>需要PE</strong>。</li><li>重建主引导记录（MBR），重建分区表（修复分区表）、修复Windows系统引导，<strong>需要PE</strong>。</li></ul><p>这么有用的东西到底有多少呢，我也不是很清楚，看看下面就知道了。（排名不分先后，想到哪个写哪个）</p> <span id="more"></span><h4 id="电脑店"><a href="#电脑店" class="headerlink" title="电脑店"></a>电脑店</h4><p>这个是我第一次用的制作工具，不知道怎么就给找到了。<br>使用电脑店制作U盘PE系统比较的简单，基本上一键即可轻松制作，支持多种启动模式选择，支持个性化设置，别小看这个个性化设置，里边还隐藏着一些奥妙，为了测试的需要，我们采用默认设置进行PE系统的制作。</p><p>电脑店U盘启动盘制作工具，也是常称为的U盘启动制作工具的功能升格版，能更方便电脑技术人员装机、维护电脑使用的超强工具。此作品制作简单，支持所有U盘一键制作成启动盘；兼容多种机型；支持GHO、ISO系统文件，更支持原版系统安装，集成更全面工具，完全可以应对电脑技术人员常见的电脑故障维护工作。</p><ul><li>主页：<a href="http://u.diannaodian.com/">电脑店</a> - - &gt; <a href="http://u.diannaodian.com/">http://u.diannaodian.com/</a></li></ul><h4 id="U深度"><a href="#U深度" class="headerlink" title="U深度"></a>U深度</h4><p>这个是我比较喜欢里面的<strong>傲梅分区助手</strong></p><ul><li>主页：<a href="http://www.ushendu.info/">U深度</a> - - &gt; <a href="http://www.ushendu.info/">http://www.ushendu.info/</a></li></ul><h4 id="大白菜"><a href="#大白菜" class="headerlink" title="大白菜"></a>大白菜</h4><p>基本和电脑店差不多，大白菜制作U盘PE系统同样简单，还是一键即可搞定，也支持多种启动模式选择，支持个性化设置，个性化设置里同样隐藏着一些东西，可以自己去研究。</p><p>老牌经典PE之一，同时集成服务器版的server 2003和win8PE，支持BIOS/UEFI双启，对古董机器兼容非常好。内置工具比微PE多。集成一键装机，硬盘数据恢复，密码破解，等等实用的程序。 但是个人觉得部分工具重复，工具版本偏老旧、且略为臃肿。另！大白菜PE制作时要事先取消360赞助，否则安装系统后将装上360，不介意用户请忽略。 我觉得大白菜亮点是支持读写苹果分区格式（注意是读写，不是读取！），非常适合黑苹果用户。我也是个黑苹果用户。</p><ul><li>主页：<a href="http://www.dabaicaipe.cn/dbcpe/">大白菜</a> - - &gt; <a href="http://www.dabaicaipe.cn/dbcpe/">http://www.dabaicaipe.cn/dbcpe/</a></li></ul><h4 id="老毛桃"><a href="#老毛桃" class="headerlink" title="老毛桃"></a>老毛桃</h4><p>基本和电脑店差不多</p><ul><li>主页：<a href="http://www.laomaotao.org/">老毛桃</a> - - &gt; <a href="http://www.laomaotao.org/">http://www.laomaotao.org/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows--验证SHA1 MD5值</title>
      <link href="/2018/04/01/windows-how-to-verify-the-sha1-md5-value/"/>
      <url>/2018/04/01/windows-how-to-verify-the-sha1-md5-value/</url>
      
        <content type="html"><![CDATA[<p> 日常使用电脑过程中，难免会下载很多文件，比如游戏，软件等等，很多人在下载一个耗时长而又速度不稳定的文件之后，都可能遇见打开文件的时候显示文件被损坏的情况，这时候我们就需要在下载完成之后对文件就行数据完整性校验了。</p> <span id="more"></span><p>举个例子，以验证系统的记事本程序的Hash值为例，程序文件的路径为C:\Windows\notepad.exe。如果我们想要校验它的MD5值，<br>Win7 可运行：</p><p><strong>MD5</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil -hashfile C:\Windows\notepad.exe MD5</span><br></pre></td></tr></table></figure><p><strong>SHA1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil -hashfile C:\Windows\notepad.exe SHA1</span><br></pre></td></tr></table></figure><p><strong>SHA256</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil -hashfile C:\Windows\notepad.exe SHA256</span><br></pre></td></tr></table></figure><p>上面MD5 SHA1 SHA256请不要小写，除了文件路径，其他的要和上面一模一样</p><p>Win10 可运行如下命令：</p><pre><code>Get-FileHash C:\Windows\notepad.exe -Algorithm MD5| Format-List</code></pre><p>如果想要校验它的SHA1值，则运行如下命令：</p><pre><code>Get-FileHash C:\Windows\notepad.exe -Algorithm SHA1| Format-List</code></pre><p>如果想要校验SHA256值，则不需要带-Algorithm参数即可，命令如下：</p><pre><code>Get-FileHash C:\Windows\notepad.exe | Format-List</code></pre><p>  上面这个文件的路径是可以直接由鼠标拖进去的</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows--如何下载系统</title>
      <link href="/2018/04/01/windows-download-windows-image/"/>
      <url>/2018/04/01/windows-download-windows-image/</url>
      
        <content type="html"><![CDATA[<p>本文主要讲述如何下载原版系统，所谓的原版系统就是微软服务器上的系统镜像，而不是国内各大论坛的GHOST版本，个人并不推荐GHOST以及其他任何第三方封装过的系统。<br>以下载win10  1511中文简体64位为例子<br> <span id="more"></span></p><p><strong>第1步</strong> 进入<strong>MSDN</strong></p><ul><li>网址为<a href="http://msdn.itellyou.cn/">http://msdn.itellyou.cn/</a></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1519926-a8a950fc88c8b14c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="QQ20170820-084457.png"></p><p><strong>第2步</strong> 选择<strong>操作系统</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-c75ae3ea5755dd96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="QQ20170820-084519.png"></p><p><strong>第3步</strong> 选择你需要的<strong>系统版本</strong></p><ul><li>windows 10，Version 1511</li><li>中文-简体</li><li>64位 （X64）</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1519926-3a09ffff5c824f04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="QQ20170820-084625.png"></p><p><strong>第4步</strong> 复制<strong>ed2k</strong>链接</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-9f97278160d47baa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="QQ20170820-085441.png"></p><p><strong>第5步</strong> 打开<strong>下载工具</strong>，<strong>新建</strong>一个下载任务，链接就是用刚才复制的<strong>链接</strong></p><ul><li>下载中最好不要暂停</li><li>下载完了之后记得<a href="http://ilongge.cn/2018/04/01/%E9%AA%8C%E8%AF%81SHA1%20MD5%E5%80%BC/">验证SHA1值</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多站点配置SSH-Key</title>
      <link href="/2018/03/14/multwwwconfigssh-key/"/>
      <url>/2018/03/14/multwwwconfigssh-key/</url>
      
        <content type="html"><![CDATA[<h2 id="多站点配置SSH-Key"><a href="#多站点配置SSH-Key" class="headerlink" title="多站点配置SSH-Key"></a>多站点配置SSH-Key</h2><p>相信很多用mac在开发的同学都会遇见一个问题：会根据业务不同往不同的git服务器上提交代码。这些库有私有的有公有的，这时候就需要配置SSH_Key了。</p><span id="more"></span><h3 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH-Key"></a>生成SSH-Key</h3><h4 id="打开终端-（terminal）"><a href="#打开终端-（terminal）" class="headerlink" title="打开终端 （terminal）"></a>打开终端 （terminal）</h4><ul><li>gitee(码云) · 秘钥对<br>使用以下命令生成gitee的秘钥对<br>【注意】emailaddress 填写自己的邮件地址</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;emailaddress&quot; -f ~/.ssh/gitee_id_rsa</span><br></pre></td></tr></table></figure><ul><li>github · 秘钥对<br>使用以下命令生成github的秘钥对<br>【注意】emailaddress 填写自己的邮件地址</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;emailaddress&quot; -f ~/.ssh/github_id_rsa</span><br></pre></td></tr></table></figure><h3 id="添加私钥"><a href="#添加私钥" class="headerlink" title="添加私钥"></a>添加私钥</h3><p>这个步骤是把私钥添加到当前设备，本地的不需要网络</p><p>添加 gitee 私钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/gitee_id_rsa</span><br></pre></td></tr></table></figure><p>添加 github 私钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/github_id_rsa</span><br></pre></td></tr></table></figure><p>添加公钥</p><p>和私钥不一样的是公钥是添加到git服务器的，所以这操作主要是在网页上进行的</p><p>添加 gitee 公钥<br>显示出gitee的公钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/gitee_id_rsa.pub</span><br></pre></td></tr></table></figure><p>将展示出的以ssh-rsa开头，然后以刚才你输入的emailaddress结尾的内容全部复制</p><p>添加至gitee的SSHKey公钥</p><p>添加 github 公钥<br>显示出github的公钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/github_id_rsa.pub</span><br></pre></td></tr></table></figure><p>将展示出的以ssh-rsa开头，然后以刚才你输入的emailaddress结尾的内容全部复制</p><p>添加至github的SSHKey公钥</p><p>创建Config<br>在 ~/.ssh/目录下创建一个配置文件，来为秘钥使用做配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh/</span><br></pre></td></tr></table></figure><p>使用vim命令进行config文件的创建和编辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config</span><br></pre></td></tr></table></figure><p>然后文件写入以下内容</p><h3 id="添加以下内容"><a href="#添加以下内容" class="headerlink" title="添加以下内容"></a>添加以下内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># gitee</span><br><span class="line">Host gitee.com</span><br><span class="line">    HostName gitee.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/gitee_id_rsa</span><br><span class="line"># github</span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/github_id_rsa</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="然后配对秘钥"><a href="#然后配对秘钥" class="headerlink" title="然后配对秘钥"></a>然后配对秘钥</h3><p>主要测试当前秘钥是否可用</p><h4 id="配对gitee秘钥"><a href="#配对gitee秘钥" class="headerlink" title="配对gitee秘钥"></a>配对gitee秘钥</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure><p>gitee的测试会让输入 yes</p><p>连接gitee成功之后会显示以下信息</p><p>Welcome to Gitee.com, yourName!</p><h4 id="配对github秘钥"><a href="#配对github秘钥" class="headerlink" title="配对github秘钥"></a>配对github秘钥</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>连接github成功之后会显示以下信息</p><p>Hi yourName! You’ve successfully authenticated, but GitHub does not provide shell access.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS--苹果笔记本安装Win</title>
      <link href="/2018/03/11/macos-ping-guo-bi-ji-ben-an-zhuang-win/"/>
      <url>/2018/03/11/macos-ping-guo-bi-ji-ben-an-zhuang-win/</url>
      
        <content type="html"><![CDATA[<h2 id="Mac–苹果笔记本安装Win-价值200块"><a href="#Mac–苹果笔记本安装Win-价值200块" class="headerlink" title="Mac–苹果笔记本安装Win(价值200块)"></a>Mac–苹果笔记本安装Win(价值200块)</h2><h3 id="为什么说是价值200块呢？"><a href="#为什么说是价值200块呢？" class="headerlink" title="为什么说是价值200块呢？"></a>为什么说是价值200块呢？</h3><p>  是因为你拿着你的mac去任何一个电脑店让老板给您装Windows系统，应该会找你要200。</p><p>  <strong>另外本文主要讲述的Windows系统为最新版的Win10 1709版本。</strong><br>    <span id="more"></span></p><p>  1、因为他们都觉得买得起mac的不差这200块钱。</p><p>  2、还有一个原因就是因为mac贵，所以我提供的服务也贵。</p><p>  3、以上两条都是为了坑点钱，其实给mac装Win系统很简单。</p><p>  比我给windows装mac简单多了。</p><h3 id="首先下载一个Windows的ISO镜像文件"><a href="#首先下载一个Windows的ISO镜像文件" class="headerlink" title="首先下载一个Windows的ISO镜像文件"></a>首先下载一个Windows的ISO镜像文件</h3><p>如果不会参看<a href="http://ilongge.cn/2017/08/20/%E5%A6%82%E4%BD%95%E4%B8%8B%E8%BD%BDWindows%E7%B3%BB%E7%BB%9F/">如何下载Windows系统</a></p><h3 id="使用bootcamp把系统写入到U盘"><a href="#使用bootcamp把系统写入到U盘" class="headerlink" title="使用bootcamp把系统写入到U盘"></a>使用bootcamp把系统写入到U盘</h3><ul><li>请注意，下载好的系统最好放在mac上</li><li>这里你需要一个最小8GB的U盘，里面要是空的，因为要格式化，有数据的注意备份。</li><li>然后插U盘到MAC上。</li><li>打开bootcamp(新版系统叫 <strong>启动转换助理</strong> )</li><li>继续</li><li>勾选三个钩（win7第一个可以不钩）</li><li>继续</li><li>选择你刚才下载好的ISO系统文件</li><li>继续 </li><li>等</li><li>分区，大小可以用鼠标挪动</li><li>重启就开始安装了</li></ul><h3 id="安装Windows"><a href="#安装Windows" class="headerlink" title="安装Windows"></a>安装Windows</h3><p>具体步骤参看【<a href="http://ilongge.cn/2018/02/03/Windows--UEFI%E5%BC%95%E5%AF%BC%E5%AE%89%E8%A3%85Win10/">UEFI引导安装Win10</a>】</p><p><strong>注意</strong></p><p>选择安装盘的这一步具体操作如下：</p><ul><li><p>选择带有bootcamp的分区，应该是第三个 或者 第四个（选择完成之后下方会有警告提示：不能安装到当前分区。。。。。。）</p></li><li><p>然后点击下方格式化（请确认上一步硬盘是否选错）</p></li><li><p>格式化之后，第一步的警告提示就应该消失了</p></li><li><p>下一步 其他步骤基本无异</p></li><li><p>再次重启进入Windows之后，打开U盘中的bootcamp.exe安装上去。这个文件是苹果电脑的驱动支持软件，不装的话估计你连网都没有哦。</p></li></ul><h3 id="是不是很简单"><a href="#是不是很简单" class="headerlink" title="是不是很简单"></a>是不是很简单</h3><h2 id="完！"><a href="#完！" class="headerlink" title="完！"></a>完！</h2>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows--如何将硬盘分区表转换为GUID(GPT)分区表</title>
      <link href="/2018/02/26/windows-the-hard-disk-partition-table-type-changge-to-guid-gpt/"/>
      <url>/2018/02/26/windows-the-hard-disk-partition-table-type-changge-to-guid-gpt/</url>
      
        <content type="html"><![CDATA[<h2 id="如何将硬盘分区表转换为GUID-GPT-分区表"><a href="#如何将硬盘分区表转换为GUID-GPT-分区表" class="headerlink" title="如何将硬盘分区表转换为GUID(GPT)分区表"></a>如何将硬盘分区表转换为GUID(GPT)分区表</h2><p>如果不知道自己的硬盘分区表类型可以参看 <a href="http://ilongge.cn/2018/02/24/Windows--%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E8%A1%A8%E7%B1%BB%E5%9E%8B/">Windows–如何查看硬盘分区表类型</a></p><span id="more"></span><h3 id="1、使用PE"><a href="#1、使用PE" class="headerlink" title="1、使用PE"></a>1、使用PE</h3><ul><li>制作U盘PE启动盘</li><li>进入PE</li><li>在PE里打开磁盘精灵 （DG）</li><li>右键磁盘 菜单中有转换为GUID分区表</li></ul><h3 id="2、在安装Win的时候"><a href="#2、在安装Win的时候" class="headerlink" title="2、在安装Win的时候"></a>2、在安装Win的时候</h3><ul><li>制作UEFI启动盘</li><li>进入UEFI安装的界面</li><li>shift + F10 （打开终端）</li><li>输入diskpart 回车 （进入diskpart）</li><li>list disk (显示磁盘列表，注意这里你只能用大小来区分你的硬盘了)</li><li>sel disk 0 (这个编号你自己看着你的来)</li><li>clean （清除数据）（可选）</li><li>convert gpt (转换为GPT分区表，好像是会清除磁盘上数据的)</li></ul><p><strong>同理，GPT转换至MBR上述方法同样适用</strong></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows--如何查看硬盘分区表类型</title>
      <link href="/2018/02/24/windows-view-the-hard-disk-partition-table-type/"/>
      <url>/2018/02/24/windows-view-the-hard-disk-partition-table-type/</url>
      
        <content type="html"><![CDATA[<h2 id="如何查看硬盘分区表类型"><a href="#如何查看硬盘分区表类型" class="headerlink" title="如何查看硬盘分区表类型"></a>如何查看硬盘分区表类型</h2><h3 id="1、什么是硬盘分区表"><a href="#1、什么是硬盘分区表" class="headerlink" title="1、什么是硬盘分区表"></a>1、什么是硬盘分区表</h3><p>人们在使用电脑时，有时由于异常操作，有时由于病毒侵袭，会导致某个分区消失或硬盘无法启动。究其原因，就是硬盘分区表受损。硬盘分区表可以说是支持硬盘正常工作的骨架。操作系统正是通过它把硬盘划分为若干个分区，然后再在每个分区里面创建文件系统，写入数据文件。本文主要讲述的是分区表的位置，结构以及各个分区表是如何链接起来的。当掌握了这些知识后，即使分区表受到破坏，一样也可以根据残存的数据手工修复分区表，从而修复分区。</p><span id="more"></span><h3 id="2、都有什么类型"><a href="#2、都有什么类型" class="headerlink" title="2、都有什么类型"></a>2、都有什么类型</h3><p>目前在用的 <a href="https://baike.baidu.com/item/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E8%A1%A8/108750?fr=aladdin"><strong>分区表</strong></a><br>类型主要有了两个：</p><h4 id="GUID-（也叫-GPT）"><a href="#GUID-（也叫-GPT）" class="headerlink" title="GUID （也叫 GPT）"></a>GUID （也叫 GPT）</h4><p>一种由基于 Itanium 计算机中的可扩展固件接口 (EFI) 使用的磁盘分区架构。与主启动记录(MBR) 分区方法相比，GPT 具有更多的优点，因为它允许每个磁盘有多达 128 个分区，支持高达 18 千兆兆字节的卷大小，允许将主磁盘分区表和备份磁盘分区表用于冗余，还支持唯一的磁盘和分区 ID (GUID）。与支持最大卷为 2 TB (terabytes) 并且每个磁盘最多有 4 个主分区（或 3 个主分区，1 个扩展分区和无限制的逻辑驱动器）的主启动记录(MBR)磁盘分区的样式相比，GUID分区表 (GPT) 磁盘分区样式支持最大卷为 18 EB (exabytes) 并且每磁盘最多有 128 个分区。与MBR分区的磁盘不同，至关重要的平台操作数据位于分区，而不是位于非分区或隐藏扇区。另外，GPT 分区磁盘有多余的主要及备份分区表来提高分区数据结构的完整性。</p><h4 id="MBR"><a href="#MBR" class="headerlink" title="MBR"></a>MBR</h4><p>传统的分区方案（称为MBR分区方案）是将分区信息保存到磁盘的第一个扇区（MBR扇区）中的64个字节中，每个分区项占用16个字节，这16个字节中存有活动状态标志、文件系统标识、起止柱面号、磁头号、扇区号、隐含扇区数目（4个字节）、分区总扇区数目（4个字节）等内容。由于MBR扇区只有64个字节用于分区表，所以只能记录4个分区的信息。这就是硬盘主分区数目不能超过4个的原因。后来为了支持更多的分区，引入了扩展分区及逻辑分区的概念。但每个分区项仍用16个字节存储。<br>MBR分区方案不是用得好好的吗？为什么要提出新的方案呢？那就让我们看看MBR分区方案有什么问题。前面已经提到了主分区数目不能超过4个的限制，这是其一，很多时候，4个主分区并不能满足需要。另外最关键的是MBR分区方案无法支持超过2TB容量的磁盘。因为这一方案用4个字节存储分区的总扇区数，最大能表示2的32次方的扇区个数，按每扇区512字节计算，每个分区最大不能超过2TB。磁盘容量超过2TB以后，分区的起始位置也就无法表示了。在硬盘容量突飞猛进的今天，2TB的限制将很快被突破。由此可见，MBR分区方案已经无法满足需要了。</p><h3 id="3、怎么查看自己的硬盘分区表"><a href="#3、怎么查看自己的硬盘分区表" class="headerlink" title="3、怎么查看自己的硬盘分区表"></a>3、怎么查看自己的硬盘分区表</h3><p>桌面–&gt;计算机图标–&gt;右键–&gt;管理–&gt;磁盘管理–&gt;选择一个磁盘（注意是磁盘不是分区）<br>–&gt;右键–&gt;属性–&gt;鼠标左键点击“卷”–&gt;查看“磁盘分区形式”</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows--UEFI引导安装Win10</title>
      <link href="/2018/02/03/windows-uefi-boot-installation-win10/"/>
      <url>/2018/02/03/windows-uefi-boot-installation-win10/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows–UEFI引导安装Win10"><a href="#Windows–UEFI引导安装Win10" class="headerlink" title="Windows–UEFI引导安装Win10"></a>Windows–UEFI引导安装Win10</h2><p>本文主要讲述如何使用普通U盘<strong>UEFI引导</strong>启动盘安装Windows系统</p><p>注意此方法只能安装于**GPT(GUID)**分区表的硬盘</p><span id="more"></span><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>找一个8GB或更大的U盘 USB3.0更好 这样更快</li><li><a href="http://ilongge.cn/2017/08/20/%E5%A6%82%E4%BD%95%E4%B8%8B%E8%BD%BDWindows%E7%B3%BB%E7%BB%9F/">下载官方ISO系统文件镜像</a>（随便找一个不是C盘的目录放着就行，建议直接扔在D盘根目录）</li><li>然后新建一个文件夹叫 WindowsImage</li><li>解压这个ISO文件到 WindowsImage文件夹</li></ul><h3 id="首先制作UEFI启动盘"><a href="#首先制作UEFI启动盘" class="headerlink" title="首先制作UEFI启动盘"></a>首先制作UEFI启动盘</h3><ul><li>U盘格式化为Fat32文件系统（有些主板也支持NTFS，比如我的华硕Z170AR）</li><li>将解压好的 WindowsImage文件夹下面的所有文件放入U盘跟目录</li><li>注意现在的U盘打开之后应该有好几个文件夹，如下图</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1519926-50ee80a9cdf29b95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="QQ20180205-133057.png"></p><h4 id="选择U盘启动"><a href="#选择U盘启动" class="headerlink" title="选择U盘启动"></a>选择U盘启动</h4><ul><li>U盘插在需要装系统的电脑上，然后开机 </li><li>笔记本：自己去百度你的这个型号如何从U盘启动</li><li>台式机：去百度你这个电脑主板的U盘启动方法</li></ul><h3 id="看图了"><a href="#看图了" class="headerlink" title="看图了"></a>看图了</h3><h4 id="正式安装系统"><a href="#正式安装系统" class="headerlink" title="正式安装系统"></a>正式安装系统</h4><h5 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-df73a1c95daafda4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_112202.jpg"></p><h5 id="现在安装"><a href="#现在安装" class="headerlink" title="现在安装"></a>现在安装</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-6cbe0c983b4ea833.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_112214.jpg"></p><h5 id="随便选一个版本"><a href="#随便选一个版本" class="headerlink" title="随便选一个版本"></a>随便选一个版本</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-3253178c160c2fb4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_112232.jpg"></p><h5 id="接受-（不然你还想怎样）"><a href="#接受-（不然你还想怎样）" class="headerlink" title="接受 （不然你还想怎样）"></a>接受 （不然你还想怎样）</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-0e44d0ebeaa59c32.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_112244.jpg"></p><h5 id="自定义-："><a href="#自定义-：" class="headerlink" title="自定义 ："></a>自定义 ：</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-761ddc5387d86d2a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_112257.jpg"></p><h5 id="分区自己看着选"><a href="#分区自己看着选" class="headerlink" title="分区自己看着选"></a>分区自己看着选</h5><p>这一步建议大家把电脑上除了需要装系统的硬盘 其他的都拆下来</p><p>没区分的自己分区</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-490488f84b242b5e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_16406.jpg"></p><h5 id="没有引导分区会额外自动创建-点击确定"><a href="#没有引导分区会额外自动创建-点击确定" class="headerlink" title="没有引导分区会额外自动创建 点击确定"></a>没有引导分区会额外自动创建 点击确定</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-9b7941d3be5faff6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_112413.jpg"></p><h5 id="选择系统安装的盘符-基本就是第一个主分区"><a href="#选择系统安装的盘符-基本就是第一个主分区" class="headerlink" title="选择系统安装的盘符 基本就是第一个主分区"></a>选择系统安装的盘符 基本就是第一个主分区</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-11483dd11811e8bb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_112428.jpg"></p><h5 id="下一步-1"><a href="#下一步-1" class="headerlink" title="下一步"></a>下一步</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-5dec817c93c4135b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_112440.jpg"></p><h5 id="等"><a href="#等" class="headerlink" title="等"></a>等</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-809d444083bd03cb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_112843.jpg"></p><h5 id="还是等"><a href="#还是等" class="headerlink" title="还是等"></a>还是等</h5><p> 重启的时候就可以把U盘拔下来了，因为U盘的作用已经完了</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-100db07a62cabf6e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_112905.jpg"></p><h5 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-2d76f4d21d900de5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_113011.jpg"></p><h4 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h4><h5 id="中国"><a href="#中国" class="headerlink" title="中国"></a>中国</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-1377d45d7d02a5c8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_113102.jpg"></p><h5 id="随便选-我选拼音"><a href="#随便选-我选拼音" class="headerlink" title="随便选 我选拼音"></a>随便选 我选拼音</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-8b933fcd769e977a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_113153.jpg"></p><h5 id="随便-我选跳过"><a href="#随便-我选跳过" class="headerlink" title="随便 我选跳过"></a>随便 我选跳过</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-ed2709e3041421e8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_113203_BURST005.jpg"></p><h5 id="等-1"><a href="#等-1" class="headerlink" title="等"></a>等</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-6ff692925e3a7308.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_113220.jpg"></p><h5 id="针对个人使用-下一步"><a href="#针对个人使用-下一步" class="headerlink" title="针对个人使用  下一步"></a>针对个人使用  下一步</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-be18be147e001882.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_113251.jpg"></p><h5 id="如果不使用微软账号-就找到左下角-脱机账户"><a href="#如果不使用微软账号-就找到左下角-脱机账户" class="headerlink" title="如果不使用微软账号 就找到左下角 脱机账户"></a>如果不使用微软账号 就找到左下角 脱机账户</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-23bb1ec0fda800e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_113301.jpg"></p><h5 id="否"><a href="#否" class="headerlink" title="否"></a>否</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-9bc64cb87a861d3a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_113314.jpg"></p><h5 id="名字自己起"><a href="#名字自己起" class="headerlink" title="名字自己起"></a>名字自己起</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-3948d6f069e84164.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_113342.jpg"></p><h5 id="密码-填不填都可以"><a href="#密码-填不填都可以" class="headerlink" title="密码 填不填都可以"></a>密码 填不填都可以</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-0ad3e686d2d15d58.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_113358.jpg"></p><h5 id="我不喜欢-我选否"><a href="#我不喜欢-我选否" class="headerlink" title="我不喜欢 我选否"></a>我不喜欢 我选否</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-e751c3c57661a1a9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_113422.jpg"></p><h5 id="我就这样配置"><a href="#我就这样配置" class="headerlink" title="我就这样配置"></a>我就这样配置</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-28dd8b864ca74386.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_113510.jpg"></p><h5 id="等咯"><a href="#等咯" class="headerlink" title="等咯"></a>等咯</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-e384c48d4c1588c0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_113521.jpg"></p><h5 id="接着等"><a href="#接着等" class="headerlink" title="接着等"></a>接着等</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-c4b00ebeb0eed2df.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_113539.jpg"></p><h5 id="这不就OK了"><a href="#这不就OK了" class="headerlink" title="这不就OK了"></a>这不就OK了</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-84d15ff9175016be.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="IMG_20180203_113800.jpg"></p><h2 id="完"><a href="#完" class="headerlink" title="完"></a>完</h2>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7配置yum源</title>
      <link href="/2018/01/12/centos7-pei-zhi-yum-yuan/"/>
      <url>/2018/01/12/centos7-pei-zhi-yum-yuan/</url>
      
        <content type="html"><![CDATA[<h2 id="Centos7配置yum源"><a href="#Centos7配置yum源" class="headerlink" title="Centos7配置yum源"></a>Centos7配置yum源</h2><p>我们安装完成CentOS系统，默认都是系统自带的yum源，因为你懂得原因会导致国内用户用yum安装软件的时候比较慢，为了提高效率，一般我们会配置国内的yum源。</p><span id="more"></span><p>目前国内比较好的yum源有网易yum源、搜狐yum源等，现在介绍下怎么配置网易163yum源：</p><h3 id="1、首先备份-etc-yum-repos-d-CentOS-Base-repo"><a href="#1、首先备份-etc-yum-repos-d-CentOS-Base-repo" class="headerlink" title="1、首先备份/etc/yum.repos.d/CentOS-Base.repo"></a>1、首先备份/etc/yum.repos.d/CentOS-Base.repo</h3><p>(不一定是这个名称 你可以看一下 具体叫啥)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo  /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure><h3 id="2、根据CentOS不同版本选择下载对应的repo文件，放到-etc-yum-repos-d-目录"><a href="#2、根据CentOS不同版本选择下载对应的repo文件，放到-etc-yum-repos-d-目录" class="headerlink" title="2、根据CentOS不同版本选择下载对应的repo文件，放到/etc/yum.repos.d/ 目录"></a>2、根据CentOS不同版本选择下载对应的repo文件，放到/etc/yum.repos.d/ 目录</h3><h4 id="首先进入yum-repos-d目录"><a href="#首先进入yum-repos-d目录" class="headerlink" title="首先进入yum.repos.d目录"></a>首先进入yum.repos.d目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/yum.repos.d/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="CentOS-5-x"><a href="#CentOS-5-x" class="headerlink" title="CentOS 5.x"></a>CentOS 5.x</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.163.com/.help/CentOS5-Base-163.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="CentOS-6-x"><a href="#CentOS-6-x" class="headerlink" title="CentOS 6.x"></a>CentOS 6.x</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.163.com/.help/CentOS6-Base-163.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="CentOS-7-x"><a href="#CentOS-7-x" class="headerlink" title="CentOS 7.x"></a>CentOS 7.x</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.163.com/.help/CentOS7-Base-163.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、最后，执行yum-makecache生成缓存"><a href="#3、最后，执行yum-makecache生成缓存" class="headerlink" title="3、最后，执行yum makecache生成缓存"></a>3、最后，执行yum makecache生成缓存</h3><h4 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure><h4 id="生成新缓存"><a href="#生成新缓存" class="headerlink" title="生成新缓存"></a>生成新缓存</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h3 id="OK-简单3步操作即可配置完成。"><a href="#OK-简单3步操作即可配置完成。" class="headerlink" title="OK, 简单3步操作即可配置完成。"></a>OK, 简单3步操作即可配置完成。</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows--如何修改IP地址</title>
      <link href="/2018/01/11/windows-how-to-change-ip-address/"/>
      <url>/2018/01/11/windows-how-to-change-ip-address/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows–如何修改IP地址"><a href="#Windows–如何修改IP地址" class="headerlink" title="Windows–如何修改IP地址"></a>Windows–如何修改IP地址</h2><p>本文主要讲述windows 7如何修改电脑的**<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a>**。<br>其他的例如win8  win8.1，win10 基本都一样，如果找不到那么就去搜索控制面板，然后进入网络与Internet</p><span id="more"></span><h3 id="进入网络与共享中心"><a href="#进入网络与共享中心" class="headerlink" title="进入网络与共享中心"></a>进入网络与共享中心</h3><p><img src="http://upload-images.jianshu.io/upload_images/1519926-c458a540e41c463c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="QQ20180111-103722.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-46b4de214a0061b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="QQ20180111-103818.png"></p><h3 id="进入网络适配器页面"><a href="#进入网络适配器页面" class="headerlink" title="进入网络适配器页面"></a>进入网络适配器页面</h3><p><img src="http://upload-images.jianshu.io/upload_images/1519926-128f1111350fb6f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20180111-103853.png"></p><h3 id="进入连接属性"><a href="#进入连接属性" class="headerlink" title="进入连接属性"></a>进入连接属性</h3><p><img src="http://upload-images.jianshu.io/upload_images/1519926-bf88202bfb264a10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20180111-103930.png"></p><h3 id="进入ipv4协议属性"><a href="#进入ipv4协议属性" class="headerlink" title="进入ipv4协议属性"></a>进入ipv4协议属性</h3><p><img src="http://upload-images.jianshu.io/upload_images/1519926-8a87072d2c962ce1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20180111-103950.png"></p><h3 id="手动填写IP地址"><a href="#手动填写IP地址" class="headerlink" title="手动填写IP地址"></a>手动填写IP地址</h3><ul><li>这里面的东西如何填写需要根据你的路由器来决定的，基本上家里的设置都是192.168.1.* (* 号填写100-254)</li><li>子网掩码 基本都是255.255.255.0</li><li>网关也是根据路由器来 192.168.1.1</li><li>DNS 第一行也可以根据路由器来：192.168.1.1 或者 指定固定的DNS，比如114.114.114.114</li><li>第二行随意</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1519926-5060e67482d09ead.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20180111-103950.png"></p><h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><p><img src="http://upload-images.jianshu.io/upload_images/1519926-dc1f84313fbcfe82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20180111-104009.png"></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>台式组装机简单故障的排查与清除</title>
      <link href="/2018/01/10/computer-normal-problem-check-and-fix/"/>
      <url>/2018/01/10/computer-normal-problem-check-and-fix/</url>
      
        <content type="html"><![CDATA[<h2 id="台式组装机简单故障的排查与清除"><a href="#台式组装机简单故障的排查与清除" class="headerlink" title="台式组装机简单故障的排查与清除"></a>台式组装机简单故障的排查与清除</h2><p>本文主要讲述台式机部分简单故障的排查与清除。</p><span id="more"></span><h3 id="故障一：不能正常开机"><a href="#故障一：不能正常开机" class="headerlink" title="故障一：不能正常开机"></a>故障一：不能正常开机</h3><p>此故障在电脑使用中最为常见，原因也是五花八门，下面我给大家梳理一些常见的故障以及清除方法：</p><h4 id="电脑开机，反复重启"><a href="#电脑开机，反复重启" class="headerlink" title="电脑开机，反复重启"></a>电脑开机，反复重启</h4><p>这种问题十有八九就是**<a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98">内存</a>**的问题，下图就是内存：目前主流内存有DDR3和DDR4</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515576804599&di=46abba220da8ec2bb1ddb92cd274221b&imgtype=0&src=http://image.koolshare.cn/attachment/forum/201609/12/091124dco07lrr03nr2do1.jpg" alt="内存：带马甲的是DDR4另外一个是DDR3"></p><ul><li>如果有空闲的内存插槽，请尝试调整内存安装位置；如不能解决下一条。</li><li>如果无法调整位置，请尝试使用橡皮擦蘸酒精擦拭内存金手指位置；如不能解决下一条。</li><li>如果无法调整位置，请尝试交换内存安装位置；如不能解决下一条。</li><li>如果无法调整位置，请尝试选择拆卸内存，然后每装一根开机一次看看问题是否得到解决，如果确定问题内存建议联系卖家；如不能解决下一条。</li><li>实在无法解决请更换内存；</li><li>此问题目前我多见于威刚内存</li></ul><h4 id="电脑开机主机启动正常，但显示器无反应"><a href="#电脑开机主机启动正常，但显示器无反应" class="headerlink" title="电脑开机主机启动正常，但显示器无反应"></a>电脑开机主机启动正常，但显示器无反应</h4><p> 这种问题可能是内存的问题，也可能是**<a href="https://baike.baidu.com/item/%E6%98%BE%E5%8D%A1">显卡</a><strong>问题，下图就是显卡：目前主流显卡很多，</strong><a href="https://baike.baidu.com/item/amd/5905">AMD</a><strong>的 RX 400、RX 500系列，</strong><a href="https://baike.baidu.com/item/NVIDIA">Nvidia</a>**的 GTX 9 、GTX 10系列；</p><p> <img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515576981498&di=3cf8957e2472e59dc0faf49ac562102c&imgtype=0&src=http://cms-bucket.nosdn.127.net/catchpic/a/a5/a55f2694355a0bc74206fefab1ac6689.jpg?imageView&thumbnail=550x0" alt="GTX 1080Ti"></p><ul><li>如果是NVIDIA的10系显卡，请不要使用不带芯片的VGA转接头，尽量使用HDMI线连接显示器；</li><li>按照上个故障来排查；如不能解决下一条。</li><li>使用核显，将独立显卡从主板中拆除，将原先插在独立显卡上的视频线接到主板上，如果无相应插头建议自行寻找转换接口，如能正常开机则问题出在显卡上，建议联系卖家；</li></ul><h4 id="电脑开机自动进入-BIOS"><a href="#电脑开机自动进入-BIOS" class="headerlink" title="电脑开机自动进入**BIOS**"></a>电脑开机自动进入**<a href="https://baike.baidu.com/item/bios">BIOS</a>**</h4><p>这种问题基本就是电脑的启动项设置不对造成的。</p><ul><li>进入电脑主板BIOS，进入启动设置：（没错的话叫 BOOT），选择自己系统所在的硬盘作为首选启动项，保存并退出。如不能解决下一条。</li><li>如出系统盘外还有其他硬盘请拆除后开机，看看是否正常。</li><li></li></ul><h4 id="电脑开机显示下面几张图："><a href="#电脑开机显示下面几张图：" class="headerlink" title="电脑开机显示下面几张图："></a>电脑开机显示下面几张图：</h4><h5 id="CPU-Fan-Error"><a href="#CPU-Fan-Error" class="headerlink" title="CPU Fan Error"></a>CPU Fan Error</h5><p>请尝试检查CPU散热风扇的接线柱，是否正确安装到了CPU_FAN位置，CPU_OPT安装的应该是副风扇（一体水冷的时候基本是水泵）</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515576479967&di=b42187a73d3b1c0f31208fb41aabc14b&imgtype=0&src=http://www.udaxia.com/uploads/allimg/140813/6-140Q3092UbP.png" alt="CPU Fan Error"></p><h5 id="Please-enter-Setup-to-recover-BIOS-setting"><a href="#Please-enter-Setup-to-recover-BIOS-setting" class="headerlink" title="Please enter Setup to recover BIOS setting"></a>Please enter Setup to recover BIOS setting</h5><p>这个问题基本出现在上了年纪的电脑上，也就是是两年以上的电脑，原因就是主板电池没电了，造成了主板的设置不能正常保存，去附近的电脑店里面一个就OK了，5块钱吧。</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1515580205230&di=6d24f65914e8f61629558fa687e5dbf5&imgtype=0&src=http://b.hiphotos.baidu.com/zhidao/pic/item/4ec2d5628535e5ddf67ce19770c6a7efce1b6221.jpg"></p><h3 id="故障二：无法上网"><a href="#故障二：无法上网" class="headerlink" title="故障二：无法上网"></a>故障二：无法上网</h3><h4 id="网络标志显示红叉或者根本没有网络标志"><a href="#网络标志显示红叉或者根本没有网络标志" class="headerlink" title="网络标志显示红叉或者根本没有网络标志"></a>网络标志显示红叉或者根本没有网络标志</h4><p>这种问题基本就是**<a href="https://baike.baidu.com/item/%E7%BD%91%E5%8D%A1">网卡</a>**没有启动导致的可能的原因就是驱动没装好</p><ul><li>去下载主板网卡在当前系统版本下的驱动，系统版本有32位（X86）和64位（X64）之分，请看清楚</li></ul><h4 id="能用部分聊天软件，就是不能打开网页"><a href="#能用部分聊天软件，就是不能打开网页" class="headerlink" title="能用部分聊天软件，就是不能打开网页"></a>能用部分聊天软件，就是不能打开网页</h4><p>基本**<a href="https://baike.baidu.com/item/DNS%E6%9C%8D%E5%8A%A1%E5%99%A8/8079460">DNS</a><strong>的问题没的跑了,需要修改</strong><a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a>**</p><ul><li>修改本机当前ip配置。如何修改这个就要看系统版本了，不一样的版本入口不一样</li><li>对于win7可以点击小电脑图标-&gt;打开网络与共享设置-&gt;然后左侧边栏更改适配器设置-&gt;找到目前在用的链接(本地连接或者是无线网络)-&gt;右键属性-&gt;选择ipV4-&gt;属性-&gt;勾选手动设置</li><li>其他的例如win8  win8.1，win10 基本都一样，如果找不到那么就去搜索控制面板，然后进入网络与Internet</li></ul><h5 id="进入网络与共享中心"><a href="#进入网络与共享中心" class="headerlink" title="进入网络与共享中心"></a>进入网络与共享中心</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-c458a540e41c463c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="QQ20180111-103722.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-46b4de214a0061b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="QQ20180111-103818.png"></p><h5 id="进入网络适配器页面"><a href="#进入网络适配器页面" class="headerlink" title="进入网络适配器页面"></a>进入网络适配器页面</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-128f1111350fb6f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20180111-103853.png"></p><h5 id="进入连接属性"><a href="#进入连接属性" class="headerlink" title="进入连接属性"></a>进入连接属性</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-bf88202bfb264a10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20180111-103930.png"></p><h5 id="进入ipv4协议属性"><a href="#进入ipv4协议属性" class="headerlink" title="进入ipv4协议属性"></a>进入ipv4协议属性</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-8a87072d2c962ce1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20180111-103950.png"></p><h5 id="手动填写IP地址"><a href="#手动填写IP地址" class="headerlink" title="手动填写IP地址"></a>手动填写IP地址</h5><ul><li>这里面的东西如何填写需要根据你的路由器来决定的，基本上家里的设置都是192.168.1.* (* 号填写100-254)</li><li>子网掩码 基本都是255.255.255.0</li><li>网关也是根据路由器来 192.168.1.1</li><li>DNS 第一行也可以根据路由器来：192.168.1.1 或者 指定固定的DNS，比如114.114.114.114</li><li>第二行随意</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1519926-5060e67482d09ead.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20180111-103950.png"></p><h5 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h5><p><img src="http://upload-images.jianshu.io/upload_images/1519926-dc1f84313fbcfe82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ20180111-104009.png"></p><p>如果上述方法不能解决建议重置网络服务</p><h4 id="重置网络服务"><a href="#重置网络服务" class="headerlink" title="重置网络服务"></a>重置网络服务</h4><h5 id="进入命令行工具（管理员模式）"><a href="#进入命令行工具（管理员模式）" class="headerlink" title="*  进入命令行工具（管理员模式）"></a>*  进入命令行工具（管理员模式）</h5><h5 id="输入-netsh-winsock-reset-然后回车"><a href="#输入-netsh-winsock-reset-然后回车" class="headerlink" title="*  输入 netsh winsock reset 然后回车"></a>*  输入 netsh winsock reset 然后回车</h5><h5 id="完成之后重启"><a href="#完成之后重启" class="headerlink" title="*  完成之后重启"></a>*  完成之后重启</h5>]]></content>
      
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows--如何使用PE安装官方ISO镜像</title>
      <link href="/2018/01/03/windows-use-pe-installation-windwos-iso-image/"/>
      <url>/2018/01/03/windows-use-pe-installation-windwos-iso-image/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows–如何使用PE安装官方ISO镜像"><a href="#Windows–如何使用PE安装官方ISO镜像" class="headerlink" title="Windows–如何使用PE安装官方ISO镜像"></a>Windows–如何使用PE安装官方ISO镜像</h2><p>本文主要讲述如何使用普通U盘启动盘安装Windows重装系统,<br>注意此方法只能安装于<strong>MBR</strong>分区表的硬盘</p><span id="more"></span><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>制作U盘启动盘–普通PE类</li><li>下载官方ISO系统文件镜像（随便找一个不是C盘的目录放着就行，建议直接扔在D盘根目录）</li><li>然后新建一个文件夹叫 WindowsImage</li><li>解压这个ISO文件到 WindowsImage文件夹</li></ul><h3 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h3><ul><li>将制作好的U盘插入电脑的usb接口，然后开机</li></ul><h4 id="选择U盘启动"><a href="#选择U盘启动" class="headerlink" title="选择U盘启动"></a>选择U盘启动</h4><ul><li>笔记本：自己去百度你的这个型号如何从U盘启动</li><li>台式机：去百度你这个电脑主板的U盘启动方法</li></ul><h4 id="进入PE"><a href="#进入PE" class="headerlink" title="进入PE"></a>进入PE</h4><ul><li><p>出现如下图所示的界面<br><img src="http://upload-images.jianshu.io/upload_images/1519926-2f57f6d183983e65.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="PE"></p></li><li><p>选择带有运行******x86 或者 *******x64 或者 windwos2003等字样的任何一个启动</p></li><li><p>进入PE 开始启动了<br><img src="http://upload-images.jianshu.io/upload_images/1519926-01b00e19278c2ee9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="PE"></p></li><li><p>PE启动完成，现在可以操作了<br><img src="http://upload-images.jianshu.io/upload_images/1519926-8c2e3f3450970f59.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="PE"></p></li></ul><h4 id="安装windows系统"><a href="#安装windows系统" class="headerlink" title="安装windows系统"></a>安装windows系统</h4><ul><li>打开桌面上的windows安装器 </li><li>点击<strong>install.wim文件的位置</strong>一项的选择</li><li>找到刚才解压的那个文件夹WindowsImage下的sources文件夹里面的install.wim文件（按大小排序按后最大的那个）</li><li>引导磁盘的位置—-选择C（最好自己去看看自己电脑现在在PE下的盘符，看一下你那个系统盘分区的盘符叫什么这里就选什么）</li><li>安装磁盘的位置—-选择C（最好自己去看看自己电脑现在在PE下的盘符，看一下你那个系统盘分区的盘符叫什么这里就选什么）</li><li>然后点击<strong>开始安装</strong></li><li>如有对话框，则选择<strong>自动重新启动</strong>（对win10版本好像没用，需要手动重启）。<strong>不选保留原来的windows版本</strong></li><li>确定</li><li>等待进度条完成<br><img src="http://upload-images.jianshu.io/upload_images/1519926-fd7c469584c62768.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="windows安装器 "></li></ul><p>简书：<a href="http://www.jianshu.com/p/163b64432e97">http://www.jianshu.com/p/163b64432e97</a><br>CSDN：<a href="http://blog.csdn.net/ZuoWeiXiaoDuZuoZuo/article/details/78958115">http://blog.csdn.net/ZuoWeiXiaoDuZuoZuo/article/details/78958115</a></p><h4 id="完"><a href="#完" class="headerlink" title="完"></a>完</h4>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7.2配置LNMP环境记录</title>
      <link href="/2017/12/31/centos7-pei-zhi-lnmp-huan-jing-ji-lu/"/>
      <url>/2017/12/31/centos7-pei-zhi-lnmp-huan-jing-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="CentOS7-2配置LNMP环境记录"><a href="#CentOS7-2配置LNMP环境记录" class="headerlink" title="CentOS7.2配置LNMP环境记录"></a>CentOS7.2配置LNMP环境记录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php 7.0+ nginx 1.10+ mysql 5.5+</span><br></pre></td></tr></table></figure><p>LNMP是Linux、Nginx、MySQL(MariaDB)和PHP的缩写，这个组合是最常见的WEB服务器的运行环境之一。本文将带领大家在CentOS 7操作系统上搭建一套LNMP环境。</p><p>本教程适用于<strong>CentOS 7.x</strong>版本。</p><span id="more"></span><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="更新-yum-源-自带的源没有-PHP7"><a href="#更新-yum-源-自带的源没有-PHP7" class="headerlink" title="更新 yum 源,自带的源没有 PHP7:"></a>更新 yum 源,自带的源没有 PHP7:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br></pre></td></tr></table></figure><h4 id="安装-epel"><a href="#安装-epel" class="headerlink" title="安装 epel:"></a>安装 epel:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure><h4 id="升级系统"><a href="#升级系统" class="headerlink" title="升级系统"></a>升级系统</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><p><strong>准备工作完成,开始安装!</strong></p><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><p>CentOS系统模板中配置了内网源，下载速度较快，推荐使用yum安装Nginx：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure><p>按照提示，输入yes后开始安装。安装完毕后，Nginx的配置文件在/etc/nginx目录下。使用以下命令启动Nginx：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br></pre></td></tr></table></figure><p>检查系统中firewalld防火墙服务是否开启，如果已<strong>开启</strong>，我们需要<strong>修改</strong>防火墙配置，开启Nginx外网端口访问。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status firewalld</span><br></pre></td></tr></table></figure><p>如果显示**active (running)**，则需要调整防火墙规则的配置。</p><p>修改/etc/firewalld/zones/public.xml文件，在zone一节中增加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;zone&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;service name=&quot;nginx&quot;/&gt;</span><br><span class="line">&lt;zone&gt;</span><br></pre></td></tr></table></figure><p>保存后重新加载firewalld服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart firewalld</span><br></pre></td></tr></table></figure><p>您可以通过浏览器访问 <strong>http://外网IP地址</strong> 来确定Nginx是否已经启动。</p><h4 id="【注意：很重要！！！】"><a href="#【注意：很重要！！！】" class="headerlink" title="【注意：很重要！！！】"></a>【<strong>注意：很重要！！！</strong>】</h4><p>部分童鞋发现按照教程操作最后无法访问，这是云服务器默认关闭了80端口。这个请移步云服务里控制台打开80端口的外网访问，如需步骤，请自行百度！</p><p>最后将Nginx设置为开机启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable nginx.service</span><br></pre></td></tr></table></figure><p>这么Nginx就安装成功了！</p><h3 id="安装MySQL-MariaDB"><a href="#安装MySQL-MariaDB" class="headerlink" title="安装MySQL(MariaDB)"></a>安装MySQL(MariaDB)</h3><p>MariaDB是MySQL的一个分支，主要由开源社区进行维护和升级，而MySQL被Oracle收购以后，发展较慢。在CentOS 7的软件仓库中，将MySQL更替为了MariaDB。</p><p>我们可以使用yum直接安装MariaDB：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install mariadb-server</span><br></pre></td></tr></table></figure><p>安装完成之后，执行以下命令重启MariaDB服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mariadb</span><br></pre></td></tr></table></figure><p>MariaDB默认root密码为空，我们需要设置一下，执行脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure><p><strong>这个脚本会经过一些列的交互问答来进行MariaDB的安全设置。</strong></p><p>首先提示输入当前的root密码：</p><ul><li>Enter current password for root (enter for none):</li><li><em>初始root密码为空，我们直接敲回车进行下一步。</em>*</li><li>Set root password? [Y/n]</li><li><em>设置root密码，默认选项为Yes，我们直接回车，提示输入密码，在这里设置您的MariaDB的root账户密码。</em>*</li><li>Remove anonymous users? [Y/n] <strong>是否移除匿名用户，默认选项为Yes，建议按默认设置，回车继续。</strong></li><li>Disallow root login remotely? [Y/n] </li><li><em>是否禁止root用户远程登录？如果您只在本机内访问MariaDB，建议按默认设置，回车继续。 如果您还有其他云主机需要使用root账号访问该数据库，则需要选择n。</em>*</li><li>Remove test database and access to it? [Y/n] <strong>是否删除测试用的数据库和权限？<br>建议按照默认设置，回车继续。</strong></li><li>Reload privilege tables now? [Y/n]</li><li><em>是否重新加载权限表？因为我们上面更新了root的密码，这里需要重新加载，回车。</em>*</li></ul><p>完成后你会看到Success!的提示，MariaDB的安全设置已经完成。我们可以使用以下命令登录MariaDB：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>按提示输入root密码，就会进入MariaDB的交互界面，说明已经安装成功。</p><p>最后我们将MariaDB设置为开机启动。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable mariadb</span><br></pre></td></tr></table></figure><p>php70w</p><h3 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h3><p>我们可以直接使用yum安装PHP：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install php70w-fpm php70w-mysql php70w-mysqli php70w php70w-opcache php70w-gd php70w-intl php70w-mbstring php70w-exif php70w-mcrypt php70w-openssl</span><br><span class="line"></span><br><span class="line">//把该安装的一次性装到位</span><br></pre></td></tr></table></figure><p>安装完成后我们将php-fpm启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start php-fpm</span><br></pre></td></tr></table></figure><p>将php-fpm设置为开机启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable php-fpm</span><br></pre></td></tr></table></figure><h2 id="接下来需要注意了！配置Nginx–多个站点"><a href="#接下来需要注意了！配置Nginx–多个站点" class="headerlink" title="接下来需要注意了！配置Nginx–多个站点"></a>接下来需要注意了！配置Nginx–多个站点</h2><p>我给大家提供一个范本作为参考：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx.conf</span><br><span class="line">//里面我会详细的给予中文注释</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/nginx/nginx.conf</span><br><span class="line">//编辑nginx.conf的命令</span><br></pre></td></tr></table></figure><p>以下为conf文件内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"># For more information on configuration, see:</span><br><span class="line">#   * Official English Documentation: http://nginx.org/en/docs/</span><br><span class="line">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span><br><span class="line"></span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log; #错误日志记录的位置</span><br><span class="line">pid /run/nginx.pid; #nginx.pid为记录nginx主进程pid文件；切勿修改、移动</span><br><span class="line"># Load dynamic modules. See /usr/share/nginx/README.dynamic.</span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line">#引入/usr/share/nginx/modules/ 目录下的所有以.conf结尾的文件</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span><br><span class="line">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span><br><span class="line">    # for more information.</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    #这句很重要，引入所有etc/nginx/conf.d/目录下的.conf文件</span><br><span class="line">    </span><br><span class="line">    #***etc/nginx/conf.d/目录存放的就是分站点的文件（下面会给出实例代码）***</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        #由于我们的nginx需要配置多站点，所以在此就需要注释一些东西</span><br><span class="line">        </span><br><span class="line">         listen       80 default_server;</span><br><span class="line">         listen       [::]:80 default_server;</span><br><span class="line">        #保留监听的端口  </span><br><span class="line">        # server_name  _;</span><br><span class="line">        # root         /usr/share/nginx/php;</span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        # include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        # location / &#123;</span><br><span class="line">        # &#125;</span><br><span class="line"></span><br><span class="line">        # error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        # location ~ \.php$ &#123;</span><br><span class="line">        # root           /usr/share/php;</span><br><span class="line">        # fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        # fastcgi_index  index.php;</span><br><span class="line">        # fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">        # include        fastcgi_params;</span><br><span class="line">        # &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"># Settings for a TLS enabled server.</span><br><span class="line">#</span><br><span class="line">#    server &#123;</span><br><span class="line">#        listen       443 ssl http2 default_server;</span><br><span class="line">#        listen       [::]:443 ssl http2 default_server;</span><br><span class="line">#        server_name  _;</span><br><span class="line">#        root         /usr/share/nginx/html;</span><br><span class="line">#</span><br><span class="line">#        ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class="line">#        ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class="line">#        ssl_session_cache shared:SSL:1m;</span><br><span class="line">#        ssl_session_timeout  10m;</span><br><span class="line">#        ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">#        ssl_prefer_server_ciphers on;</span><br><span class="line">#</span><br><span class="line">#        # Load configuration files for the default server block.</span><br><span class="line">#        include /etc/nginx/default.d/*.conf;</span><br><span class="line">#</span><br><span class="line">#        location / &#123;</span><br><span class="line">#        &#125;</span><br><span class="line">#</span><br><span class="line">#        error_page 404 /404.html;</span><br><span class="line">#            location = /40x.html &#123;</span><br><span class="line">#        &#125;</span><br><span class="line">#</span><br><span class="line">#        error_page 500 502 503 504 /50x.html;</span><br><span class="line">#            location = /50x.html &#123;</span><br><span class="line">#        &#125;</span><br><span class="line">#    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#注意：此份nginx.conf可以直接复制了去使用！~好用了就给博主打个赏钱！谢谢！</span><br></pre></td></tr></table></figure><p>配置完nginx之后我们该干啥、？当然是重启nginx呗</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx     #重启nginx</span><br></pre></td></tr></table></figure><p>重启完毕，继续打开 <strong>http://外网IP地址</strong> 来确定Nginx是否已经启动。</p><p>此时，服务器启动的是nginx和apache。</p><p>而且php-fpm默认发送到apache。</p><p>所以咱们还得继续修改一下php-fpm。</p><h3 id="配置-php-fpm"><a href="#配置-php-fpm" class="headerlink" title="配置 php-fpm"></a>配置 php-fpm</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/php-fpm.d/www.conf    </span><br><span class="line"></span><br><span class="line">#编辑php-fpm配置文件</span><br></pre></td></tr></table></figure><p>修改user和group （源代码为：user = apache group = apache）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user = nginx    </span><br><span class="line">group = nginx</span><br></pre></td></tr></table></figure><p>修改完了之后，还是老样子，重启php-fpm服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart php-fpm    #重启php-fpm</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最后，咱们需要为nginx添加站点了"><a href="#最后，咱们需要为nginx添加站点了" class="headerlink" title="最后，咱们需要为nginx添加站点了"></a>最后，咱们需要为nginx添加站点了</h3><p>添加站点这我先给大家一个截图，以帮助大家迅速的了解是怎么回事</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-b88cdd9942a123e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="image1.png"></p><p>大家应该看的很清楚了，猜都可以猜到，博主这一共配置了三个站点，这三个站点是怎么被nginx引入的呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我给大家贴出nginx的配置文件的里面应该有这么一句(注意图中的红框，上面的是地址)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">include /etc/nginx/conf.d/*.conf;</span><br><span class="line">#这句很重要，引入所有etc/nginx/conf.d/目录下的.conf文件</span><br><span class="line">#***etc/nginx/conf.d/目录存放的就是分站点的文件（下面会给出实例代码）***</span><br></pre></td></tr></table></figure><p>好的，大家应该能准确理解了，如果还是理解不了的话只能缺你回去喝点<strong>三鹿</strong>了！</p><h4 id="下面我给大家贴出nginx站点配置文件的代码，修改修改就可以用"><a href="#下面我给大家贴出nginx站点配置文件的代码，修改修改就可以用" class="headerlink" title="下面我给大家贴出nginx站点配置文件的代码，修改修改就可以用"></a><strong>下面我给大家贴出nginx站点配置文件的代码，修改修改就可以用</strong></h4><p><strong>看代码的时候请注意看里面的路径，当然我也还是会给一定的中文注释</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#这个文件是上面的qopmall.com.conf</span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    server_name  qopmall.com www.qopmall.com;#这里就是你要绑定的域名了，空格分开</span><br><span class="line">    location / &#123;</span><br><span class="line">            root   /usr/share/php/weixin; #这里是你站点存放的文件夹名称（也就是说，你当前这个站点的文件全部都丢在这个路径的weixin文件夹里面）</span><br><span class="line">            index  index.php index.html index.htm; #这里照抄即可</span><br><span class="line">        &#125;</span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        root           /usr/share/php/weixin; #这里的配置等同于上面的那个root配置</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  /usr/share/php/weixin/$fastcgi_script_name; #这里的配置也是和上面的root配置一样</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码非常简单，我没注释到的不用修改就行。</p><p>上面的路径，比如/usr/share/php/weixin 这就是你站点的根目录，我给大家截图参考：<br><img src="http://upload-images.jianshu.io/upload_images/1519926-a90417f1d70827b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="image2.png"></p><p>各位童鞋，创建好站点了，先写个简单的php程序测试一下是否正常，比如info。</p><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 如何加载本地html文件</title>
      <link href="/2017/12/18/ios-ru-he-jia-zai-ben-di-html-wen-jian/"/>
      <url>/2017/12/18/ios-ru-he-jia-zai-ben-di-html-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>iOS 如何加载本地html文件???? 其实很简单</p> <span id="more"></span><p>如下图所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-(void)loadLocalHtml&#123;</span><br><span class="line">    NSURL *url = [[NSBundle mainBundle] URLForResource:@&quot;/sfa/html/index.html&quot; withExtension:nil];</span><br><span class="line">    [self.webView loadRequest:[NSURLRequest requestWithURL:url]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@&quot;/sfa/html/index.html&quot;  </span><br></pre></td></tr></table></figure><p>部分是你的html文件相对于整个工程的路径<br>例如下面这个工程构成图：</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-262d457e31fc08dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="项目路径图"></p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-9914662d64428579.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="工程结构图"></p><p>相关文件最好以文件方式导入而不是group</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-e0654629032caa43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="导入文件夹方式"></p><p>CSDN: <a href="http://blog.csdn.net/zuoweixiaoduzuozuo/article/details/78834282">iOS 如何加载本地html文件</a></p><p>简书: <a href="http://www.jianshu.com/p/c82a8955a632">iOS 如何加载本地html文件</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过assetURL获取到视频</title>
      <link href="/2017/12/14/ios-use-asseturl-get-vedio/"/>
      <url>/2017/12/14/ios-use-asseturl-get-vedio/</url>
      
        <content type="html"><![CDATA[<p>首先导入头文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Photos/Photos.h&gt;</span><br></pre></td></tr></table></figure><p>iOS中assetURL样式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assets-library://asset/asset.mov?id=F2E6E143-4343-4B57-87F9-346936E0EDB3&amp;ext=mov</span><br></pre></td></tr></table></figure><span id="more"></span><p>使用当前的URL过滤到我们想要的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">PHFetchResult *result = [PHAsset fetchAssetsWithALAssetURLs:@[assetUrl] options:nil];</span><br><span class="line"></span><br><span class="line">   PHAsset * PHAsset = result.firstObject;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   /// 包含该视频的基础信息</span><br><span class="line">   PHAssetResource * resource = [[PHAssetResource assetResourcesForAsset: PHAsset] firstObject];</span><br><span class="line"></span><br><span class="line">   NSLog(@&quot;%@&quot;,resource);</span><br><span class="line">   /*</span><br><span class="line">    type:</span><br><span class="line">    originalFilename:</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">   PHImageRequestOptions * options = [[PHImageRequestOptions alloc] init];</span><br><span class="line"></span><br><span class="line">   options.version = PHImageRequestOptionsVersionCurrent;</span><br><span class="line"></span><br><span class="line">   options.deliveryMode = PHImageRequestOptionsDeliveryModeHighQualityFormat;</span><br><span class="line"></span><br><span class="line">   options.synchronous = YES;</span><br><span class="line"></span><br><span class="line">   __block NSData *videoData = nil;</span><br><span class="line"></span><br><span class="line">   [[PHImageManager defaultManager] requestImageDataForAsset: PHAsset</span><br><span class="line">                                                     options: options</span><br><span class="line">                                               resultHandler: ^(NSData * imageData, NSString * dataUTI, UIImageOrientation orientation, NSDictionary * info) &#123;</span><br><span class="line">                                                   NSLog(@&quot;%@&quot;,imageData);</span><br><span class="line">                                                       //这里的imageData就是视频数据;</span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS--如何计算出今天是周几</title>
      <link href="/2017/08/23/ios-ru-he-ji-suan-chu-jin-tian-shi-zhou-ji/"/>
      <url>/2017/08/23/ios-ru-he-ji-suan-chu-jin-tian-shi-zhou-ji/</url>
      
        <content type="html"><![CDATA[<p>iOS–如何计算出今天是周几？？ 很简单：</p> <span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NSCalendar *cal = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierRepublicOfChina];</span><br><span class="line"></span><br><span class="line">NSInteger comp = [cal component:NSCalendarUnitWeekday fromDate:[NSDate date]];</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;%ld&quot;,comp);</span><br><span class="line"></span><br><span class="line">NSDateComponents *comps = [cal components:NSCalendarUnitWeekday fromDate:[NSDate date]];</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;%@&quot;,comps);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows--电脑U盘启动盘制作</title>
      <link href="/2017/08/19/windows-make-pe-boot-usb-disk/"/>
      <url>/2017/08/19/windows-make-pe-boot-usb-disk/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本文是博主鉴于当前任然后很大一部分电脑玩家经常为不会给爱机装系统而创作，本博主是一个精通电脑硬件性能以及软件使用的IT人士。</p><p>Windows的启动盘分为两类:(随便选择<strong>一种</strong>方法制作就OK了)</p> <span id="more"></span><ul><li><strong>普通BIOS启动的PE类</strong></li><li><strong>UEFI启动的EFI类</strong></li></ul><p>无论是哪一类大家都不用担心，都有相对应的傻瓜式软件来帮我们完成，我们需要做的就是一下：</p><ul><li>找一个U盘，最好是空的（因为无论是哪一种制作方式都可能会格式化这个U盘）</li><li>U盘的大小最好是8GB左右的（第一种的方式大小无所谓，主要是第二种的方式会占用大量空间）</li><li>一台能联网的电脑（这个么有难度吧）</li></ul><h3 id="普通BIOS启动的PE类"><a href="#普通BIOS启动的PE类" class="headerlink" title="普通BIOS启动的PE类"></a>普通BIOS启动的PE类</h3><p>以下将简单介绍如何给Windows电脑制作一个<strong>普通BIOS启动的PE类</strong>U盘启动盘</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p><strong>下载U盘启动盘制作工具</strong><br>可以选的种类有很多个：老毛桃，U深度，大白菜，电脑店。。。。下面介绍的是<strong>电脑店</strong>。</p><p>下载地址：<strong><a href="http://u.diannaodian.com/down">http://u.diannaodian.com/down</a></strong></p><p>进入如图页面：</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-71b4b684156f678d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="QQ截图20170819233452.png"></p><p>点击<strong>下载</strong>：</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-9691074f0f79ca5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="QQ截图20170819231746.png"></p><p>推荐点击<strong>本地下载</strong>：</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-27efd7a6db8359e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="QQ截图20170819231817.png"></p><p>然后就是等待下载完毕。。。。。。</p><p>在这个时候我们就可以开始对U盘做一些操作了(如果你的U盘不是空的话，如果里面没有东西，这一步可以跳过)，把U盘里面的所有东西都挪到电脑上（除了C盘的任何位置，只要你找的到就行）。</p><p>OK下载完了，开始安装：<br>这个软件的安装很简单，就是单纯的吧这个下载的ZIP文件解压而已：我解压到了我的软件盘，盘符为D，如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-fd38b862f7230552.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="QQ截图20170819232452.png"></p><p>然后就是插上U盘，这时软件上面的U盘选择项就会出现你的U盘名称：</p><p>然后选择启动模式：（个人建议不要动保持<strong>USB-HDD</strong>模式）</p><p>然后选择U盘格式：（个人建议<strong>NTFS</strong>，因为<strong>Fat32</strong>有着文件大小的限制，单个文件的大小不得超过<strong>4GB</strong>）</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-06fbdf583167f922.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="QQ截图20170819232534.png"></p><p>都选择完了之后，那就点一下鼠标，点击<strong>全新制作</strong>：<br>接下来就是等了。。。等。。。<br>应该会很快<br>完成之后：点击<strong>模拟启动</strong>，选择<strong>BIOS</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-6075ee1c3335548a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="QQ图片20170819233059.png"></p><p>至此，U盘启动盘已经制作完成。</p><h3 id="UEFI启动的EFI类"><a href="#UEFI启动的EFI类" class="headerlink" title="UEFI启动的EFI类"></a>UEFI启动的EFI类</h3><h4 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h4><p>下载<strong>软碟通</strong></p><p>百度就有：</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-8154c6f201b5b365.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="QQ截图20170819234217.png"></p><p>安装：</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-0c502c9d714f8a0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="QQ截图20170819234300.png"></p><ul><li>接受协议，下一步。。。</li><li>注意改一下安装路径：（建议不要装在C盘，我的是在D盘）</li><li>一直下一步，知道结束</li></ul><p> 启动 选择<strong>继续试用</strong>：</p><p> <img src="http://upload-images.jianshu.io/upload_images/1519926-b1e53763dbca94b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="QQ截图20170819234411.png"></p><p> 选择上方工具栏的<strong>文件</strong>–<strong>打开</strong>：（选择你的系统镜像）</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-f40716ebcc930545.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="Uploading QQ截图20170819234614_259660.png."></p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-994c67f773e5413b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="QQ截图20170819234614.png"></p><p> 然后如图：</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-a605ae6618f9c97a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="QQ截图20170819234634.png"></p><p> 选择<strong>工具</strong>–<strong>写入磁盘镜像</strong>，插入U盘</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-59fb248b266fce9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="QQ截图20170819234654.png"></p><p> 点击<strong>写入</strong>：（没有合适的U盘 所以我这里是不能点的）</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-23dd964d7170ab3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="QQ截图20170819234711.png"></p><h5 id="注意本类U盘启动盘只能以UEFI模式启动"><a href="#注意本类U盘启动盘只能以UEFI模式启动" class="headerlink" title="注意本类U盘启动盘只能以UEFI模式启动"></a><strong>注意本类U盘启动盘只能以UEFI模式启动</strong></h5><p> 请设置自己电脑的相关BIOS设置</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐讯K2刷华硕固件</title>
      <link href="/2017/08/18/fei-xun-k2-shua-hua-shuo-gu-jian/"/>
      <url>/2017/08/18/fei-xun-k2-shua-hua-shuo-gu-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a><strong>写在前面</strong></h3><p>斐讯K2是一款处于1200Mbps(300+867Mbps)无线速率段的双频802.11ac路由器，2.4G+5G双频并发，PA+LNA强强组合，智能管理轻松控制，斐讯K2完美诠释了“家再大，隔墙再多，WiFi信号不受阻隔”的上网体验。斐讯K2路由器可以在京东免费撸，很多朋友撸回家发现固件太垃圾，各种不好用，因此想把斐讯K2刷成华硕固件。 </p>  <span id="more"></span><p> <a href="http://detail.zol.com.cn/wireless_router/index1140233.shtml">中关村斐讯K2</a>  </p><h4 id="重要说明"><a href="#重要说明" class="headerlink" title="重要说明"></a><strong>重要说明</strong></h4><p> 据说，这种方法支持斐讯K2的固件版本为：<br> 22.3.15.128<br> 22.3.15.232<br> 22.3.17.148<br> 22.4.2.8<br> 22.4.2.9<br> 如果目前你的斐讯K2路由器的固件版本高于或者低于这几个版本，可以进行升级或者降级操作，然后按照。下面我会提供相关文件的下载地址，方便大家下载后进行升级和降级操作。<br>点击 <a href="https://pan.baidu.com/s/1gfssXUz">百度网盘</a><br>或者复制链接: <a href="https://pan.baidu.com/s/1gfssXUz">https://pan.baidu.com/s/1gfssXUz</a> 密码: qdke </p><h4 id="第一步：——自带固件降级—–"><a href="#第一步：——自带固件降级—–" class="headerlink" title="第一步：——自带固件降级—–"></a><strong>第一步：——自带固件降级—–</strong></h4><p>降级分为两个版本，一个是老版本22.5.9，另外一个是22.5.11，因为在.11版本降级会出现提示，非法固件而不允许刷机，那么我们就是用另外一种方法来进行刷机</p><h5 id="首先22-5-9版本降级"><a href="#首先22-5-9版本降级" class="headerlink" title="首先22.5.9版本降级"></a><strong>首先22.5.9版本降级</strong></h5><h6 id="第1步"><a href="#第1步" class="headerlink" title="第1步"></a><strong>第1步</strong></h6><p>a、进入系统设置，找到手动升级，选择k2_163_v11_breed.bin ，然后升级</p><h6 id="第2步"><a href="#第2步" class="headerlink" title="第2步"></a><strong>第2步</strong></h6><p>a、升级完成后，断开路由器电源。<br> b、按住复位键，插上电源，等待7秒钟后松开复位键。<br> <img src="http://upload-images.jianshu.io/upload_images/1519926-adcaac92e341f4d5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" "> </p><h6 id="第3步"><a href="#第3步" class="headerlink" title="第3步"></a><strong>第3步</strong></h6><p> a、进入breed  web设置页面<br> <img src="http://upload-images.jianshu.io/upload_images/1519926-c8700e58b3691f38?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" "> </p><h5 id="22-5-11版本降级"><a href="#22-5-11版本降级" class="headerlink" title="22.5.11版本降级"></a><strong>22.5.11版本降级</strong></h5><h6 id="第1步-1"><a href="#第1步-1" class="headerlink" title="第1步"></a>第1步</h6><p>1、安装Firefox浏览器。</p><p>2、用网线连接电脑和路由器的Lan口（WAN口无所谓，联不联网无所谓），K1、K2默认登录密码修改为admin。</p><h6 id="第2步、开启telnet工作"><a href="#第2步、开启telnet工作" class="headerlink" title="第2步、开启telnet工作"></a>第2步、开启telnet工作</h6><p>1、打开Firefox浏览器登陆斐讯路由器，选择右上角的“定时重启路由器”，如图。<br><img src="http://img.blog.csdn.net/20170529234357673?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvWnVvV2VpWGlhb0R1WnVvWnVv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p><p>2、点击指定重启时间，将鼠标箭头放到05上，右键选择“查看元素”。注意一定要放在05上；</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-f5ca30c7d63b9711.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="201701121108234370.png"></p><p>3、在查看器中将鼠标移到”05”上（找不到05的话刷新一下网页），点击鼠标右键，选择“编程HTML”。</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-428f46a0f8cc1247.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="201701121108442103.png"><br>4、将”05”改成”01:00 | telnetd -l /bin/login.sh”（复制粘贴即可），然后鼠标移动到黑框之外的空白处点击鼠标左键，就可以完成编辑了。</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-57ad3cd930ff5ed5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="201701121109202138.png"><br>5、在定时重启路由器页面上选择05之后（注意现在回变成1：00…..），点击“保存”。</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-7ccb2dbe0e4e54f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="201701121109271335.png"><br>那么现在就完成了开启K2路由器telnet服务的工作。<br>6、下载目录内breed Web助手（3.4版本）–&gt;关闭防火墙，退出杀毒软件–&gt;找到这个文件“路由器刷breed Web助手通用版v3.0”–&gt;右键以管理员身份运行</p><p>7、如图刷机方案选择：”通用方案[需要开启路由器telnet或ssh]”，然后点击开始刷机；</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-fb631c4b473eebaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="201701121109327806.png"></p><p>8、完成后这样就完成了斐讯路由器刷入不死Breed。</p><h4 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a><strong>第二步：</strong></h4><p> a、进入breed界面<br> b、在菜单固件更新中，选择文件哪一行，选择SW_K2_703004657_V22.4.2.8.bin  固件<br> c、等待上传完成<br>  <img src="http://upload-images.jianshu.io/upload_images/1519926-c15336ce2d618569?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" "><br> <img src="http://upload-images.jianshu.io/upload_images/1519926-6ab7f4e6b5d591f6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" "><br> e、请等待升级完成，自动重启后。然后按住复位键7秒，等待重启后。 到此你的路由器固件成功降级到了22.4.2.8<br>  <img src="http://upload-images.jianshu.io/upload_images/1519926-1c39571d88b56311?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" "><br> f、注意右下角的固件版本号<br> <img src="http://upload-images.jianshu.io/upload_images/1519926-f7133a856faec4c6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" "></p><h4 id="——刷入华硕固件—–"><a href="#——刷入华硕固件—–" class="headerlink" title="——刷入华硕固件—–"></a><strong>——刷入华硕固件—–</strong></h4><h6 id="第1步–刷入breed和ssh"><a href="#第1步–刷入breed和ssh" class="headerlink" title="第1步–刷入breed和ssh"></a><strong>第1步–刷入breed和ssh</strong></h6><p> a、点击“高级设置”——&gt;“备份恢复”——&gt;“浏览”找到刚才下载的：tianbaoha_breed_ssh.dat文件——&gt;“恢复备份”。<br> <img src="http://upload-images.jianshu.io/upload_images/1519926-d7b6ef7fdb6ccbaa?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" "><br> b、路由器会自动重启，等待重启完成<br> <img src="http://upload-images.jianshu.io/upload_images/1519926-198ca9095384795a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="给斐讯K2刷入breed和ssh"><br><img src="http://upload-images.jianshu.io/upload_images/1519926-4e3e8fc7625106d8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" "><br>c、验证 斐讯K2重启完成后，重新在浏览器中输入p.to或者192.168.2.1，打开登录界面，<strong>管理密码用：tianbaoha</strong> 。如果可以登录到设置界面，说明breed和ssh已经刷入成功。</p><h6 id="第2步-1"><a href="#第2步-1" class="headerlink" title="第2步"></a><strong>第2步</strong></h6><p>a、<strong>管理密码用：tianbaoha</strong> 登录到K2的设置界面后，点击“高级设置”——&gt;“系统设置”——&gt;“手动升级”——&gt;点击 下载备份EEPROM，如下图所示。<br><img src="http://upload-images.jianshu.io/upload_images/1519926-e3ceda4f07d50ffe?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" "></p><h6 id="第3步–刷写华硕固件"><a href="#第3步–刷写华硕固件" class="headerlink" title="第3步–刷写华硕固件"></a><strong>第3步–刷写华硕固件</strong></h6><p>**登录地址：192.168.123.1 **<br>**管理账号：admin/admin **<br>默认wifi密码：1234567890<br> a、点击“高级设置”——&gt;“系统设置”——&gt;“手动升级”——&gt;点击“浏览”，找到刚才下载的华硕固件:RT-AC54U-GPIO-1-PSG1208-64M_3.4.3.9-099.trx<br> <img src="http://upload-images.jianshu.io/upload_images/1519926-98e30139ff355132?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" "><br> b、点击“升级”。<br> <img src="http://upload-images.jianshu.io/upload_images/1519926-9a6a9e5a20785f19?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" "></p><h6 id="第4步"><a href="#第4步" class="headerlink" title="第4步"></a><strong>第4步</strong></h6><p> a、等待路由器重启。<br> b、在浏览器中输入：<strong>192.168.123.1 <strong>打开登录界面——&gt;用户名和密码用：</strong>admin/admin</strong>，登录到界面了<br> <img src="http://upload-images.jianshu.io/upload_images/1519926-b17e987be3d80386?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" "> <img src="http://upload-images.jianshu.io/upload_images/1519926-47c4cd81cb6ea35e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" ">  </p><h5 id="结束"><a href="#结束" class="headerlink" title="结束"></a><strong>结束</strong></h5>]]></content>
      
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS自定义相机的实现</title>
      <link href="/2017/08/18/ios-zi-ding-yi-xiang-ji-de-shi-xian/"/>
      <url>/2017/08/18/ios-zi-ding-yi-xiang-ji-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<h3 id="iOS自定义相机的实现"><a href="#iOS自定义相机的实现" class="headerlink" title="iOS自定义相机的实现"></a>iOS自定义相机的实现</h3><p>本文主要介绍iOS系统上的自定义相机的实现，其实并不难主要包含了，拍摄设备，输入端，输出端，以及抓取图像，保存图像的操作。</p> <span id="more"></span><p>###简单介绍组要控件</p><ul><li>上方功能区<ul><li>取消按钮</li><li>闪光灯按钮</li><li>相机切换按钮</li></ul></li><li>下方功能区<ul><li>拍照按钮</li><li>重新拍照按钮</li><li>选择照片按钮</li></ul></li><li>图像展示视图</li></ul><h4 id="主要代码展示"><a href="#主要代码展示" class="headerlink" title="主要代码展示"></a>主要代码展示</h4><h5 id="头文件内容展示"><a href="#头文件内容展示" class="headerlink" title="头文件内容展示"></a>头文件内容展示</h5><ul><li>定了一个block，用于传输照片信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line">typedef void(^ImageBlock)(NSDictionary *imageDictionary);</span><br><span class="line">@interface CameraViewController : UIViewController</span><br><span class="line">@property (nonatomic, copy) ImageBlock imageblock;</span><br><span class="line">-(void)setImageblock:(void(^)(NSDictionary *imageDictionary))imageblock;</span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="视图控件代码，逻辑代码展示"><a href="#视图控件代码，逻辑代码展示" class="headerlink" title="视图控件代码，逻辑代码展示"></a>视图控件代码，逻辑代码展示</h5><ul><li>当前视图需要的主要空控件，为了方便操作全部定义为属性</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">@interface CameraViewController ()&lt;AVCaptureMetadataOutputObjectsDelegate,UIAlertViewDelegate,CAAnimationDelegate&gt;</span><br><span class="line">//捕获设备，通常是前置摄像头，后置摄像头，麦克风（音频输入）</span><br><span class="line">@property(nonatomic)AVCaptureDevice *device;</span><br><span class="line">//AVCaptureDeviceInput 代表输入设备，他使用AVCaptureDevice 来初始化</span><br><span class="line">@property(nonatomic)AVCaptureDeviceInput *input;</span><br><span class="line">//当启动摄像头开始捕获输入</span><br><span class="line">@property(nonatomic)AVCaptureMetadataOutput *output;</span><br><span class="line">//输出</span><br><span class="line">@property (nonatomic)AVCaptureStillImageOutput *ImageOutPut;</span><br><span class="line">//session：由他把输入输出结合在一起，并开始启动捕获设备（摄像头）</span><br><span class="line">@property(nonatomic)AVCaptureSession *session;</span><br><span class="line">//图像预览层，实时显示捕获的图像</span><br><span class="line">@property(nonatomic)AVCaptureVideoPreviewLayer *previewLayer;</span><br><span class="line">//设备</span><br><span class="line">@property (nonatomic, strong)AVCaptureDevice *deveice;</span><br><span class="line">//拍照</span><br><span class="line">@property (nonatomic, strong) UIButton *PhotoButton;</span><br><span class="line">//闪光灯</span><br><span class="line">@property (nonatomic, strong) UIButton *flashButton;</span><br><span class="line">//取消</span><br><span class="line">@property (nonatomic, strong) UIButton *cancleButton;</span><br><span class="line">//切换摄像头</span><br><span class="line">@property (nonatomic, strong) UIButton *changeButton;</span><br><span class="line">//确定选择当前照片</span><br><span class="line">@property (nonatomic, strong) UIButton *selectButton;</span><br><span class="line">//重新拍照</span><br><span class="line">@property (nonatomic, strong) UIButton *reCamButton;</span><br><span class="line">//照片加载视图</span><br><span class="line">@property (nonatomic, strong) UIImageView *imageView;</span><br><span class="line">//对焦区域</span><br><span class="line">@property (nonatomic, strong) UIImageView *focusView;</span><br><span class="line">//上方功能区</span><br><span class="line">@property (nonatomic, strong) UIView *topView;</span><br><span class="line">//下方功能区</span><br><span class="line">@property (nonatomic, strong) UIView *bottomView;</span><br><span class="line">//闪光灯状态</span><br><span class="line">@property (nonatomic, assign) BOOL isflashOn;</span><br><span class="line">//拍到的照片</span><br><span class="line">@property (nonatomic, strong) UIImage *image;</span><br><span class="line">//照片的信息</span><br><span class="line">@property (nonatomic, strong) NSDictionary *imageDict;</span><br><span class="line">//是否可以拍照</span><br><span class="line">@property (nonatomic, assign) BOOL canCa;</span><br><span class="line">//闪光灯模式</span><br><span class="line">@property (nonatomic, assign) AVCaptureFlashMode flahMode;</span><br><span class="line">//前后摄像头</span><br><span class="line">@property (nonatomic, assign) AVCaptureDevicePosition cameraPosition;</span><br><span class="line">//模糊视图</span><br><span class="line">@property (nonatomic, strong) UIVisualEffectView *effectView;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><ul><li>使用懒加载，减少主要函数中的代码，看起来更为清爽。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">@implementation CameraViewController</span><br><span class="line">#pragma mark - 更改摄像头</span><br><span class="line"></span><br><span class="line">-(UIVisualEffectView *)effectView&#123;</span><br><span class="line">    if (_effectView == nil) &#123;</span><br><span class="line">        UIBlurEffect *effect = [UIBlurEffect effectWithStyle:UIBlurEffectStyleLight];</span><br><span class="line">        _effectView = [[UIVisualEffectView alloc] initWithEffect:effect];</span><br><span class="line">        _effectView.frame = CGRectMake(0, 0, ScreenWidth(), ScreenHieght());</span><br><span class="line">        _effectView.alpha = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return _effectView;</span><br><span class="line">&#125;</span><br><span class="line"> #pragma mark - 更改闪光灯状态</span><br><span class="line">-(void)setIsflashOn:(BOOL)isflashOn&#123;</span><br><span class="line">    _isflashOn = isflashOn;</span><br><span class="line">    [[NSUserDefaults standardUserDefaults] setObject:@(_isflashOn) forKey:@&quot;flashMode&quot;];</span><br><span class="line">    if (_isflashOn) &#123;</span><br><span class="line">        [self.flashButton setBackgroundImage:[UIImage imageNamed:@&quot;flash_on&quot;] forState:UIControlStateNormal];</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        [self.flashButton setBackgroundImage:[UIImage imageNamed:@&quot;flash_off&quot;] forState:UIControlStateNormal];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - 上方功能区</span><br><span class="line">-(UIView *)topView&#123;</span><br><span class="line">    if (!_topView ) &#123;</span><br><span class="line">        _topView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, ScreenWidth(), 50)];</span><br><span class="line">        _topView.backgroundColor = [UIColor colorWithRed:1 green:1 blue:1 alpha:0.2];</span><br><span class="line">        [_topView addSubview:self.cancleButton];</span><br><span class="line">        [_topView addSubview:self.flashButton];</span><br><span class="line">        [_topView addSubview:self.changeButton];</span><br><span class="line">    &#125;</span><br><span class="line">    return _topView;</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - 取消</span><br><span class="line">-(UIButton *)cancleButton&#123;</span><br><span class="line">    if (_cancleButton == nil) &#123;</span><br><span class="line">        _cancleButton = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">        _cancleButton.frame = CGRectMake(20, 10, 60, 30);</span><br><span class="line">        [_cancleButton setTitle:@&quot;取消&quot; forState:UIControlStateNormal];</span><br><span class="line">        [_cancleButton addTarget:self action:@selector(cancle) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    &#125;</span><br><span class="line">    return  _cancleButton ;</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - 闪光灯</span><br><span class="line">-(UIButton *)flashButton&#123;</span><br><span class="line">    if (_flashButton == nil) &#123;</span><br><span class="line">        _flashButton = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">        _flashButton.frame = CGRectMake((ScreenWidth()-30)/2.0, 10, 30, 30);</span><br><span class="line">        [_flashButton addTarget:self action:@selector(FlashOn) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    &#125;</span><br><span class="line">    return  _flashButton;</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - 切换摄像头</span><br><span class="line">-(UIButton *)changeButton&#123;</span><br><span class="line">    if (_changeButton == nil) &#123;</span><br><span class="line">        _changeButton = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">        _changeButton.frame = CGRectMake(ScreenWidth()-40, 10, 30, 30);</span><br><span class="line">        [_changeButton setBackgroundImage:[UIImage imageNamed:@&quot;cam&quot;] forState:UIControlStateNormal];</span><br><span class="line">        [_changeButton addTarget:self action:@selector(changeCamera) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    &#125;</span><br><span class="line">    return  _changeButton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 下方功能区</span><br><span class="line"></span><br><span class="line">-(UIView *)bottomView&#123;</span><br><span class="line">    if (!_bottomView) &#123;</span><br><span class="line">        _bottomView = [[UIView alloc] initWithFrame:CGRectMake(0, ScreenHieght()-80, ScreenWidth(), 80)];</span><br><span class="line">        _bottomView.backgroundColor = [UIColor colorWithRed:1 green:1 blue:1 alpha:0.4];</span><br><span class="line">        [_bottomView addSubview:self.reCamButton];</span><br><span class="line">        [_bottomView addSubview:self.PhotoButton];</span><br><span class="line">        [_bottomView addSubview:self.selectButton];</span><br><span class="line">    &#125;</span><br><span class="line">    return _bottomView;</span><br><span class="line">&#125;</span><br><span class="line">-(UIButton *)reCamButton&#123;</span><br><span class="line">    if (_reCamButton == nil) &#123;</span><br><span class="line">        _reCamButton = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">        _reCamButton.frame = CGRectMake(40, 25, 80, 30);</span><br><span class="line">        [_reCamButton addTarget:self action:@selector(reCam) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">        [_reCamButton setTitle:@&quot;重新拍照&quot; forState:UIControlStateNormal];</span><br><span class="line">        [_reCamButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];</span><br><span class="line">        _reCamButton.alpha = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return _reCamButton;</span><br><span class="line">&#125;</span><br><span class="line">-(UIButton *)PhotoButton&#123;</span><br><span class="line">    if (_PhotoButton == nil) &#123;</span><br><span class="line">        _PhotoButton = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">        _PhotoButton.frame = CGRectMake(ScreenWidth()/2.0-30, 10, 60, 60);</span><br><span class="line">        [_PhotoButton setImage:[UIImage imageNamed:@&quot;photograph&quot;] forState: UIControlStateNormal];</span><br><span class="line">        [_PhotoButton setImage:[UIImage imageNamed:@&quot;photograph_Select&quot;] forState:UIControlStateNormal];</span><br><span class="line">        [_PhotoButton addTarget:self action:@selector(shutterCamera) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    &#125;</span><br><span class="line">    return _PhotoButton;</span><br><span class="line">&#125;</span><br><span class="line">-(UIButton *)selectButton&#123;</span><br><span class="line">    if (_selectButton == nil) &#123;</span><br><span class="line">        _selectButton = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">        _selectButton.frame = CGRectMake(ScreenWidth()-120, 25, 80, 30);</span><br><span class="line">        [_selectButton addTarget:self action:@selector(selectImage) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">        [_selectButton setTitle:@&quot;选择照片&quot; forState:UIControlStateNormal];</span><br><span class="line">        [_selectButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];</span><br><span class="line">        _selectButton.alpha = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return _selectButton;</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - 加载照片的视图</span><br><span class="line">-(UIImageView *)imageView&#123;</span><br><span class="line">    if (_imageView == nil) &#123;</span><br><span class="line">        _imageView = [[UIImageView alloc]initWithFrame:self.previewLayer.frame];</span><br><span class="line">        _imageView.layer.masksToBounds = YES;</span><br><span class="line">        _imageView.image = _image;</span><br><span class="line">    &#125;</span><br><span class="line">    return _imageView;</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - 对焦区域</span><br><span class="line">-(UIImageView *)focusView&#123;</span><br><span class="line">    if (_focusView == nil) &#123;</span><br><span class="line">        _focusView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, 80, 80)];</span><br><span class="line">        _focusView.backgroundColor = [UIColor clearColor];</span><br><span class="line">        _focusView.image = [UIImage imageNamed:@&quot;foucs80pt&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">    return _focusView;</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - 使用self.session，初始化预览层，self.session负责驱动input进行信息的采集，layer负责把图像渲染显示</span><br><span class="line">-(AVCaptureVideoPreviewLayer *)previewLayer&#123;</span><br><span class="line">    if (_previewLayer == nil) &#123;</span><br><span class="line">        _previewLayer = [[AVCaptureVideoPreviewLayer alloc]initWithSession:self.session];</span><br><span class="line">        _previewLayer.frame = CGRectMake(0, 0, ScreenWidth(), ScreenHieght());</span><br><span class="line">        _previewLayer.videoGravity = AVLayerVideoGravityResizeAspectFill;</span><br><span class="line">    &#125;</span><br><span class="line">    return  _previewLayer;</span><br><span class="line">&#125;</span><br><span class="line">-(AVCaptureStillImageOutput *)ImageOutPut&#123;</span><br><span class="line">    if (_ImageOutPut == nil) &#123;</span><br><span class="line">        _ImageOutPut = [[AVCaptureStillImageOutput alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    return _ImageOutPut;</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - 初始化输入</span><br><span class="line">-(AVCaptureDeviceInput *)input&#123;</span><br><span class="line">    if (_input == nil) &#123;</span><br><span class="line">        </span><br><span class="line">        _input = [[AVCaptureDeviceInput alloc]initWithDevice:self.device error:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    return _input;</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - 初始化输出</span><br><span class="line">-(AVCaptureMetadataOutput *)output&#123;</span><br><span class="line">    if (_output == nil) &#123;</span><br><span class="line">        </span><br><span class="line">        _output = [[AVCaptureMetadataOutput alloc]init];</span><br><span class="line">    &#125;</span><br><span class="line">    return  _output;</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - 使用AVMediaTypeVideo 指明self.device代表视频，默认使用后置摄像头进行初始化</span><br><span class="line">-(AVCaptureDevice *)device&#123;</span><br><span class="line">    if (_device == nil) &#123;</span><br><span class="line">        </span><br><span class="line">        _device = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];</span><br><span class="line">    &#125;</span><br><span class="line">    return _device;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主要逻辑代码"><a href="#主要逻辑代码" class="headerlink" title="主要逻辑代码"></a>主要逻辑代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - 当前视图控制器的初始化</span><br><span class="line">- (instancetype)init</span><br><span class="line">&#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        _canCa = [self canUserCamear];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)setImageblock:(void (^)(NSDictionary *))imageblock&#123;</span><br><span class="line">    _imageblock = imageblock;</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - 检查相机权限</span><br><span class="line">- (BOOL)canUserCamear&#123;</span><br><span class="line">    AVAuthorizationStatus authStatus = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];</span><br><span class="line">    if (authStatus == AVAuthorizationStatusDenied) &#123;</span><br><span class="line">        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@&quot;请打开相机权限&quot; message:@&quot;设置-隐私-相机&quot; delegate:self cancelButtonTitle:@&quot;确定&quot; otherButtonTitles:@&quot;取消&quot;, nil];</span><br><span class="line">        alertView.tag = 100;</span><br><span class="line">        [alertView show];</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - 视图加载</span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    self.view.backgroundColor = [UIColor clearColor];</span><br><span class="line">    if (_canCa) &#123;</span><br><span class="line">        [self customCamera];</span><br><span class="line">        [self customUI];</span><br><span class="line">        [self FlashOn];</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    // Do any additional setup after loading the view, typically from a nib.</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - 自定义视图</span><br><span class="line">- (void)customUI&#123;</span><br><span class="line">    [self.view addSubview:self.topView];</span><br><span class="line">    [self.view addSubview:self.bottomView];</span><br><span class="line">    [self.view addSubview:self.focusView];</span><br><span class="line">    UITapGestureRecognizer *tapGesture = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(focusGesture:)];</span><br><span class="line">    [self.view addGestureRecognizer:tapGesture];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - 自定义相机</span><br><span class="line">- (void)customCamera&#123;</span><br><span class="line">    //生成会话，用来结合输入输出</span><br><span class="line">    self.session = [[AVCaptureSession alloc]init];</span><br><span class="line">    if ([self.session canSetSessionPreset:AVCaptureSessionPresetPhoto]) &#123;</span><br><span class="line">        self.session.sessionPreset = AVCaptureSessionPresetPhoto;</span><br><span class="line">    &#125;</span><br><span class="line">    if ([self.session canAddInput:self.input]) &#123;</span><br><span class="line">        [self.session addInput:self.input];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if ([self.session canAddOutput:self.ImageOutPut]) &#123;</span><br><span class="line">        [self.session addOutput:self.ImageOutPut];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [self.view.layer addSublayer:self.previewLayer];</span><br><span class="line">    </span><br><span class="line">    //开始启动</span><br><span class="line">    [self.session startRunning];</span><br><span class="line">    if ([self.device lockForConfiguration:nil]) &#123;</span><br><span class="line">        if ([self.device isFlashModeSupported:AVCaptureFlashModeAuto]) &#123;</span><br><span class="line">            [self.device setFlashMode:AVCaptureFlashModeAuto];</span><br><span class="line">        &#125;</span><br><span class="line">        //自动白平衡</span><br><span class="line">        if ([self.device isWhiteBalanceModeSupported:AVCaptureWhiteBalanceModeAutoWhiteBalance]) &#123;</span><br><span class="line">            [self.device setWhiteBalanceMode:AVCaptureWhiteBalanceModeAutoWhiteBalance];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [self.device unlockForConfiguration];</span><br><span class="line">    &#125;</span><br><span class="line">    [self focusAtPoint:self.view.center];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>*闪光灯</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#pragma 闪光灯</span><br><span class="line">- (void)FlashOn&#123;</span><br><span class="line">    if ([self.device lockForConfiguration:nil]) &#123;</span><br><span class="line">        if (self.isflashOn) &#123;</span><br><span class="line">            if ([self.device isFlashModeSupported:AVCaptureFlashModeOff]) &#123;</span><br><span class="line">                [self.device setFlashMode:AVCaptureFlashModeOff];</span><br><span class="line">                self.isflashOn = NO;</span><br><span class="line">                //[self.flashButton setTitle:@&quot;关&quot; forState:UIControlStateNormal];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            if ([self.device isFlashModeSupported:AVCaptureFlashModeAuto]) &#123;</span><br><span class="line">                [self.device setFlashMode:AVCaptureFlashModeAuto];</span><br><span class="line">                self.isflashOn = YES;</span><br><span class="line">                //[self.flashButton setTitle:@&quot;开&quot; forState:UIControlStateNormal];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [self.device unlockForConfiguration];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>双摄像头切换，切换时使用高斯模糊对试图进行处理</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - 相机切换</span><br><span class="line">- (void)changeCamera&#123;</span><br><span class="line">    NSUInteger cameraCount = [[AVCaptureDevice devicesWithMediaType:AVMediaTypeVideo] count];</span><br><span class="line">    if (cameraCount &gt; 1) &#123;</span><br><span class="line">        self.changeButton.userInteractionEnabled = NO;</span><br><span class="line">        [self cutoff];</span><br><span class="line">        NSError *error;</span><br><span class="line">        </span><br><span class="line">        CATransition *animation = [CATransition animation];</span><br><span class="line">        animation.duration = 1;</span><br><span class="line">        animation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</span><br><span class="line">        animation.type = @&quot;oglFlip&quot;;</span><br><span class="line">        animation.delegate = self;</span><br><span class="line">        AVCaptureDevice *newCamera = nil;</span><br><span class="line">        AVCaptureDeviceInput *newInput = nil;</span><br><span class="line">        AVCaptureDevicePosition position = [[self.input device] position];</span><br><span class="line">        if (position == AVCaptureDevicePositionFront)&#123;</span><br><span class="line">            newCamera = [self cameraWithPosition:AVCaptureDevicePositionBack];</span><br><span class="line">            animation.subtype = kCATransitionFromLeft;</span><br><span class="line">            self.cameraPosition = AVCaptureDevicePositionBack;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            newCamera = [self cameraWithPosition:AVCaptureDevicePositionFront];</span><br><span class="line">            animation.subtype = kCATransitionFromRight;</span><br><span class="line">            self.cameraPosition = AVCaptureDevicePositionFront;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        newInput = [AVCaptureDeviceInput deviceInputWithDevice:newCamera error:nil];</span><br><span class="line">        [self.previewLayer addAnimation:animation forKey:nil];</span><br><span class="line">        /*</span><br><span class="line">         高斯模糊</span><br><span class="line">         */</span><br><span class="line">        </span><br><span class="line">        [self.imageView addSubview:self.effectView];</span><br><span class="line">        [self.view insertSubview:self.imageView belowSubview:self.topView];</span><br><span class="line">        //</span><br><span class="line">        if (newInput != nil) &#123;</span><br><span class="line">            [self.session beginConfiguration];</span><br><span class="line">            [self.session removeInput:self.input];</span><br><span class="line">            if ([self.session canAddInput:newInput]) &#123;</span><br><span class="line">                [self.session addInput:newInput];</span><br><span class="line">                self.input = newInput;</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                [self.session addInput:self.input];</span><br><span class="line">            &#125;</span><br><span class="line">            [self.session commitConfiguration];</span><br><span class="line">            </span><br><span class="line">        &#125; else if (error) &#123;</span><br><span class="line">            NSLog(@&quot;toggle carema failed, error = %@&quot;, error);</span><br><span class="line">        &#125;</span><br><span class="line">        //[self.session startRunning];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">- (AVCaptureDevice *)cameraWithPosition:(AVCaptureDevicePosition)position&#123;</span><br><span class="line">    NSArray *devices = [AVCaptureDevice devicesWithMediaType:AVMediaTypeVideo];</span><br><span class="line">    for ( AVCaptureDevice *device in devices )</span><br><span class="line">        if ( device.position == position ) return device;</span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br><span class="line">-(void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag&#123;</span><br><span class="line">    self.changeButton.userInteractionEnabled = YES;</span><br><span class="line">    [self.effectView removeFromSuperview];</span><br><span class="line">    [self.imageView removeFromSuperview];</span><br><span class="line">    if (self.cameraPosition == AVCaptureDevicePositionFront) &#123;</span><br><span class="line">        self.flashButton.alpha = 0;</span><br><span class="line">    &#125;else if (self.cameraPosition == AVCaptureDevicePositionBack)&#123;</span><br><span class="line">        self.flashButton.alpha = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    [self.session startRunning];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>摄像头对焦</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - 聚焦</span><br><span class="line">- (void)focusGesture:(UITapGestureRecognizer*)gesture&#123;</span><br><span class="line">    CGPoint point = [gesture locationInView:gesture.view];</span><br><span class="line">    [self focusAtPoint:point];</span><br><span class="line">&#125;</span><br><span class="line">- (void)focusAtPoint:(CGPoint)point&#123;</span><br><span class="line">    CGSize size = self.view.bounds.size;</span><br><span class="line">    CGPoint focusPoint = CGPointMake( point.y /size.height ,1-point.x/size.width );</span><br><span class="line">    NSError *error;</span><br><span class="line">    if ([self.device lockForConfiguration:&amp;error]) &#123;</span><br><span class="line">        </span><br><span class="line">        if ([self.device isFocusModeSupported:AVCaptureFocusModeAutoFocus]) &#123;</span><br><span class="line">            [self.device setFocusPointOfInterest:focusPoint];</span><br><span class="line">            [self.device setFocusMode:AVCaptureFocusModeAutoFocus];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if ([self.device isExposureModeSupported:AVCaptureExposureModeAutoExpose ]) &#123;</span><br><span class="line">            [self.device setExposurePointOfInterest:focusPoint];</span><br><span class="line">            [self.device setExposureMode:AVCaptureExposureModeAutoExpose];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [self.device unlockForConfiguration];</span><br><span class="line">        self.focusView.center = point;</span><br><span class="line">        </span><br><span class="line">        //[self startFocusAnimation];</span><br><span class="line">        self.focusView.alpha = 1;</span><br><span class="line">        [UIView animateWithDuration:0.2 animations:^&#123;</span><br><span class="line">            self.focusView.transform = CGAffineTransformMakeScale(1.25f, 1.25f);</span><br><span class="line">        &#125; completion:^(BOOL finished) &#123;</span><br><span class="line">            [UIView animateWithDuration:0.3 animations:^&#123;</span><br><span class="line">                self.focusView.transform = CGAffineTransformMakeScale(1.0f, 1.0f);</span><br><span class="line">            &#125; completion:^(BOOL finished) &#123;</span><br><span class="line">                [self hiddenFocusAnimation];</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="主要功能按钮-拍照按钮"><a href="#主要功能按钮-拍照按钮" class="headerlink" title="主要功能按钮 拍照按钮"></a>主要功能按钮 拍照按钮</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - 拍照</span><br><span class="line">- (void)shutterCamera</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    AVCaptureConnection * videoConnection = [self.ImageOutPut connectionWithMediaType:AVMediaTypeVideo];</span><br><span class="line">    if (!videoConnection) &#123;</span><br><span class="line">        NSLog(@&quot;take photo failed!&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [self.ImageOutPut captureStillImageAsynchronouslyFromConnection:videoConnection completionHandler:^(CMSampleBufferRef imageDataSampleBuffer, NSError *error) &#123;</span><br><span class="line">        if (imageDataSampleBuffer == NULL) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        NSData * imageData = [AVCaptureStillImageOutput jpegStillImageNSDataRepresentation:imageDataSampleBuffer];</span><br><span class="line">        self.image = [UIImage imageWithData:imageData];</span><br><span class="line">        self.imageDict = @&#123;@&quot;image&quot;:self.image,@&quot;info&quot;:@&#123;@&quot;PHImageFileUTIKey&quot;:@&quot;.jpeg&quot;&#125;&#125;;</span><br><span class="line">        [self.session stopRunning];</span><br><span class="line">        //[self.view insertSubview:self.imageView belowSubview:self.PhotoButton];</span><br><span class="line">        [self.view insertSubview:self.imageView aboveSubview:self.topView];</span><br><span class="line">        NSLog(@&quot;image size = %@&quot;,NSStringFromCGSize(self.image.size));</span><br><span class="line">        self.topView.alpha = 0;</span><br><span class="line">        self.PhotoButton.alpha = 0;</span><br><span class="line">        self.reCamButton.alpha = 1;</span><br><span class="line">        self.selectButton.alpha = 1;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li> 保存至相册</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#pragma - 保存至相册</span><br><span class="line">- (void)saveImageToPhotoAlbum:(UIImage*)savedImage</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    UIImageWriteToSavedPhotosAlbum(savedImage, self, @selector(image:didFinishSavingWithError:contextInfo:), NULL);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">// 指定回调方法</span><br><span class="line"></span><br><span class="line">- (void)image: (UIImage *) image didFinishSavingWithError: (NSError *) error contextInfo: (void *) contextInfo&#123;</span><br><span class="line">    if(error != NULL)&#123;</span><br><span class="line">        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;保存图片结果提示&quot;</span><br><span class="line">                                                        message:@&quot;保存图片失败&quot;</span><br><span class="line">                                                       delegate:self</span><br><span class="line">                                              cancelButtonTitle:@&quot;确定&quot;</span><br><span class="line">                                              otherButtonTitles:nil];</span><br><span class="line">        [alert show];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>取消 返回上级</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - 取消 返回上级</span><br><span class="line">-(void)cancle&#123;</span><br><span class="line">    [self.imageView removeFromSuperview];</span><br><span class="line">    [self.session stopRunning];</span><br><span class="line">    [self.navigationController popViewControllerAnimated:YES];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex&#123;</span><br><span class="line">    if (buttonIndex == 0 &amp;&amp; alertView.tag == 100) &#123;</span><br><span class="line">        </span><br><span class="line">        NSURL * url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];</span><br><span class="line">        </span><br><span class="line">        if([[UIApplication sharedApplication] canOpenURL:url]) &#123;</span><br><span class="line">            </span><br><span class="line">            [[UIApplication sharedApplication] openURL:url];</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重新拍照</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - 重新拍照</span><br><span class="line">- (void)reCam&#123;</span><br><span class="line">    self.imageView.image = nil;</span><br><span class="line">    [self.imageView removeFromSuperview];</span><br><span class="line">    [self.session startRunning];</span><br><span class="line">    self.topView.alpha = 1;</span><br><span class="line">    self.PhotoButton.alpha = 1;</span><br><span class="line">    self.reCamButton.alpha = 0;</span><br><span class="line">    self.selectButton.alpha = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>选择照片 返回上级</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - 选择照片 返回上级</span><br><span class="line">- (void)selectImage&#123;</span><br><span class="line">    [self saveImageToPhotoAlbum:self.image];</span><br><span class="line">    self.imageblock(self.image);</span><br><span class="line">    [self.navigationController popViewControllerAnimated:YES];</span><br><span class="line">&#125;</span><br><span class="line">-(void)viewDidDisappear:(BOOL)animated&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)focusDidFinsh&#123;</span><br><span class="line">    self.focusView.hidden = YES;</span><br><span class="line">    self.focusView.transform = CGAffineTransformMakeScale(1.0f, 1.0f);</span><br><span class="line">    //self.focusView.transform=CGAffineTransformMakeScale(0.7f, 0.7f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="对焦框动画"><a href="#对焦框动画" class="headerlink" title="对焦框动画"></a>对焦框动画</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">- (void)startFocusAnimation&#123;</span><br><span class="line">    self.focusView.hidden = NO;</span><br><span class="line">    self.focusView.transform = CGAffineTransformMakeScale(1.25f, 1.25f);//将要显示的view按照正常比例显示出来</span><br><span class="line">    [UIView beginAnimations:nil context:UIGraphicsGetCurrentContext()];</span><br><span class="line">    //[UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];  //InOut 表示进入和出去时都启动动画</span><br><span class="line">    //[UIView setAnimationWillStartSelector:@selector(hiddenFoucsView)];</span><br><span class="line">    [UIView setAnimationDidStopSelector:@selector(hiddenFocusAnimation)];</span><br><span class="line">    [UIView setAnimationDuration:0.5f];//动画时间</span><br><span class="line">    self.focusView.transform = CGAffineTransformIdentity;//先让要显示的view最小直至消失</span><br><span class="line">    [UIView commitAnimations]; //启动动画</span><br><span class="line">    //相反如果想要从小到大的显示效果，则将比例调换</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">- (void)hiddenFocusAnimation&#123;</span><br><span class="line">    [UIView beginAnimations:nil context:UIGraphicsGetCurrentContext()];</span><br><span class="line">    //NSDate *DATE = [NSDate date];</span><br><span class="line">    //[UIView setAnimationStartDate:[NSDate date]];</span><br><span class="line">    [UIView setAnimationDelay:3];</span><br><span class="line">    self.focusView.alpha = 0;</span><br><span class="line">    [UIView setAnimationDuration:0.5f];//动画时间</span><br><span class="line">    [UIView commitAnimations];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">- (void)hiddenFoucsView&#123;</span><br><span class="line">    self.focusView.alpha = !self.focusView.alpha;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20161119182623474" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20161119182645365" alt="这里写图片描述"></p><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><ul><li> 第一次自定义一个相机，代码写的可能不太好理解。</li><li>这个项目在码云的git库上有，地址为<a href="https://git.oschina.net/LiynXu/PhotoDemo.git%E3%80%82">https://git.oschina.net/LiynXu/PhotoDemo.git。</a> </li><li>如果有任何意见或者建议，或者发现bug(应该是有的),请移步值git库下给予指导，3Q。</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS--自定义多选相册</title>
      <link href="/2017/08/18/ios-custom-ablum/"/>
      <url>/2017/08/18/ios-custom-ablum/</url>
      
        <content type="html"><![CDATA[<h4 id="自定义多选相册"><a href="#自定义多选相册" class="headerlink" title="自定义多选相册"></a><strong>自定义多选相册</strong></h4><p>一个项目需要类似于安卓的多选相册，而iOS自带的Piker只能单选，所以就想到了自定义，自定义的过程是辛苦的，结果出来之后是高兴的。</p> <span id="more"></span><h5 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h5><p>本代码只展示了iOS默认的相册内容，如果读者有其他想法的欢迎再本代码基础上修改。</p><h5 id="获取系统默认的相册"><a href="#获取系统默认的相册" class="headerlink" title="获取系统默认的相册"></a>获取系统默认的相册</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-(PHFetchResult *)smartAlbums&#123;</span><br><span class="line">    </span><br><span class="line">    if (_smartAlbums == nil) &#123;</span><br><span class="line">        _smartAlbums = [PHAssetCollection fetchAssetCollectionsWithType:PHAssetCollectionTypeSmartAlbum subtype:PHAssetCollectionSubtypeSmartAlbumUserLibrary options:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    return _smartAlbums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取系统相册中的相片"><a href="#获取系统相册中的相片" class="headerlink" title="获取系统相册中的相片"></a>获取系统相册中的相片</h5><p>默认的照片排序是时间先后顺序，这里我也规定了按照文件创建的先后顺序来排序呢，为了避免同时引用过多的image导致内存暴增，这里使用的都是缩略图，而且只允许引用前20项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">- (void)initPhotoData&#123;</span><br><span class="line">    [self.photoArray removeAllObjects];</span><br><span class="line">    __weak typeof(self) weakSelf = self;</span><br><span class="line">    for (PHCollection * obj in self.smartAlbums) &#123;</span><br><span class="line">        if ([obj isKindOfClass:[PHAssetCollection class]]) &#123;</span><br><span class="line">            PHAssetCollection *collection = (PHAssetCollection *)obj;</span><br><span class="line">            PHFetchOptions *options = [[PHFetchOptions alloc] init];</span><br><span class="line">            options.sortDescriptors = @[[NSSortDescriptor sortDescriptorWithKey:@&quot;creationDate&quot; ascending:NO]];</span><br><span class="line">            PHFetchResult *fetchReuslt  = [PHAsset fetchAssetsInAssetCollection:collection options:options];</span><br><span class="line">            NSLog(@&quot;count - %ld&quot;,(unsigned long)fetchReuslt.count);</span><br><span class="line">            if (fetchReuslt.count == 0) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            NSInteger count = 20&lt;fetchReuslt.count?20:fetchReuslt.count;</span><br><span class="line">            __block NSInteger _index = 0;</span><br><span class="line">            for (NSInteger i = 0 ;i&lt;count;i++) &#123;</span><br><span class="line">                PHAsset *asset  = fetchReuslt[i];</span><br><span class="line">                //使用PHImageManager从PHAsset中请求图片</span><br><span class="line">                NSInteger index = _index;</span><br><span class="line">                MyImageManager *imageManager = [MyImageManager defaultManager];</span><br><span class="line">                [imageManager requestImageForAsset:asset targetSize:CGSizeMake(ItemWidth()*2-2, ItemHieght()*2-2) contentMode:PHImageContentModeAspectFill options:self.requestOption Index:index resultHandler:^(UIImage *result, NSDictionary *info, NSInteger index) &#123;</span><br><span class="line">                    NSInteger IDKey = [info[@&quot;PHImageResultRequestIDKey&quot;] integerValue];</span><br><span class="line">                    NSLog(@&quot;%@,%ld,%ld,%ld&quot;,result,(long)IDKey,index,IDKey-index);</span><br><span class="line">                    [weakSelf.photoArray addObject:result];</span><br><span class="line">                &#125;];</span><br><span class="line">                _index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            NSLog(@&quot;NO&quot;);</span><br><span class="line">            NSAssert1(NO, @&quot;Fetch Collect Not PHCollection:%@&quot;, obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    NSLog(@&quot;initPhotoDataDone&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="将获取到的缩略图展示到CollectionView上"><a href="#将获取到的缩略图展示到CollectionView上" class="headerlink" title="将获取到的缩略图展示到CollectionView上"></a>将获取到的缩略图展示到CollectionView上</h5><p><img src="http://img.blog.csdn.net/20161119181658290" alt="具体的演示效果就是这样"></p><ul><li>这个项目在码云的git库上有，地址为<a href="https://git.oschina.net/LiynXu/PhotoDemo.git%E3%80%82">https://git.oschina.net/LiynXu/PhotoDemo.git。</a></li><li>如果有任何意见或者建议，或者发现bug(应该是有的),请移步值git库下给予指导，3Q。</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS--实例化对象转换为JSON数据</title>
      <link href="/2017/08/18/ios-custom-object-to-json-runtime/"/>
      <url>/2017/08/18/ios-custom-object-to-json-runtime/</url>
      
        <content type="html"><![CDATA[<h3 id="如何将自定义类的实例化对象转换为JSON数据"><a href="#如何将自定义类的实例化对象转换为JSON数据" class="headerlink" title="如何将自定义类的实例化对象转换为JSON数据"></a>如何将自定义类的实例化对象转换为JSON数据</h3><p>  我所用的方法是通过Runtime的相关方法，先后两步来实现的。具体往下看：<br>  <span id="more"></span></p><h4 id="新建一个类命名为《UserClass》"><a href="#新建一个类命名为《UserClass》" class="headerlink" title="新建一个类命名为《UserClass》"></a>新建一个类命名为《UserClass》</h4><ul><li>展示.h文件UserClass.h</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//  UserClass.h</span><br><span class="line">//  MyPickerView</span><br><span class="line">//  Created by LiynXu on 16/3/7.</span><br><span class="line">//  Copyright © 2016年 LiynXu. All rights reserved.</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">@interface UserClass : NSObject</span><br><span class="line">@property (nonatomic,strong) NSString *name;</span><br><span class="line">@property (nonatomic,strong) NSString *password;</span><br><span class="line">@property (nonatomic,assign) NSInteger age;</span><br><span class="line">@property (nonatomic,strong) NSString *sex;</span><br><span class="line">- (instancetype)initWithName:(NSString *)name Password:(NSString *)password;</span><br><span class="line">- (NSDictionary *)convertToDictWithObject:(NSObject *)object;//主要使用这个方法得到一个字典</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>由上面的头文件可以看出我所建立的类有4个属性：name，password，age，sex。<br>并且包含一个初始化方法，和对象转字典的方法(了解过Runtime，所以知道了Runtime可以在运行时某个对象的所有属性，以及属性的相关值)</p><h4 id="具体实现方法"><a href="#具体实现方法" class="headerlink" title="具体实现方法"></a>具体实现方法</h4><ul><li>第一步将自定义类的实例化对象转为字典，这一步需要结合Runtime进行，所以我们需要做一个操作就是导入一个头文件</li><li>#import &lt;objc/runtime.h&gt;//当前需要使用使用运行时库</li></ul><p>第二步使用第一部得到的字典转为JSON数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//  UserClass.m</span><br><span class="line">//  MyPickerView</span><br><span class="line">//  Created by LiynXu on 16/3/7.</span><br><span class="line">//  Copyright © 2016年 LiynXu. All rights reserved.</span><br><span class="line"></span><br><span class="line">#import &quot;UserClass.h&quot;</span><br><span class="line">#import &lt;objc/runtime.h&gt;//当前需要使用使用运行时库</span><br><span class="line"></span><br><span class="line">@implementation UserClass</span><br><span class="line">-(instancetype)initWithName:(NSString *)name Password:(NSString *)password&#123;</span><br><span class="line">    self= [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        _name = name;</span><br><span class="line">        _password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的主要是一个初始化方法，重要的是下面，下面，下面！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (NSDictionary *)convertToDictWithObject:(NSObject *)object&#123;//获取当前对象的所有属性以及属性的值</span><br><span class="line">    NSMutableDictionary *Dict = [NSMutableDictionary dictionary];</span><br><span class="line">    unsigned int outCount, i;</span><br><span class="line">    objc_property_t *properties = class_copyPropertyList([object class], &amp;outCount);</span><br><span class="line">    //获取所有属性以及属性的值,并且转换为一个字典</span><br><span class="line">    for (i = 0; i&lt;outCount; i++)&#123;</span><br><span class="line">        objc_property_t property = properties[i];</span><br><span class="line">        const char* char_f =property_getName(property);</span><br><span class="line">        NSString *propertyName = [NSString stringWithUTF8String:char_f];</span><br><span class="line">        id propertyValue = [self valueForKey:(NSString *)propertyName];</span><br><span class="line">        if (propertyValue) [Dict setObject:propertyValue forKey:propertyName];</span><br><span class="line">    &#125;</span><br><span class="line">    free(properties);</span><br><span class="line">    return Dict;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>程序入口main.m  包含具体示例代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  main.m</span><br><span class="line">//  JsonCode</span><br><span class="line">//</span><br><span class="line">//  Created by LiynXu on 16/3/7.</span><br><span class="line">//  Copyright © 2016年 LiynXu. All rights reserved.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;UserClass.h&quot;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        UserClass *user = [[UserClass alloc] initWithName:@&quot;name&quot; Password:@&quot;password&quot;];</span><br><span class="line">        NSDictionary *codeDict = [user convertToDictWithObject:user];//对象转字典，</span><br><span class="line">        NSLog(@&quot;%@&quot;,codeDict);</span><br><span class="line">        NSData *jsonData = [NSJSONSerialization dataWithJSONObject:codeDict options:NSJSONWritingPrettyPrinted error:nil];//字典转json  code</span><br><span class="line">        NSLog(@&quot;%@&quot;,jsonData);</span><br><span class="line">        NSFileManager *fileManager = [NSFileManager defaultManager];</span><br><span class="line">        NSString *path = [NSString stringWithFormat:@&quot;%@/Document/jsonData.json&quot;,NSHomeDirectory()];</span><br><span class="line">        BOOL res=[fileManager createFileAtPath:path contents:nil attributes:nil];</span><br><span class="line">        if (res) &#123;</span><br><span class="line">            NSLog(@&quot;文件创建成功: %@&quot; ,path);</span><br><span class="line">        &#125;else</span><br><span class="line">            NSLog(@&quot;文件创建失败: %@&quot; ,path);</span><br><span class="line">        NSString *jsonStrong = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding]; //json转字符串</span><br><span class="line">        NSLog(@&quot;%@&quot;,jsonStrong);</span><br><span class="line">        NSDictionary *decodeDict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingMutableContainers error:nil]; //json Decode</span><br><span class="line">        NSLog(@&quot;%@&quot;,decodeDict);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取iOS设备型号，目前所有iOS设备</title>
      <link href="/2017/08/18/ios-get-ios-device-model/"/>
      <url>/2017/08/18/ios-get-ios-device-model/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>获取iOS设备型号，目前所有iOS设备皆可识别<br> <span id="more"></span><br>下面是.h文件 声明这个返回值为NSString的类方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//  GetDeviceModel.h</span><br><span class="line">//  Created by LiynXu on 15/11/10.</span><br><span class="line">//  Copyright © 2015年 LiynXu. All rights reserved.</span><br><span class="line">//  xxl652170427@163.com</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface GetDeviceModel : NSObject</span><br><span class="line">/*</span><br><span class="line"> 获取设备描述</span><br><span class="line"> */</span><br><span class="line">+ (NSString *)getCurrentDeviceModelDescription;</span><br><span class="line">/*</span><br><span class="line"> 由获取到的设备描述，来匹配设备型号</span><br><span class="line"> */</span><br><span class="line">+ (NSString *)getCurrentDeviceModel;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>返回值为NSString的类方法</p><p> 获取设备描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+ (NSString *)getCurrentDeviceModelDescription&#123;</span><br><span class="line">    int mib[2];</span><br><span class="line">    size_t len;</span><br><span class="line">    char *machine;</span><br><span class="line">    </span><br><span class="line">    mib[0] = CTL_HW;</span><br><span class="line">    mib[1] = HW_MACHINE;</span><br><span class="line">    sysctl(mib, 2, NULL, &amp;len, NULL, 0);</span><br><span class="line">    machine = malloc(len);</span><br><span class="line">    sysctl(mib, 2, machine, &amp;len, NULL, 0);</span><br><span class="line">    </span><br><span class="line">    NSString *platform = [NSString stringWithCString:machine encoding:NSASCIIStringEncoding];</span><br><span class="line">    free(machine);</span><br><span class="line">    return platform;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由获取到的设备描述，来匹配设备型号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">+ (NSString *)getCurrentDeviceModel&#123;</span><br><span class="line">    </span><br><span class="line">    NSString *platform = [GetDeviceModel getCurrentDeviceModelDescription];</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone1,1&quot;]) return @&quot;iPhone 2G&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone1,2&quot;]) return @&quot;iPhone 3G&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone2,1&quot;]) return @&quot;iPhone 3GS&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone3,1&quot;]) return @&quot;iPhone 4&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone3,2&quot;]) return @&quot;iPhone 4&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone3,3&quot;]) return @&quot;iPhone 4&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone4,1&quot;]) return @&quot;iPhone 4S&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone5,1&quot;]) return @&quot;iPhone 5&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone5,2&quot;]) return @&quot;iPhone 5&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone5,3&quot;]) return @&quot;iPhone 5c&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone5,4&quot;]) return @&quot;iPhone 5c&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone6,1&quot;]) return @&quot;iPhone 5s&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone6,2&quot;]) return @&quot;iPhone 5s&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone7,1&quot;]) return @&quot;iPhone 6 Plus&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone7,2&quot;]) return @&quot;iPhone 6&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone8,1&quot;]) return @&quot;iPhone 6S&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone8,2&quot;]) return @&quot;iPhone 6S Plus&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone9,1&quot;]) return @&quot;iPhone 7 A1660&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone9,2&quot;]) return @&quot;iPhone 7 Plus A1661&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone9,3&quot;]) return @&quot;iPhone 7 A1778&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPhone9,4&quot;]) return @&quot;iPhone 7 Plus A1784&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPod1,1&quot;])   return @&quot;iPod Touch 1G&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPod2,1&quot;])   return @&quot;iPod Touch 2G&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPod3,1&quot;])   return @&quot;iPod Touch 3G&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPod4,1&quot;])   return @&quot;iPod Touch 4G&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPod5,1&quot;])   return @&quot;iPod Touch 5G&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad1,1&quot;])   return @&quot;iPad 1G&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad2,1&quot;])   return @&quot;iPad 2&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad2,2&quot;])   return @&quot;iPad 2&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad2,3&quot;])   return @&quot;iPad 2&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad2,4&quot;])   return @&quot;iPad 2&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad2,5&quot;])   return @&quot;iPad Mini 1G&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad2,6&quot;])   return @&quot;iPad Mini 1G&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad2,7&quot;])   return @&quot;iPad Mini 1G&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad3,1&quot;])   return @&quot;iPad 3&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad3,2&quot;])   return @&quot;iPad 3&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad3,3&quot;])   return @&quot;iPad 3&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad3,4&quot;])   return @&quot;iPad 4&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad3,5&quot;])   return @&quot;iPad 4&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad3,6&quot;])   return @&quot;iPad 4&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad4,1&quot;])   return @&quot;iPad Air&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad4,2&quot;])   return @&quot;iPad Air&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad4,3&quot;])   return @&quot;iPad Air&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad4,4&quot;])   return @&quot;iPad Mini 2G &quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad4,5&quot;])   return @&quot;iPad Mini 2G &quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad4,6&quot;])   return @&quot;iPad Mini 2G &quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad4,7&quot;])   return @&quot;iPad Mini 3 &quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad4,8&quot;])   return @&quot;iPad Mini 3 &quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad4,9&quot;])   return @&quot;iPad Mini 3 &quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad5,1&quot;])   return @&quot;iPad Mini 4 WiFi  &quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad5,2&quot;])   return @&quot;iPad Mini 4 WiFi+Cellular &quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad5,3&quot;])   return @&quot;iPad Air2 &quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad5,4&quot;])   return @&quot;iPad Air2 &quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad6,7&quot;])   return @&quot;iPad Pro WiFi 12.7-inch&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad6,8&quot;])   return @&quot;iPad Pro WiFi+Cellular 12.7-inch&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad6,3&quot;])   return @&quot;iPad Pro WiFi 9.7-inch&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;iPad6,4&quot;])   return @&quot;iPad Pro WiFi+Cellular 9.7-inch&quot;;</span><br><span class="line">    </span><br><span class="line">    if ([platform isEqualToString:@&quot;i386&quot;])      return @&quot;iPhone Simulator&quot;;</span><br><span class="line">    if ([platform isEqualToString:@&quot;x86_64&quot;])    return @&quot;iPhone Simulator&quot;;</span><br><span class="line">    return platform;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何使用<br>首先在.m文件中导入以下两个头文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;GetDeviceModel.h&quot;</span><br><span class="line">#import &lt;sys/sysctl.h&gt;</span><br></pre></td></tr></table></figure><p>然后在需要获取设备型号地方这样写,用一个NSString类型的对象接收</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSString *string = [GetDeviceModel getCurrentDeviceModel];</span><br><span class="line">NSLog(@&quot;设备型号:%@&quot;,string);</span><br></pre></td></tr></table></figure><p>也可以给当前app的AppDelegate添加一个DeviceModel属性,一下是AppDelegate的.h文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line"></span><br><span class="line">@interface AppDelegate : UIResponder &lt;UIApplicationDelegate&gt;</span><br><span class="line"></span><br><span class="line">@property (strong, nonatomic) UIWindow *window;</span><br><span class="line">@property (nonatomic,copy) NSString *DeviceModel;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>然后直接想下面这样用就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.DeviceModel = [GetDeviceModel getCurrentDeviceModel];</span><br></pre></td></tr></table></figure><p>完整代码演示：<a href="https://git.oschina.net/LiynXu/GetDeviceModel.git">https://git.oschina.net/LiynXu/GetDeviceModel.git</a> 欢迎访问！<br>效果展示：<br><img src="http://img.blog.csdn.net/20161230172536880?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvWnVvV2VpWGlhb0R1WnVvWnVv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS HealthKit简单介绍</title>
      <link href="/2017/08/18/ios-healthkit/"/>
      <url>/2017/08/18/ios-healthkit/</url>
      
        <content type="html"><![CDATA[<h2 id="HealthKit简单介绍"><a href="#HealthKit简单介绍" class="headerlink" title="HealthKit简单介绍"></a>HealthKit简单介绍</h2><p>目前很多App都会有访问健康数据的需求，那么我们就不得不使用HealthKit。HealthKit框架提供了一个结构，应用可以使用它来分享健康和健身数据。HealthKit管理从不同来源获得的数据，并根据用户的偏好设置，自动将不同来源的所有数据合并起来。应用还可以获取每个来源的原始数据，然后执行自己的数据合并。<br> <span id="more"></span></p><h2 id="如何在项目中集成HealthKit"><a href="#如何在项目中集成HealthKit" class="headerlink" title="如何在项目中集成HealthKit"></a>如何在项目中集成HealthKit</h2><p>这一个部分我们将一步一步的在项目中集成HealthKit。</p><h3 id="第一步添加HealthKit"><a href="#第一步添加HealthKit" class="headerlink" title="第一步添加HealthKit"></a>第一步添加HealthKit</h3><p>1、进入项目设置–&gt;Capabilities–&gt;HealthKit，然后如下图打开就可以了，如果下面几个选项前都打上了勾的话，那么就代表OK了，一般也不会出现X。<br><img src="http://img.blog.csdn.net/20170303223122622?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvWnVvV2VpWGlhb0R1WnVvWnVv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>2、如果上面的步骤完成了的话那么在工程目录下会多一个文件，这个文件以工程名命名，后缀名为entitlements，如下图：<br><img src="http://img.blog.csdn.net/20170303223928022?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvWnVvV2VpWGlhb0R1WnVvWnVv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>3、并且在Frameworks目录下会多一个HealthKit.framework文件：<br><img src="http://img.blog.csdn.net/20170303225753734?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvWnVvV2VpWGlhb0R1WnVvWnVv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="项目中的使用"><a href="#项目中的使用" class="headerlink" title="项目中的使用"></a>项目中的使用</h3><p>首先要在需要访问健康数据的地方，使用import导入HealthKit头文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;HealthKit/HealthKit.h&gt;</span><br></pre></td></tr></table></figure><p>然后写一个属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, strong) HKHealthStore *healthStore;</span><br></pre></td></tr></table></figure><p>1、这一步为你的应用实例化一个 HKHealthStore 对象。每个应用只需要一个HealthKit存储实例。这个存储实例就是你和HealthKit数据库交互的主要接口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.healthStore = [[HKHealthStore alloc] init];</span><br></pre></td></tr></table></figure><p>2、 调用 isHealthDataAvailable 方法来查看HealthKit在该设备上是否可用。HealthKit在iPad上不可用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ([HKHealthStore isHealthDataAvailable]) &#123;</span><br><span class="line">        NSLog(@&quot;HealthDataAvailable&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3、在项目中具体代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//创建想要获取的数据类型</span><br><span class="line">    HKObjectType *stepCpunt = [HKObjectType quantityTypeForIdentifier:HKQuantityTypeIdentifierStepCount];//步数</span><br><span class="line">    HKObjectType *Height = [HKObjectType quantityTypeForIdentifier:HKQuantityTypeIdentifierHeight];//身高</span><br><span class="line">    HKObjectType *BodyMass = [HKObjectType quantityTypeForIdentifier:HKQuantityTypeIdentifierBodyMass];//体重</span><br><span class="line">    HKObjectType *DistanceWalkingRunning = [HKObjectType quantityTypeForIdentifier:HKQuantityTypeIdentifierDistanceWalkingRunning];//步行+跑步距离</span><br><span class="line">    HKObjectType *DistanceCycling = [HKObjectType quantityTypeForIdentifier:HKQuantityTypeIdentifierDistanceCycling];//骑行距离</span><br><span class="line">    //一个集合，数据类型</span><br><span class="line">    NSSet *healthSet = [NSSet setWithObjects:stepCpunt,Height,BodyMass,DistanceWalkingRunning,DistanceCycling,nil];</span><br><span class="line">    //[self.healthStore requestAuthorizationToShareTypes:nil readTypes:healthSet completion:nil];</span><br><span class="line">    </span><br><span class="line">    //向系统的健康APP请求数据，并回调结果</span><br><span class="line">    [self.healthStore requestAuthorizationToShareTypes:nil readTypes:healthSet completion:^(BOOL success, NSError * _Nullable error) &#123;</span><br><span class="line">        if (success) &#123;</span><br><span class="line">            NSLog(@&quot;requestAuthorization success&quot;);</span><br><span class="line">            [self readHealthData:HKQuantityTypeIdentifierStepCount];</span><br><span class="line">            [self readHealthData:HKQuantityTypeIdentifierDistanceWalkingRunning];</span><br><span class="line">            [self readHealthData:HKQuantityTypeIdentifierDistanceCycling];</span><br><span class="line">            [self readHealthData:HKQuantityTypeIdentifierHeight];</span><br><span class="line">            [self readHealthData:HKQuantityTypeIdentifierBodyMass];</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">        NSLog(@&quot;requestAuthorization error&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体的数据获的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//查询数据</span><br><span class="line">- (void)readHealthData:(NSString* )HKQuantityTypeIdentifierType&#123;</span><br><span class="line">    //查询采样信息</span><br><span class="line">    HKSampleType *sampleType = [HKQuantityType quantityTypeForIdentifier:HKQuantityTypeIdentifierType];</span><br><span class="line">    </span><br><span class="line">    //NSSortDescriptors用来告诉healthStore怎么样将结果排序。</span><br><span class="line">    NSSortDescriptor *start = [NSSortDescriptor sortDescriptorWithKey:HKSampleSortIdentifierStartDate ascending:NO];</span><br><span class="line">    NSSortDescriptor *end = [NSSortDescriptor sortDescriptorWithKey:HKSampleSortIdentifierEndDate ascending:NO];</span><br><span class="line">    /*</span><br><span class="line">     查询的基类是HKQuery，这是一个抽象类，能够实现每一种查询目标，这里我们需要查询的步数是一个</span><br><span class="line">     HKSample类所以对应的查询类就是HKSampleQuery。</span><br><span class="line">     下面的limit参数传1表示查询最近一条数据,查询多条数据只要设置limit的参数值就可以了</span><br><span class="line">     在这里我们需要定义block里面执行哪些语句</span><br><span class="line">     */</span><br><span class="line">    HKSampleQuery *sampleQuery = [[HKSampleQuery alloc] initWithSampleType:sampleType predicate:nil limit:2 sortDescriptors:@[start,end] resultsHandler:^(HKSampleQuery * _Nonnull query, NSArray&lt;__kindof HKSample *&gt; * _Nullable results, NSError * _Nullable error) &#123;</span><br><span class="line">        //打印查询结果</span><br><span class="line">        NSLog(@&quot;resultCount = %ld result = %@&quot;,results.count,results);</span><br><span class="line">        //把结果装换成字符串类型</span><br><span class="line">        if (results.count!=0) &#123;</span><br><span class="line">        HKQuantitySample *result = results[0];</span><br><span class="line">        HKQuantity *quantity = result.quantity;</span><br><span class="line">        NSString *stepStr = (NSString *)quantity;</span><br><span class="line">        [[NSOperationQueue mainQueue] addOperationWithBlock:^&#123;</span><br><span class="line">            //查询是在多线程中进行的，如果要对UI进行刷新，要回到主线程中</span><br><span class="line">            NSLog(@&quot;最新数据：%@&quot;,stepStr);</span><br><span class="line">        &#125;];</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            NSLog(@&quot;没有健康数据&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    //执行查询</span><br><span class="line">    [self.healthStore executeQuery:sampleQuery];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>在这里</p><p><img src="http://img.blog.csdn.net/20170306144520400?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvWnVvV2VpWGlhb0R1WnVvWnVv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS--日志本地化/日志重定向</title>
      <link href="/2017/08/18/ios-ri-zhi-ben-di-hua-ri-zhi-chong-ding-xiang/"/>
      <url>/2017/08/18/ios-ri-zhi-ben-di-hua-ri-zhi-chong-ding-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a><strong>写在前面</strong></h2><p>本文主要是给读者分享技术的，如何保存能控制台输出的log，以便于查找程序本身出现的问题。<br>##<strong>我们该如何做</strong></p><h3 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h3><p>我们要判断，是不是模拟器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#if !(TARGET_IPHONE_SIMULATOR)//真机</span><br><span class="line">    //连接xcode时可以从监视器中看日志 没连接时Log日志会输出到文件中，</span><br><span class="line">    [self redirectNSLogToDocumentFolder];</span><br><span class="line">    NSLog(@&quot;真机&quot;);</span><br><span class="line">#else//模拟器</span><br><span class="line">    NSLog(@&quot;模拟器&quot;);</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h3 id="其次"><a href="#其次" class="headerlink" title="其次"></a>其次</h3><p>我们还要接着判断是不是真机连接了Xcode，然后才开始进行日志本地化文件的生成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">- (void)redirectNSLogToDocumentFolder&#123;</span><br><span class="line">    //如果已经连接Xcode调试则不输出到文件</span><br><span class="line">    if(isatty(STDOUT_FILENO)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    UIDevice *device = [UIDevice currentDevice];</span><br><span class="line">    if([[device model] hasSuffix:@&quot;Simulator&quot;])&#123; //在模拟器不保存到文件中</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //将NSlog打印信息保存到Document目录下的Log文件夹下</span><br><span class="line">    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);</span><br><span class="line">    NSString *logDirectory = [[paths objectAtIndex:0] stringByAppendingPathComponent:@&quot;Log&quot;];</span><br><span class="line">    </span><br><span class="line">    NSFileManager *fileManager = [NSFileManager defaultManager];</span><br><span class="line">    BOOL fileExists = [fileManager fileExistsAtPath:logDirectory];</span><br><span class="line">    if (!fileExists) &#123;</span><br><span class="line">        [fileManager createDirectoryAtPath:logDirectory  withIntermediateDirectories:YES attributes:nil error:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];</span><br><span class="line">    [formatter setLocale:[[NSLocale alloc] initWithLocaleIdentifier:@&quot;zh_CN&quot;]];</span><br><span class="line">    [formatter setDateFormat:@&quot;yyyy-MM-dd HH:mm:ss&quot;]; //每次启动后都保存一个新的日志文件中</span><br><span class="line">    NSString *dateStr = [formatter stringFromDate:[NSDate date]];</span><br><span class="line">    self.filepath = [logDirectory stringByAppendingFormat:@&quot;/%@.log&quot;,dateStr];</span><br><span class="line">    </span><br><span class="line">    // 将log输入到文件</span><br><span class="line">    freopen([self.filepath cStringUsingEncoding:NSASCIIStringEncoding], &quot;a+&quot;, stdout);</span><br><span class="line">    freopen([self.filepath cStringUsingEncoding:NSASCIIStringEncoding], &quot;a+&quot;, stderr);</span><br><span class="line">    </span><br><span class="line">    //未捕获的Objective-C异常日志</span><br><span class="line">    NSSetUncaughtExceptionHandler (&amp;UncaughtExceptionHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>这是一个报错的异常信息，也就是我们所说的崩溃信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">void UncaughtExceptionHandler(NSException* exception)</span><br><span class="line">&#123;</span><br><span class="line">    NSString* name = [ exception name ];</span><br><span class="line">    NSString* reason = [ exception reason ];</span><br><span class="line">    NSArray* symbols = [ exception callStackSymbols ]; // 异常发生时的调用栈</span><br><span class="line">    NSMutableString* strSymbols = [ [ NSMutableString alloc ] init ]; //将调用栈拼成输出日志的字符串</span><br><span class="line">    for ( NSString* item in symbols )</span><br><span class="line">    &#123;</span><br><span class="line">        [ strSymbols appendString: item ];</span><br><span class="line">        [ strSymbols appendString: @&quot;\r\n&quot; ];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //将crash日志保存到Document目录下的Log文件夹下</span><br><span class="line">    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);</span><br><span class="line">    NSString *logDirectory = [[paths objectAtIndex:0] stringByAppendingPathComponent:@&quot;Log&quot;];</span><br><span class="line">    </span><br><span class="line">    NSFileManager *fileManager = [NSFileManager defaultManager];</span><br><span class="line">    if (![fileManager fileExistsAtPath:logDirectory]) &#123;</span><br><span class="line">        [fileManager createDirectoryAtPath:logDirectory  withIntermediateDirectories:YES attributes:nil error:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //NSString *logFilePath = [logDirectory stringByAppendingPathComponent:@&quot;UncaughtException.log&quot;];</span><br><span class="line">    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];</span><br><span class="line">    [formatter setLocale:[[NSLocale alloc] initWithLocaleIdentifier:@&quot;zh_CN&quot;]];</span><br><span class="line">    [formatter setDateFormat:@&quot;yyyy-MM-dd HH:mm:ss&quot;];</span><br><span class="line">    </span><br><span class="line">    AppDelegate *app = [UIApplication sharedApplication].delegate;</span><br><span class="line">    NSString *dateStr = [formatter stringFromDate:app.date];</span><br><span class="line">    </span><br><span class="line">    NSString *crashString = [NSString stringWithFormat:@&quot;&lt;- %@ -&gt;[ Uncaught Exception ]\r\nName: %@, Reason: %@\r\n[ Fe Symbols Start ]\r\n%@[ Fe Symbols End ]\r\n\r\n&quot;, dateStr, name, reason, strSymbols];</span><br><span class="line">    //把错误日志写到文件中</span><br><span class="line">    if (![fileManager fileExistsAtPath:app.filepath]) &#123;</span><br><span class="line">        [crashString writeToFile:app.filepath atomically:YES encoding:NSUTF8StringEncoding error:nil];</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        NSFileHandle *outFile = [NSFileHandle fileHandleForWritingAtPath:app.filepath];</span><br><span class="line">        [outFile seekToEndOfFile];</span><br><span class="line">        [outFile writeData:[crashString dataUsingEncoding:NSUTF8StringEncoding]];</span><br><span class="line">        [outFile closeFile];</span><br><span class="line">    &#125;</span><br><span class="line">    //把错误日志发送到邮箱</span><br><span class="line">    NSString *urlStr = [NSString stringWithFormat:@&quot;mailto://邮箱账号?subject=bug报告&amp;body=感谢您的配合!错误详情:%@&quot;,crashString ];</span><br><span class="line">    NSURL *url = [NSURL URLWithString:[urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];</span><br><span class="line">    [[UIApplication sharedApplication] openURL:url];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在AppDelegate的这个方法中编写如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class="line">#if !(TARGET_IPHONE_SIMULATOR)//真机</span><br><span class="line">    //连接xcode时可以从监视器中看日志 没连接时Log日志会输出到文件中，</span><br><span class="line">    [self redirectNSLogToDocumentFolder];</span><br><span class="line">    NSLog(@&quot;真机&quot;);</span><br><span class="line">#else//模拟器</span><br><span class="line">    NSLog(@&quot;模拟器&quot;);</span><br><span class="line">#endif</span><br><span class="line">return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解除百度网盘下载限速</title>
      <link href="/2017/08/09/release-baidunetdisk-downloading-speed-limit/"/>
      <url>/2017/08/09/release-baidunetdisk-downloading-speed-limit/</url>
      
        <content type="html"><![CDATA[<p>众所周知的百度网盘为了迫使用户花钱，对用户的下载速度做出了限制。今天我就来分享一个破解限制的好办法，这个也是网上扒来的。<br> <span id="more"></span></p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>1、下载相关资料，也就是两个文件：<a href="http://pan.baidu.com/s/1nuPgpNN">http://pan.baidu.com/s/1nuPgpNN</a></p><p>2、安装chrome浏览器</p><p>3、安装下载的Aria2GUI 1.3.7.dmg</p><p>4、安装chrome插件BaiduExporter.zip</p><p>解压这个zip文件，然后打开chrome，</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-88222a108071279b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装步骤1"></p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-6e8702b54479388c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装步骤2"></p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-aaab1c25ca4e9f57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装步骤3"></p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-3e70ff8b319a20f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装步骤4"></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>1、打开刚刚安装的Aria2GUI客户端</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-4dba49a5c0e21450.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>2、在chrome里面打开百度云网页,插件安装成功网页上就会多出一个“导出下载”的按钮</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-eb4d9ce68643c1b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><p>3、找到你要下载的文件，并且勾选文件（这里最好先把文件存入自己的网盘目录）,然后点击ARIA2 RPC下载任务就会被客户端执行</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-00af7cefab9ef166.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>4、看一下速度</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-f7664495cee555af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="牛逼了"></p><h4 id="ATTENSION！！！"><a href="#ATTENSION！！！" class="headerlink" title="ATTENSION！！！"></a>ATTENSION！！！</h4><p>本项目是MAC OS专用的，windows的目前不清楚<br>安装chrome插件之后,插件原文件就不能移动位置,更不能删除,否则插件就会失效.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS--富文本推送UIMutableUserNotificationAction</title>
      <link href="/2017/07/18/ios-uimutableusernotificationaction/"/>
      <url>/2017/07/18/ios-uimutableusernotificationaction/</url>
      
        <content type="html"><![CDATA[<p> iOS10富文本推送–UIMutableUserNotificationAction</p> <span id="more"></span><h3 id="AppDelagate文件"><a href="#AppDelagate文件" class="headerlink" title="AppDelagate文件"></a>AppDelagate文件</h3><h4 id="添加action"><a href="#添加action" class="headerlink" title="添加action"></a>添加action</h4><p>根据以下ContentExtension Info.plist文件中的配置决定category的设置，两者必须一致<br><img src="http://upload-images.jianshu.io/upload_images/1519926-7fefc908b0ad05c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ContentExtension Info.plist"></p><p>宏定义采用下列代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//推送相关设置</span><br><span class="line">#define Action_Category_Identifier_Image @&quot;Image_Category&quot; //图片类别标识符</span><br><span class="line">#define Action_Category_Identifier_Audio @&quot;Audio_Category&quot; //音频类别标识符</span><br><span class="line">#define Action_Category_Identifier_Movie @&quot;Movie_Category&quot; //视频类别标识符</span><br><span class="line">#define Action_Identifier_Image_Confirm @&quot;imageConfirmAction&quot;  //图片确认按钮</span><br><span class="line">#define Action_Identifier_Image_Concel  @&quot;imageConcelAction&quot;   //图片取消按钮</span><br><span class="line">#define Action_Identifier_Audio_Confirm @&quot;audioConfirmAction&quot;  //音频确认按钮</span><br><span class="line">#define Action_Identifier_Audio_Concel  @&quot;audioConcelAction&quot;   //音频取消按钮</span><br><span class="line">#define Action_Identifier_Movie_Confirm @&quot;movieConfirmAction&quot;  //视频确认按钮</span><br><span class="line">#define Action_Identifier_Movie_Concel  @&quot;movieConcelAction&quot;   //视频取消按钮</span><br><span class="line">#define Action_Title_Image_Confirm @&quot;查看&quot;  //图片确认按钮标题</span><br><span class="line">#define Action_Title_Image_Concel  @&quot;忽略&quot;  //图片取消按钮标题</span><br><span class="line">#define Action_Title_Audio_Confirm @&quot;查看&quot;  //音频确认按钮标题</span><br><span class="line">#define Action_Title_Audio_Concel  @&quot;忽略&quot;  //音频取消按钮标题</span><br><span class="line">#define Action_Title_Movie_Confirm @&quot;查看&quot;  //视频确认按钮标题</span><br><span class="line">#define Action_Title_Movie_Concel  @&quot;忽略&quot;  //视频取消按钮标题</span><br></pre></td></tr></table></figure><p>添加相应类别的aciton，一个类别必须对应一个category，<br>在下面这个方法里面执行,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">//添加相应类别的aciton，一个类别必须对应一个category</span><br><span class="line">- (void)addNotificationAction&#123;</span><br><span class="line">    </span><br><span class="line">    //Image_Category</span><br><span class="line">    UIMutableUserNotificationAction *imageConfirmAction = [self creatNotificationActionIdentifier:Action_Identifier_Image_Confirm</span><br><span class="line">                                                                                            title:Action_Title_Image_Confirm</span><br><span class="line">                                                                                   activationMode:UIUserNotificationActivationModeForeground];</span><br><span class="line">    imageConfirmAction.authenticationRequired = YES;</span><br><span class="line">    imageConfirmAction.destructive = YES;</span><br><span class="line">    </span><br><span class="line">    UIMutableUserNotificationAction *imageConcelAction = [self creatNotificationActionIdentifier:Action_Identifier_Image_Concel</span><br><span class="line">                                                                                           title:Action_Title_Image_Concel</span><br><span class="line">                                                                                  activationMode:UIUserNotificationActivationModeBackground];</span><br><span class="line">    UIMutableUserNotificationCategory *ImageCategory = [self creatNotificationCategoryIdentifier:Action_Category_Identifier_Image</span><br><span class="line">                                                                                      setActions:@[imageConfirmAction,imageConcelAction]</span><br><span class="line">                                                                                      forContext:UIUserNotificationActionContextDefault];</span><br><span class="line">    </span><br><span class="line">    //Audio_Category</span><br><span class="line">    UIMutableUserNotificationAction *audioConfirmAction = [self creatNotificationActionIdentifier:Action_Identifier_Audio_Confirm</span><br><span class="line">                                                                                            title:Action_Title_Audio_Confirm</span><br><span class="line">                                                                                   activationMode:UIUserNotificationActivationModeForeground];</span><br><span class="line">    audioConfirmAction.authenticationRequired = YES;</span><br><span class="line">    audioConfirmAction.destructive = YES;</span><br><span class="line">    </span><br><span class="line">    UIMutableUserNotificationAction *audioConcelAction = [self creatNotificationActionIdentifier:Action_Identifier_Audio_Concel</span><br><span class="line">                                                                                           title:Action_Title_Audio_Concel</span><br><span class="line">                                                                                  activationMode:UIUserNotificationActivationModeBackground];</span><br><span class="line">    UIMutableUserNotificationCategory *audioCategory = [self creatNotificationCategoryIdentifier:Action_Category_Identifier_Audio</span><br><span class="line">                                                                                      setActions:@[audioConfirmAction,audioConcelAction]</span><br><span class="line">                                                                                      forContext:UIUserNotificationActionContextDefault];</span><br><span class="line">    //Movie_Category</span><br><span class="line">    UIMutableUserNotificationAction *movieConfirmAction = [self creatNotificationActionIdentifier:Action_Identifier_Movie_Confirm</span><br><span class="line">                                                                                            title:Action_Title_Movie_Confirm</span><br><span class="line">                                                                                   activationMode:UIUserNotificationActivationModeForeground];</span><br><span class="line">    movieConfirmAction.authenticationRequired = YES;</span><br><span class="line">    movieConfirmAction.destructive = YES;</span><br><span class="line">    </span><br><span class="line">    UIMutableUserNotificationAction *movieConcelAction = [self creatNotificationActionIdentifier:Action_Identifier_Movie_Concel</span><br><span class="line">                                                                                           title:Action_Title_Movie_Concel</span><br><span class="line">                                                                                  activationMode:UIUserNotificationActivationModeBackground];</span><br><span class="line">    UIMutableUserNotificationCategory *movieCategory = [self creatNotificationCategoryIdentifier:Action_Category_Identifier_Movie</span><br><span class="line">                                                                                      setActions:@[movieConfirmAction,movieConcelAction]</span><br><span class="line">                                                                                      forContext:UIUserNotificationActionContextDefault];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    NSSet *categories = [NSSet setWithObjects:ImageCategory,audioCategory,movieCategory,nil];</span><br><span class="line">    UIUserNotificationType types = (UIUserNotificationTypeAlert|</span><br><span class="line">                                    UIUserNotificationTypeSound|</span><br><span class="line">                                    UIUserNotificationTypeBadge);</span><br><span class="line">    </span><br><span class="line">    UIUserNotificationSettings *settings;</span><br><span class="line">    settings = [UIUserNotificationSettings settingsForTypes:types</span><br><span class="line">                                                 categories:categories];</span><br><span class="line">    </span><br><span class="line">    [[UIApplication sharedApplication] registerUserNotificationSettings:settings]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建一个category</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//创建一个category</span><br><span class="line">- (UIMutableUserNotificationCategory*)creatNotificationCategoryIdentifier:(NSString *)identifier</span><br><span class="line">                                                               setActions:(nullable NSArray&lt;UIUserNotificationAction *&gt; *)actions</span><br><span class="line">                                                               forContext:(UIUserNotificationActionContext)context</span><br><span class="line">&#123;</span><br><span class="line">    UIMutableUserNotificationCategory *category = [[UIMutableUserNotificationCategory alloc] init];</span><br><span class="line">    category.identifier = identifier;//这组动作的唯一标示</span><br><span class="line">    [category setActions:actions forContext:context];</span><br><span class="line">    return category;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个action</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//创建一个action</span><br><span class="line">-(UIMutableUserNotificationAction *)creatNotificationActionIdentifier:(NSString *)identifier</span><br><span class="line">                                                                title:(NSString *)title</span><br><span class="line">                                                       activationMode:(UIUserNotificationActivationMode)activationMode</span><br><span class="line">&#123;</span><br><span class="line">    UIMutableUserNotificationAction *action = [[UIMutableUserNotificationAction alloc] init];  //第二按钮</span><br><span class="line">    action.identifier = identifier;</span><br><span class="line">    action.title = title;</span><br><span class="line">    action.activationMode = activationMode;</span><br><span class="line">    return action;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS--富文本推送NotificationServiceExtension</title>
      <link href="/2017/07/18/ios-notificationserviceextension/"/>
      <url>/2017/07/18/ios-notificationserviceextension/</url>
      
        <content type="html"><![CDATA[<p>添加http协议支持，没错，这里是支持http协议的，不像其他文章说的不支持<br>配置在另外基础篇文章里面有，info.plist文件里修改一下就行了</p> <span id="more"></span><p><img src="http://upload-images.jianshu.io/upload_images/1519926-892db870b6756ca8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="NotificationService info.plist"></p><h3 id="NotificationService文件"><a href="#NotificationService文件" class="headerlink" title="NotificationService文件"></a>NotificationService文件</h3><p>额外添加了一个文件管理器的字段，用来存储数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@interface NotificationService ()</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) void (^contentHandler)(UNNotificationContent *contentToDeliver);</span><br><span class="line">@property (nonatomic, strong) UNMutableNotificationContent *bestAttemptContent;</span><br><span class="line">@property (nonatomic, strong) NSFileManager *fileMgr;</span><br><span class="line">@property (nonatomic, strong) NSURLSessionDownloadTask *download;</span><br><span class="line">@property (nonatomic, strong) NSURLSession *session;</span><br><span class="line">@property (nonatomic, strong) NSDictionary *userInfo;</span><br><span class="line">@property (nonatomic, strong) NSURL *attchUrl;</span><br><span class="line">@property (nonatomic, strong) NSString *imageExtension;</span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@implementation NotificationService</span><br></pre></td></tr></table></figure><p>LazyLoad</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-(NSFileManager *)fileMgr&#123;</span><br><span class="line">    return [NSFileManager defaultManager];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网络session</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-(NSURLSession *)session&#123;</span><br><span class="line">    if (_session == nil) &#123;</span><br><span class="line">        _session = [NSURLSession sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration]];</span><br><span class="line">    &#125;</span><br><span class="line">    return _session;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下载任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-(NSURLSessionDownloadTask *)download&#123;</span><br><span class="line">    if (!_download) &#123;</span><br><span class="line">       _download = [self.session downloadTaskWithURL:self.attchUrl completionHandler:^(NSURL * _Nullable tempLocation, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123;</span><br><span class="line">            if (!error) &#123;</span><br><span class="line">                NSURL *localURL = [NSURL fileURLWithPath:[tempLocation.path stringByAppendingString:self.imageExtension]];</span><br><span class="line">                [self.fileMgr moveItemAtURL:tempLocation toURL:localURL error:&amp;error];</span><br><span class="line">                NSError *attachmentError = nil;</span><br><span class="line">                UNNotificationAttachment * attachment = [UNNotificationAttachment attachmentWithIdentifier:@&quot;photo&quot; URL:localURL options:nil error:&amp;attachmentError];</span><br><span class="line">                if (attachmentError) &#123;</span><br><span class="line">                    NSLog(@&quot;attachmentError %@&quot;,attachmentError);</span><br><span class="line">                &#125;else if (attachment)&#123;</span><br><span class="line">                    self.bestAttemptContent.attachments = @[attachment];</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                NSLog(@&quot;downloadTaskerror %@&quot;,error.localizedDescription);</span><br><span class="line">            &#125;</span><br><span class="line">            self.bestAttemptContent.categoryIdentifier = self.userInfo[@&quot;aps&quot;][@&quot;category&quot;];</span><br><span class="line">            self.contentHandler(self.bestAttemptContent);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    return _download;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收到远程通知之后，在当前方法内进行处理，并生成attchment，最终回调给系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (void)didReceiveNotificationRequest:(UNNotificationRequest *)request withContentHandler:(void (^)(UNNotificationContent * _Nonnull))contentHandler &#123;</span><br><span class="line">   self.contentHandler = contentHandler;</span><br><span class="line">    self.bestAttemptContent = [request.content mutableCopy];</span><br><span class="line">    self.resumeTime = 0;</span><br><span class="line">    self.userInfo = [request.content.userInfo copy];</span><br><span class="line">    NSString * attchUrl = self.userInfo[@&quot;image&quot;];</span><br><span class="line">    self.imageExtension = [NSString stringWithFormat:@&quot;.%@&quot;,[[attchUrl componentsSeparatedByString:@&quot;.&quot;] lastObject]];</span><br><span class="line">    if (attchUrl) &#123;</span><br><span class="line">        self.attchUrl = [NSURL URLWithString:attchUrl];</span><br><span class="line">        [self resumeSession];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>开始执行下载多媒体资源任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)resumeSession&#123;</span><br><span class="line">    [self.download resume];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>超时，异常时调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (void)serviceExtensionTimeWillExpire &#123;</span><br><span class="line">    // Called just before the extension will be terminated by the system.</span><br><span class="line">    // Use this as an opportunity to deliver your &quot;best attempt&quot; at modified content, otherwise the original push payload will be used.</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    self.contentHandler(self.bestAttemptContent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS--富文本推送NotificationContentExtension</title>
      <link href="/2017/07/18/ios-notificationcontentextension/"/>
      <url>/2017/07/18/ios-notificationcontentextension/</url>
      
        <content type="html"><![CDATA[<h3 id="NotificationContentExtension文件"><a href="#NotificationContentExtension文件" class="headerlink" title="NotificationContentExtension文件"></a>NotificationContentExtension文件</h3><p>根据以下ContentExtension Info.plist文件中的配置决定category的设置，两者必须一致：</p> <span id="more"></span><ul><li>NSExtensionPrincipalClass对应的值是你展示视图的controller（这里就是NotificationViewController）</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1519926-7fefc908b0ad05c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ContentExtension Info.plist"></p><p>宏定义采用下列代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//推送相关设置</span><br><span class="line">#define Action_Category_Identifier_Image @&quot;Image_Category&quot; //图片类别标识符</span><br><span class="line">#define Action_Category_Identifier_Audio @&quot;Audio_Category&quot; //音频类别标识符</span><br><span class="line">#define Action_Category_Identifier_Movie @&quot;Movie_Category&quot; //视频类别标识符</span><br><span class="line">#define Action_Identifier_Image_Confirm @&quot;imageConfirmAction&quot;  //图片确认按钮</span><br><span class="line">#define Action_Identifier_Image_Concel  @&quot;imageConcelAction&quot;   //图片取消按钮</span><br><span class="line">#define Action_Identifier_Audio_Confirm @&quot;audioConfirmAction&quot;  //音频确认按钮</span><br><span class="line">#define Action_Identifier_Audio_Concel  @&quot;audioConcelAction&quot;   //音频取消按钮</span><br><span class="line">#define Action_Identifier_Movie_Confirm @&quot;movieConfirmAction&quot;  //视频确认按钮</span><br><span class="line">#define Action_Identifier_Movie_Concel  @&quot;movieConcelAction&quot;   //视频取消按钮</span><br><span class="line">#define Action_Title_Image_Confirm @&quot;查看&quot;  //图片确认按钮标题</span><br><span class="line">#define Action_Title_Image_Concel  @&quot;忽略&quot;  //图片取消按钮标题</span><br><span class="line">#define Action_Title_Audio_Confirm @&quot;查看&quot;  //音频确认按钮标题</span><br><span class="line">#define Action_Title_Audio_Concel  @&quot;忽略&quot;  //音频取消按钮标题</span><br><span class="line">#define Action_Title_Movie_Confirm @&quot;查看&quot;  //视频确认按钮标题</span><br><span class="line">#define Action_Title_Movie_Concel  @&quot;忽略&quot;  //视频取消按钮标题</span><br></pre></td></tr></table></figure><p>采用的是自定义布局，注意如果想使用这个布局的话，<br>你必须提前在service里面设置好categoryIdentifier，它的值是你plist文件里面的任何一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@interface NotificationViewController () &lt;UNNotificationContentExtension&gt;</span><br><span class="line">@property (nonatomic, strong)UIImageView *imageView;</span><br><span class="line">@property (nonatomic,strong)UILabel *label;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>LazyLoad</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-(UIImageView *)imageView&#123;</span><br><span class="line">    if (_imageView == nil) &#123;</span><br><span class="line">        _imageView = [[UIImageView alloc] init];</span><br><span class="line">        _imageView.contentMode = UIViewContentModeScaleAspectFit;</span><br><span class="line">    &#125;</span><br><span class="line">    return _imageView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AddView</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    [self.view addSubview:self.imageView];</span><br><span class="line">    // Do any required interface initialization here.</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>取出多媒体资料并展示到视图上，下面为image</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (void)didReceiveNotification:(UNNotification *)notification &#123;</span><br><span class="line">    NSLog(@&quot;notification.request.content.userInfo%@&quot;,notification.request.content.userInfo);</span><br><span class="line">    UNNotificationContent * content = notification.request.content;</span><br><span class="line">    CGFloat widthTime = 2;</span><br><span class="line">    if ([UIScreen mainScreen].bounds.size.width&gt;375) &#123;</span><br><span class="line">        widthTime = 3.0;</span><br><span class="line">    &#125;</span><br><span class="line">    UIImage *image = nil;</span><br><span class="line">    if (content.attachments.count) &#123;</span><br><span class="line">        UNNotificationAttachment * attachment_img = content.attachments[0];</span><br><span class="line">        if (attachment_img.URL.startAccessingSecurityScopedResource) &#123;</span><br><span class="line">            image = [UIImage imageWithContentsOfFile:attachment_img.URL.path];</span><br><span class="line">            self.imageView.image = image;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    self.imageView.frame = self.view.frame;</span><br><span class="line">    self.label.text = notification.request.content.body;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应相关Action</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-(void)didReceiveNotificationResponse:(UNNotificationResponse *)response completionHandler:(void (^)(UNNotificationContentExtensionResponseOption))completion&#123;</span><br><span class="line">    UNNotificationContent *content = [response.notification.request.content mutableCopy];</span><br><span class="line">    NSString *category =  content.categoryIdentifier;</span><br><span class="line">    NSString *actionIdentifier = [response.actionIdentifier copy];</span><br><span class="line">   if ([category isEqualToString:Action_Category_Identifier_Image]) &#123;</span><br><span class="line">        if ([actionIdentifier isEqualToString:Action_Identifier_Image_Confirm]) &#123;</span><br><span class="line">            completion(UNNotificationContentExtensionResponseOptionDismissAndForwardAction);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            completion(UNNotificationContentExtensionResponseOptionDismiss);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else if ([category isEqualToString:Action_Category_Identifier_Audio])&#123;</span><br><span class="line">        if ([actionIdentifier isEqualToString:Action_Identifier_Audio_Confirm]) &#123;</span><br><span class="line">            completion(UNNotificationContentExtensionResponseOptionDismissAndForwardAction);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            completion(UNNotificationContentExtensionResponseOptionDismiss);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        if ([actionIdentifier isEqualToString:Action_Identifier_Movie_Confirm]) &#123;</span><br><span class="line">            completion(UNNotificationContentExtensionResponseOptionDismissAndForwardAction);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            completion(UNNotificationContentExtensionResponseOptionDismiss);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS时间工具类</title>
      <link href="/2017/07/14/ios-shi-jian-gong-ju-lei/"/>
      <url>/2017/07/14/ios-shi-jian-gong-ju-lei/</url>
      
        <content type="html"><![CDATA[<h3 id="iOS时间工具类"><a href="#iOS时间工具类" class="headerlink" title="iOS时间工具类"></a>iOS时间工具类</h3><p>工作之余写的一个关于Unix时间的工具</p> <span id="more"></span><figure class="highlight plaintext"><figcaption><span><Foundation/Foundation.h></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@interface UnixTime : NSObject</span><br><span class="line">@property (nonatomic,assign) double    unixTimeInterval;//GMT时间戳 微秒级</span><br><span class="line">@property (nonatomic,strong) NSDate   *unixDate;//GMT时间 2016-01-04 8:55:46 +0000</span><br><span class="line">@property (nonatomic,strong) NSString *LocalTimeZone;//本地时区 GMT-12  GMT+12</span><br><span class="line">@property (nonatomic,assign) NSInteger timeOffset;//时间偏移量 </span><br><span class="line">@property (nonatomic,assign) double    unixTimestamp;//GMT+0 毫秒</span><br><span class="line">@property (nonatomic,assign) NSInteger unixZeroTimestamp;//当天零点 GMT+0 秒</span><br><span class="line">+ (UnixTime *)shareUnixTime;//单例 类方法</span><br><span class="line">- (void)getUnixTimestampAtNow;//Unix时间戳  若要获取某天的零时刻  必须先执行找个方法</span><br><span class="line">- (void)getSystemTimeZone;//本地时区</span><br><span class="line">- (NSString *)getTimeStringWithTime:(double)time;//字符串输出时间 设置日期格式带毫秒的 2016-01-04 16:55:46</span><br><span class="line">- (NSInteger)getUnixTimeWithDay:(NSInteger)day;// 某天的零时Unix时间戳</span><br><span class="line">- (NSInteger)getUnixTimeWithDay:(NSInteger)day AndClock:(NSInteger)clock; // 某天的特定时刻Unix时间戳</span><br><span class="line">- (NSInteger)gettimestampWithDateFormatString:(NSString *)dateFormatString;</span><br><span class="line">- (NSString *)formatTimeWithTime:(NSNumber *)time;//根据传入时间数值 返回hh:mm:ss格式的时间  这个是表示时间点的</span><br><span class="line">- (NSString *)formatHMWithTime:(NSNumber *)time;//根据传入时间数值 返回hh:mm格式的时间 这个时用来表示时间长短的</span><br><span class="line">- (NSString *)getTravelTimeWithStartTime:(NSNumber *)startTime andEndTime:(NSNumber *)endTime;//根据传入时间数值返回时间差值分钟 这个时用来表示时间长短的</span><br><span class="line">- (NSString *)getDayHourMinWithTimeStamp:(NSNumber *)time;</span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>UnixTime.m文件<br>包含方法的具体实现，用法都在.h文件里写了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#import &quot;UnixTime.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation UnixTime</span><br><span class="line"></span><br><span class="line">+ (UnixTime *)shareUnixTime&#123;</span><br><span class="line">    static UnixTime *unixTime = nil;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        unixTime = [[UnixTime alloc]init];</span><br><span class="line">    &#125;);</span><br><span class="line">    return unixTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (void)getUnixTimestampAtNow&#123;</span><br><span class="line">    self.unixDate = [NSDate date];</span><br><span class="line">    NSLog(@&quot;GMT %@&quot;,self.unixDate);</span><br><span class="line">    NSTimeInterval time=[self.unixDate timeIntervalSince1970];</span><br><span class="line">    self.unixTimeInterval =time;</span><br><span class="line">    NSString *timeIntervalString = [NSString stringWithFormat:@&quot;%f&quot;,self.unixTimeInterval];</span><br><span class="line">    NSLog(@&quot;GMTTimeInterval    %@&quot;,timeIntervalString);</span><br><span class="line">    NSString *micSecondString = [timeIntervalString substringWithRange:NSMakeRange(timeIntervalString.length-6, 3)];</span><br><span class="line">    //NSLog(@&quot;micSec %@&quot;,micSecondString);</span><br><span class="line">    NSInteger micSec = [micSecondString integerValue];</span><br><span class="line">    self.unixTimestamp = (NSInteger)time+micSec/1000.000;</span><br><span class="line">    NSLog(@&quot;GMTTimestamp       %ld&quot;,(long)self.unixTimestamp);</span><br><span class="line">    [self getUnixZeroTimestamp];</span><br><span class="line">    [self getSystemTimeZone];</span><br><span class="line">    [self getTimeOffset];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)getSystemTimeZone&#123;</span><br><span class="line">    NSTimeZone *timezone = [NSTimeZone systemTimeZone];</span><br><span class="line">    //NSLog(@&quot;timeZone%@&quot;,timezone);</span><br><span class="line">    NSString *timeAbbreviation = timezone.abbreviation;</span><br><span class="line">    self.LocalTimeZone = timeAbbreviation;</span><br><span class="line">    if ([timeAbbreviation isEqualToString:@&quot;GMT&quot;]) &#123;</span><br><span class="line">        self.LocalTimeZone = @&quot;GMT+0&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">   // NSLog(@&quot;TimeZone.abb: %@&quot;,self.LocalTimeZone);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (void)getTimeOffset&#123;</span><br><span class="line">    NSString *str1 = [self.LocalTimeZone substringWithRange:NSMakeRange(3, 1)];</span><br><span class="line">    NSString *str2 = [self.LocalTimeZone substringWithRange:NSMakeRange(4, self.LocalTimeZone.length-4)];</span><br><span class="line">    NSInteger timeZoneOffset = [str2 integerValue];</span><br><span class="line">    if ([str1 isEqualToString:@&quot;+&quot;]) &#123;</span><br><span class="line">        self.timeOffset = timeZoneOffset*3600;</span><br><span class="line">    &#125;else if ([str1 isEqualToString:@&quot;-&quot;])&#123;</span><br><span class="line">        self.timeOffset = -timeZoneOffset*3600;</span><br><span class="line">    &#125;</span><br><span class="line">    //NSLog(@&quot;timeOffSet %ld&quot;,(long)self.timeOffset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (void)getUnixZeroTimestamp&#123;</span><br><span class="line">    self.unixZeroTimestamp =  (NSInteger)(self.unixTimestamp/86400)*86400;</span><br><span class="line">    NSInteger days =  self.unixZeroTimestamp/86400 ;</span><br><span class="line">    NSLog(@&quot;GMTZeroTimestamp   %ld&quot;,self.unixZeroTimestamp);</span><br><span class="line">    NSLog(@&quot;days %ld&quot;,days);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (NSString *)getTimeStringWithTime:(double)time&#123;</span><br><span class="line">    NSDate *date = [NSDate dateWithTimeIntervalSince1970:time];</span><br><span class="line">    NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];</span><br><span class="line">    [dateFormat setDateFormat:@&quot;YYYY-MM-dd HH:mm:ss&quot;];</span><br><span class="line">    // 设置日期格式带秒的 2016-01-04 16:55:46</span><br><span class="line">    //NSLog(@&quot;date %@&quot;,date);</span><br><span class="line">    NSString *timeString = [dateFormat stringFromDate:date];</span><br><span class="line">    //NSLog(@&quot;time %@&quot;,timeString);</span><br><span class="line">    return timeString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (NSInteger)gettimestampWithDateFormatString:(NSString *)dateFormatString&#123;</span><br><span class="line">    NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];</span><br><span class="line">    [dateFormat setDateFormat:@&quot;YYYY-MM-dd HH:mm:ss&quot;];</span><br><span class="line">    NSDate *date = [dateFormat dateFromString:dateFormatString];</span><br><span class="line">    NSInteger time= [date timeIntervalSince1970];</span><br><span class="line">    NSLog(@&quot;time %ld&quot;,time);</span><br><span class="line">    return time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (NSInteger)getUnixTimeWithDay:(NSInteger)day&#123;</span><br><span class="line">    NSInteger unixTime = self.unixZeroTimestamp-(day-1)*86400-self.timeOffset;</span><br><span class="line">    NSLog(@&quot;unixTime   %ld&quot;,unixTime);</span><br><span class="line">    NSLog(@&quot;%@&quot;,[self getTimeStringWithTime:unixTime]);</span><br><span class="line">    return unixTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (NSInteger)getUnixTimeWithDay:(NSInteger)day AndClock:(NSInteger)clock&#123;//特定时刻的Unix时间戳</span><br><span class="line">    </span><br><span class="line">    if (clock&lt;0||clock&gt;24) &#123;//为了避免传入数据不正确 进行换算 增强可靠性</span><br><span class="line">        clock = clock%24;</span><br><span class="line">        if (clock&lt;0) &#123;</span><br><span class="line">            clock=clock+24;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            clock=clock;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        clock=clock;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSInteger unixTime = self.unixZeroTimestamp-(day-1)*86400+3600*clock;//-self.timeOffset;</span><br><span class="line">    //NSLog(@&quot;unixTime   %ld&quot;,unixTime);</span><br><span class="line">    return unixTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (NSString *)formatTimeWithTime:(NSNumber *)time&#123;</span><br><span class="line">    float _time_2 = [time floatValue];</span><br><span class="line">    NSInteger _time_1 = [time integerValue];</span><br><span class="line">    NSInteger sec = (NSInteger)((_time_2-_time_1)*60);</span><br><span class="line">    NSInteger hour;</span><br><span class="line">    NSInteger min;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    if (_time_1&gt;=1 &amp;&amp; _time_1&lt;60) &#123;</span><br><span class="line">         min = _time_1%60;</span><br><span class="line">        return [NSString stringWithFormat:@&quot;%ld:%.2ld&quot;,min,sec];</span><br><span class="line">    &#125;</span><br><span class="line">    if (_time_1&gt;=60) &#123;</span><br><span class="line">        hour = _time_1/60;</span><br><span class="line">        min = _time_1%60;</span><br><span class="line">        return [NSString stringWithFormat:@&quot;%ld:%.2ld:%.2ld&quot;,hour,min,sec];</span><br><span class="line">    &#125;</span><br><span class="line">    return [NSString stringWithFormat:@&quot;0:%.2ld&quot;,sec];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (NSString *)formatHMWithTime:(NSNumber *)time&#123;</span><br><span class="line">    UnixTime *unixtime = [UnixTime shareUnixTime];</span><br><span class="line">    NSString *string = [unixtime getTimeStringWithTime:[time integerValue]];</span><br><span class="line">    NSArray *firArray = [string componentsSeparatedByString:@&quot; &quot;];</span><br><span class="line">    NSString *firstring = firArray[1];</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *secArray = [NSMutableArray arrayWithArray:[firstring componentsSeparatedByString:@&quot;:&quot;]];</span><br><span class="line">    [secArray removeLastObject];</span><br><span class="line">    </span><br><span class="line">    return [secArray componentsJoinedByString:@&quot;:&quot;];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (NSString *)getTravelTimeWithStartTime:(NSNumber *)startTime andEndTime:(NSNumber *)endTime&#123;</span><br><span class="line"></span><br><span class="line">    NSInteger _startTime = [startTime integerValue];</span><br><span class="line">    NSInteger _endTime = [endTime integerValue];</span><br><span class="line">    </span><br><span class="line">    NSInteger travelTime = (_endTime - _startTime)/60+1;</span><br><span class="line">    </span><br><span class="line">    return [NSString stringWithFormat:@&quot;%ld&quot;,travelTime];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">- (NSString *)getDayHourMinWithTimeStamp:(NSNumber *)time&#123;</span><br><span class="line">    NSInteger _time = [time integerValue];</span><br><span class="line">    NSDate *date = [NSDate dateWithTimeIntervalSince1970:_time];</span><br><span class="line">    NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];</span><br><span class="line">    [dateFormat setDateFormat:@&quot;YYYY-MM-dd HH:mm&quot;];</span><br><span class="line">    // 设置日期格式 2016-01-04 16:55:46</span><br><span class="line">    //NSLog(@&quot;date %@&quot;,date);</span><br><span class="line">    NSString *timeString = [dateFormat stringFromDate:date];</span><br><span class="line">    //NSLog(@&quot;time %@&quot;,timeString);</span><br><span class="line">    return timeString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS--富文本推送UNNotificationExtension基础篇</title>
      <link href="/2017/07/14/ios-unnotificationextension/"/>
      <url>/2017/07/14/ios-unnotificationextension/</url>
      
        <content type="html"><![CDATA[<p>本文主要讲述如何集成富文本推送的相关扩展，另外还会有文章来详细展开</p> <span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本地推送和远程推送同时都可支持附带Media Attachments。不过远程通知需要实现通知服务扩展（UNNotificationServiceExtension），在service extension里面去下载attachment，但是需要注意，service extension会限制下载的时间（30s），并且下载的文件大小也会同样被限制。这里毕竟是一个推送，而不是把所有的内容都推送给用户。所以你应该去推送一些缩小比例之后的版本。比如图片，推送里面附带缩略图，当用户打开app之后，再去下载完整的高清图。视频就附带视频的关键帧或者开头的几秒，当用户打开app之后再去下载完整视频。<br><strong>attachment支持图片，音频，视频，<a href="https://developer.apple.com/documentation/usernotifications/unnotificationattachment?preferredLanguage=occ">附件支持的类型及大小</a></strong></p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><h3 id="添加Notification-Service-Extension"><a href="#添加Notification-Service-Extension" class="headerlink" title="添加Notification Service Extension"></a>添加Notification Service Extension</h3><p>在当前工程项目中添加新的Target–&gt; Notification Service<br>先在Xcode 打开你的工程，File–&gt;New–&gt;Target然后添加这个Notification Service Extension：<br><img src="http://upload-images.jianshu.io/upload_images/1519926-4b2dec473ad115ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" Service Extension"></p><h3 id="添加Notification-Content-Extension"><a href="#添加Notification-Content-Extension" class="headerlink" title="添加Notification Content Extension"></a>添加Notification Content Extension</h3><p>在当前工程项目中添加新的Target–&gt; Notification Content<br>先在Xcode 打开你的工程，File–&gt;New–&gt;Target然后添加这个Notification Content Extension：</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-80fe0d45afd8962d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Content Extension"></p><h3 id="添加扩展完成"><a href="#添加扩展完成" class="headerlink" title="添加扩展完成"></a>添加扩展完成</h3><p>这样你的项目中就会有两个Extension Target</p><p><img src="http://upload-images.jianshu.io/upload_images/1519926-27417edf00b78513.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Extension Target"></p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="ServiceExtension-Info-plist"><a href="#ServiceExtension-Info-plist" class="headerlink" title="ServiceExtension Info.plist"></a><strong>ServiceExtension Info.plist</strong></h3><ul><li>添加http协议支持，没错，这里是支持http协议的，不像其他文章说的不支持</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1519926-ab76b6192e080b34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ServiceExtension Info.plist"></p><h3 id="ContentExtension-Info-plist"><a href="#ContentExtension-Info-plist" class="headerlink" title="ContentExtension Info.plist"></a><strong>ContentExtension Info.plist</strong></h3><ul><li>设置可以改变</li><li>如果不想使用故事版把NSExtensionMainStoryboard替换为NSExtensionPrincipalClass（我这里已经）<br><img src="http://upload-images.jianshu.io/upload_images/1519926-f3f71592d59fa490.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ContentExtension Info.plist"></li></ul><h3 id="ServiceExtension基本设置"><a href="#ServiceExtension基本设置" class="headerlink" title="ServiceExtension基本设置"></a><strong>ServiceExtension基本设置</strong></h3><ul><li>当前Target的BundleID根据项目主Target的BundleID自动生成</li><li>格式”项目主Target的BundleID.-当前Target名称”</li><li>例如当前项目BundleID为 com.apple.NotificationDemo，ServiceExtension的名字是NotificationService</li><li>那么ServiceExtension的BundleID就是com.apple.NotificationDemo.-NotificationService</li><li>Automatically manages signing 官方建议勾选</li><li>Deployment Target 必须设置为10.0以上，不能设置为10.0以下<br><img src="http://upload-images.jianshu.io/upload_images/1519926-c444d42624ec040d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ServiceExtension基本设置"></li></ul><h3 id="ContentExtension基本设置"><a href="#ContentExtension基本设置" class="headerlink" title="ContentExtension基本设置"></a><strong>ContentExtension基本设置</strong></h3><ul><li>当前Target的BundleID根据项目主Target的BundleID自动生成</li><li>格式”项目主Target的BundleID.-当前Target名称”</li><li>例如当前项目BundleID为 com.apple.NotificationDemo，ContentExtension的名字是NotificationContent</li><li>那么ServiceExtension的BundleID就是com.apple.NotificationDemo.-NotificationContent</li><li>Automatically manages signing 官方建议勾选</li><li>Deployment Target 必须设置为10.0以上，不能设置为10.0以下<br><img src="http://upload-images.jianshu.io/upload_images/1519926-891c922f190d490f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ContentExtension基本设置"></li></ul><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><ul><li>首先当前应用需要支持APNS,不支持的自己集成去吧<h3 id="服务器向设备发送通知"><a href="#服务器向设备发送通知" class="headerlink" title="服务器向设备发送通知"></a>服务器向设备发送通知</h3>这个通知消息的格式是有要求的，有以下几点需要注意：</li><li>aps字段必须要有，不然收不到通知</li><li>aps字段下alert字段必须要有，不然也收不到通知</li><li>alert字段的值是字符串的时候，不可为空，不然的话你虽然收的到通知，但是是手机除了震动或者声音，没有任何提示</li><li>alert字段的值是字典的时候，下面这三个字段必须要有一个，不然和上面一样。就是一句话alert的值必须是可以使用的</li><li>mutable-content字段值最好是1，目前没见过其他值</li><li>如果你想在iOS10上展示位富文本的推送格式，category字段必须带，值必须在info.plist文件中能找的到的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">   &quot;aps&quot;:&#123;</span><br><span class="line">        &quot;alert&quot; : &#123;</span><br><span class="line">             &quot;title&quot; : &quot;iOS远程消息主标题！-title&quot;,</span><br><span class="line">              &quot;subtitle&quot; : &quot;iOS远程消息副标题！-Subtitle&quot;,</span><br><span class="line">              &quot;body&quot; : &quot;longge -body&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">        &quot;sound&quot; : &quot;default&quot;,</span><br><span class="line">        &quot;badge&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;mutable-content&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;category&quot; : &quot;Image_Category&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;image&quot; : &quot;http://ot260qjni.bkt.clouddn.com/testOne.jpeg&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的测试图片好像不能用了（具体能不能用你们最好测试一下，直接浏览器打开能看到就可以用），我也不知道为啥 你们可以自己去找找先关的图床。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS--简单封装AFNetworking</title>
      <link href="/2017/07/14/ios-custom-afnetworking/"/>
      <url>/2017/07/14/ios-custom-afnetworking/</url>
      
        <content type="html"><![CDATA[<p>由于本人在工作中经常会进行网络请求，实在是不想一直写那段请求代码，就自己封装了一个LiynNet类。其中使用代理完成方法回调。</p> <span id="more"></span><p>这里面涉及到了GET/POST方法。<br>废话不多说直接上代码</p><h2 id="下面是-h文件的内容"><a href="#下面是-h文件的内容" class="headerlink" title="下面是.h文件的内容:"></a><strong>下面是.h文件的内容:</strong></h2><p><strong>代理回调协议方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@protocol LiynNetDelegate &lt;NSObject&gt;</span><br><span class="line">- (void)netFinsh:(id)object;</span><br><span class="line">- (void)netError:(id)errorMsg;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>这里只有一个属性delegate，用于建立代理关系；<br>这里向外暴露了五个方法，其中第一个类方法用来初始化一个网络请求类的实例化对象，这个对象是一个单例对象，因为网络请求对象，不存储数据，只作为一个单纯的工具类，所以这个对象只需要存在一个就可以。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@interface LiynNet : NSObject</span><br><span class="line">@property (nonatomic, weak) id&lt;LiynNetDelegate&gt; delegate;</span><br><span class="line">#pragma mark: method</span><br><span class="line">+ (LiynNet *)defaultNet;</span><br><span class="line">- (void)uploadPOST:(NSString *)URLString Parameters:(id)parameters UploadDictionary:(NSDictionary*)uploadInfo;</span><br><span class="line">- (void)POST:(NSString *)URLString Parameters:(id)parameters;</span><br><span class="line">- (void)GET:(NSString *)URLString Parameters:(id)parameters;</span><br><span class="line">- (void)GETPic:(NSString *)URLString Parameters:(id)parameters Path:(NSString *)path;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h2 id="下面是-m文件的内容"><a href="#下面是-m文件的内容" class="headerlink" title="下面是.m文件的内容"></a><strong>下面是.m文件的内容</strong></h2><p><strong>创建单例对象</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+(LiynNet *)defaultNet&#123;</span><br><span class="line">    static LiynNet *net = nil;</span><br><span class="line">    if (net == nil) &#123;</span><br><span class="line">        net = [[LiynNet alloc] init];</span><br><span class="line">        net.manager = [AFHTTPSessionManager manager];</span><br><span class="line">        net.manager.responseSerializer = [AFHTTPResponseSerializer serializer];</span><br><span class="line">    &#125;</span><br><span class="line">    return net;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="以下是网络请求"><a href="#以下是网络请求" class="headerlink" title="以下是网络请求"></a>以下是网络请求</h2><p>在这里我就想了定制，因为有时候需要判断返回数据的类型，例如：当一个页面进行多种数据请求时，代理方法只有一个，那么我们就需要一个标记变量来区别这次返回的数据类型是什么。<br>所以这里的parameters字典里需要一个字段msgType来区别。</p><h3 id="一般POST下载请求"><a href="#一般POST下载请求" class="headerlink" title="一般POST下载请求"></a><strong>一般POST下载请求</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (void)POST:(NSString *)URLString Parameters:(id)parameters&#123;</span><br><span class="line">    NSString *msgType = parameters[@&quot;msgType&quot;];</span><br><span class="line">    NSLog(@&quot;&#123;\nmethod:POST \nURL:%@  \nParameters:%@&quot;,URLString,parameters);</span><br><span class="line">    [self.manager POST:URLString parameters:parameters[@&quot;msg&quot;] progress:^(NSProgress * _Nonnull uploadProgress) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125; success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</span><br><span class="line">        [self success:@&#123;@&quot;msgType&quot;:msgType,@&quot;msg&quot;:responseObject&#125;];</span><br><span class="line">    &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</span><br><span class="line">        [self failure:@&#123;@&quot;msgType&quot;:msgType,@&quot;error&quot;:error&#125;];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一般的GET下载请求"><a href="#一般的GET下载请求" class="headerlink" title="一般的GET下载请求"></a><strong>一般的GET下载请求</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (void)GET:(NSString *)URLString Parameters:(id)parameters&#123;</span><br><span class="line">    NSString *msgType = parameters[@&quot;msgType&quot;];</span><br><span class="line">    NSLog(@&quot;method:GET URL:%@  Parameters:%@&quot;,URLString,parameters);</span><br><span class="line">    [self.manager GET:URLString parameters:parameters progress:^(NSProgress * _Nonnull downloadProgress) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125; success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</span><br><span class="line">        [self success:responseObject];</span><br><span class="line">    &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</span><br><span class="line">        [self failure:@&#123;@&quot;msgType&quot;:msgType,@&quot;error&quot;:error&#125;];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一般的POST上传请求"><a href="#一般的POST上传请求" class="headerlink" title="一般的POST上传请求"></a><strong>一般的POST上传请求</strong></h3><p>注意上传的字段是服务器给定的，传入的字典uploadInfo内@”uploadParameter”对应的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">- (void)uploadPOST:(NSString *)URLString Parameters:(id)parameters UploadDictionary:(NSDictionary*)uploadInfo&#123;</span><br><span class="line">    NSString *msgType = parameters[@&quot;msgType&quot;];</span><br><span class="line">    NSLog(@&quot;&#123;\nmethod:POST \nURL:%@  \nParametersCid:%@&quot;,URLString,parameters[@&quot;msg&quot;]);</span><br><span class="line">    NSDictionary *dict = parameters[@&quot;msg&quot;];</span><br><span class="line">    [self.manager POST: URLString parameters:dict constructingBodyWithBlock:^(id  _Nonnull formData) &#123;</span><br><span class="line">        NSData *rightData = UIImageJPEGRepresentation(uploadInfo[@&quot;image&quot;], 0.7);</span><br><span class="line">        [formData appendPartWithFileData:rightData</span><br><span class="line">                                    name: uploadInfo[@&quot;uploadParameter&quot;]</span><br><span class="line">                                fileName:@&quot;IDRight.png&quot;</span><br><span class="line">                                mimeType:@&quot;image/jpeg&quot;];</span><br><span class="line">    &#125; progress:^(NSProgress * _Nonnull uploadProgress) &#123;</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;%f&quot;,1.0 * uploadProgress.completedUnitCount/uploadProgress.totalUnitCount);</span><br><span class="line">        </span><br><span class="line">    &#125; success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</span><br><span class="line">        NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:responseObject</span><br><span class="line">                                                             options:NSJSONReadingMutableContainers</span><br><span class="line">                                                               error:nil];</span><br><span class="line">        [self success:@&#123;@&quot;msgType&quot;:msgType,@&quot;msg&quot;:dict&#125;];</span><br><span class="line">    &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</span><br><span class="line">        [self failure:@&#123;@&quot;msgType&quot;:msgType,@&quot;error&quot;:error&#125;];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="两个私有方法"><a href="#两个私有方法" class="headerlink" title="两个私有方法"></a><strong>两个私有方法</strong></h3><h4 id="请求数据成功"><a href="#请求数据成功" class="headerlink" title="请求数据成功"></a><strong>请求数据成功</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)success:(id)responseObject&#123;</span><br><span class="line">    if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(netFinsh:)]) &#123;</span><br><span class="line">        [_delegate netFinsh:responseObject];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="请求数据失败"><a href="#请求数据失败" class="headerlink" title="请求数据失败"></a><strong>请求数据失败</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)failure:(id)error&#123;</span><br><span class="line">    if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(netError:)]) &#123;</span><br><span class="line">        [_delegate netError:error];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类是基于AFNetworking的，所以在使用的时候必须要先倒入AFNetworking的第三方库，建议使用CocoaPods来导入，如果有人不会使用的可以自行百度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &#x27;AFNetworking&#x27;, &#x27;~&gt; 3.1.0&#x27;</span><br></pre></td></tr></table></figure><p>首先在使用的类里遵循协议</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;LiynNetDelegate&gt;</span><br></pre></td></tr></table></figure><p>声明一个全局的LiynNet类的对象（这个全局只是建议 不全局也可以）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">LiynNet *_net;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者定义一个属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, strong) LiynNet *net;</span><br></pre></td></tr></table></figure><p>实例化这个LiynNet对象并建立代理关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - 懒加载</span><br><span class="line">-(LiynNet *)net&#123;</span><br><span class="line">    if (_net == nil) &#123;</span><br><span class="line">        _net = [LiynNet defaultNet];</span><br><span class="line">        _net.delegate = self;</span><br><span class="line">    &#125;</span><br><span class="line">    return  _net;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现协议的方法"><a href="#实现协议的方法" class="headerlink" title="实现协议的方法"></a><strong>实现协议的方法</strong></h3><p>在这里你就可以操作返回的数据了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (void)netFinsh:(id)object&#123;</span><br><span class="line">    NSLog(@&quot;msgType %@\n msg %@&quot;,object[@&quot;msgType&quot;],object[@&quot;msg&quot;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里你就需要慢慢查找原因了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)netError:(id)errorMsg&#123;</span><br><span class="line">    NSLog(@&quot;msgType %@\n msg %@&quot;, errorMsg[@&quot;msgType&quot;], errorMsg[@&quot;msg&quot;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS--Cocoapods的安装</title>
      <link href="/2017/07/14/macos-cocoapods-de-an-zhuang/"/>
      <url>/2017/07/14/macos-cocoapods-de-an-zhuang/</url>
      
        <content type="html"><![CDATA[ <span id="more"></span><h2 id="重新配置gem源"><a href="#重新配置gem源" class="headerlink" title="重新配置gem源"></a>重新配置gem源</h2><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</span><br></pre></td></tr></table></figure><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -l</span><br></pre></td></tr></table></figure><p>请确保只有一个gem源—“<a href="https://gems.ruby-china.org/%E2%80%9D">https://gems.ruby-china.org/”</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">https://gems.ruby-china.org/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水波纹-OC-iOS</title>
      <link href="/2017/07/14/ios-water-ripple-oc/"/>
      <url>/2017/07/14/ios-water-ripple-oc/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用iOS原生CoreGraphic框架完成，主要内容就是在给定的路径上绘制出图形，水波纹的实现是按照三角函数的sin函数来实现的，利用sin函数计算出大量的点，然后做颜色填充。</p> <span id="more"></span><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>首先一个波纹需要一个layer来进行渲染，越底层的波纹要越早绘制，本Demo只实现了双波纹交错。<br>水波纹基本属性：</p><p><strong>不需要对外暴露的属性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@interface WaterRippleView()&#123;</span><br><span class="line">    float _currentLinePointY;</span><br><span class="line">&#125;</span><br><span class="line">@property (nonatomic, strong)CADisplayLink *rippleDisplayLink;//苹果的垂直同步</span><br><span class="line">@property (nonatomic, strong)CAShapeLayer *mainRippleLayer;//主波图层</span><br><span class="line">@property (nonatomic, strong)CAShapeLayer *minorRippleLayer;//次波图层</span><br><span class="line">@property (nonatomic, assign)CGFloat rippleWidth;//波浪宽度</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p><strong>可以对外暴露的属性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, strong)UIColor *mainRippleColor;//主波填充颜色</span><br><span class="line">@property (nonatomic, strong)UIColor *minorRippleColor;//次波填充颜色</span><br><span class="line">@property (nonatomic, assign)CGFloat mainRippleoffsetX;//主波偏移量</span><br><span class="line">@property (nonatomic, assign)CGFloat minorRippleoffsetX;//次波偏移量</span><br><span class="line">@property (nonatomic, assign)CGFloat rippleSpeed;//波浪速度</span><br><span class="line">@property (nonatomic, assign)CGFloat ripplePosition;//波浪Y轴位置</span><br><span class="line">@property (nonatomic, assign)float rippleAmplitude;//波浪振幅</span><br></pre></td></tr></table></figure><p><strong>各属性的默认值设置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">self.mainRippleColor = [UIColor colorWithRed:255/255.0f green:127/255.0f blue:80/255.0f alpha:1];</span><br><span class="line">self.minorRippleColor = [UIColor whiteColor];</span><br><span class="line">self.mainRippleoffsetX = 1;</span><br><span class="line">self.minorRippleoffsetX = 2;</span><br><span class="line">self.rippleSpeed = .5f;</span><br><span class="line">self.rippleWidth = frame.size.width;</span><br><span class="line">self.ripplePosition = frame.size.height-10.0f;</span><br><span class="line">self.rippleAmplitude = 5;</span><br></pre></td></tr></table></figure><p><strong>对外暴露的方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//设置frame 主波填充颜色  次波填充颜色</span><br><span class="line">- (instancetype)initWithFrame:(CGRect)frame mainRippleColor:(UIColor *)mainRippleColor minorRippleColor:(UIColor *)minorRippleColor;</span><br><span class="line">//设置frame 主波填充颜色  次波填充颜色 主波偏移量 次波偏移量 波浪速度 波浪Y轴位置 波浪振幅</span><br><span class="line">- (instancetype)initWithFrame:(CGRect)frame mainRippleColor:(UIColor *)mainRippleColor minorRippleColor:(UIColor *)minorRippleColor mainRippleoffsetX:(float)mainRippleoffsetX minorRippleoffsetX:(float)minorRippleoffsetX rippleSpeed:(float)rippleSpeed ripplePosition:(float)ripplePosition rippleAmplitude:(float)rippleAmplitude;</span><br></pre></td></tr></table></figure><p>在view中需要绘制图形时，要在自带的dramRect：方法中编写相关代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (void)drawRect:(CGRect)rect &#123;</span><br><span class="line">    /*</span><br><span class="line">     *创建两个layer</span><br><span class="line">     */</span><br><span class="line">    self.mainRippleLayer = [CAShapeLayer layer];</span><br><span class="line">    self.mainRippleLayer.fillColor = self.mainRippleColor.CGColor;</span><br><span class="line">    [self.layer addSublayer:self.mainRippleLayer];</span><br><span class="line">    self.minorRippleLayer = [CAShapeLayer layer];</span><br><span class="line">    self.minorRippleLayer.fillColor = self.minorRippleColor.CGColor;</span><br><span class="line">    [self.layer addSublayer:self.minorRippleLayer];</span><br><span class="line">    self.rippleDisplayLink = [CADisplayLink displayLinkWithTarget:self</span><br><span class="line">                                                         selector:@selector(getCurrentRipple)];</span><br><span class="line">    [self.rippleDisplayLink addToRunLoop:[NSRunLoop mainRunLoop]</span><br><span class="line">                                 forMode:NSRunLoopCommonModes];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是绘制代码：<br><strong>主波</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (void)drawMainRipple&#123;</span><br><span class="line">    self.mainRippleoffsetX += self.rippleSpeed;</span><br><span class="line">    CGMutablePathRef path = CGPathCreateMutable();</span><br><span class="line">    CGPathMoveToPoint(path, nil, 0, self.ripplePosition);</span><br><span class="line">    CGFloat y = 0.f;</span><br><span class="line">    for (float x = 0.f; x &lt;= self.rippleWidth ; x++) &#123;</span><br><span class="line">        y = self.rippleAmplitude * sin(1.2 *  M_PI/ self.rippleWidth  * x   - self.mainRippleoffsetX *M_PI/180) + self.ripplePosition;</span><br><span class="line">        CGPathAddLineToPoint(path, nil, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    CGPathAddLineToPoint(path, nil, self.rippleWidth, self.frame.size.height);</span><br><span class="line">    CGPathAddLineToPoint(path, nil, 0, self.frame.size.height);</span><br><span class="line">    CGPathCloseSubpath(path);</span><br><span class="line">    self.mainRippleLayer.path = path;</span><br><span class="line">    CGPathRelease(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>次波</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (void)drawMinorRipple&#123;</span><br><span class="line">    self.minorRippleoffsetX += self.rippleSpeed+0.1f;</span><br><span class="line">    CGMutablePathRef minorRipple = CGPathCreateMutable();</span><br><span class="line">    CGPathMoveToPoint(minorRipple, nil, 0, self.ripplePosition);</span><br><span class="line">    CGFloat y = 0.f;</span><br><span class="line">    for (float x = 0.f; x &lt;= self.rippleWidth ; x++) &#123;</span><br><span class="line">        y = self.rippleAmplitude * sin(1.2 *  M_PI/ self.rippleWidth  * x   - self.minorRippleoffsetX*M_PI/360 ) + self.ripplePosition;</span><br><span class="line">        CGPathAddLineToPoint(minorRipple, nil, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    CGPathAddLineToPoint(minorRipple, nil, self.rippleWidth, self.frame.size.height);</span><br><span class="line">    CGPathAddLineToPoint(minorRipple, nil, 0, self.frame.size.height);</span><br><span class="line">    CGPathCloseSubpath(minorRipple);</span><br><span class="line">    self.minorRippleLayer.path = minorRipple;</span><br><span class="line">    CGPathRelease(minorRipple);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="http://img.blog.csdn.net/20170525155948950?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvWnVvV2VpWGlhb0R1WnVvWnVv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="水波纹Gif"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本Demo的git库地址：<a href="https://git.oschina.net/LiynXu/waterripple.git">https://git.oschina.net/LiynXu/waterripple.git</a><br>欢迎访问</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode下载地址大全</title>
      <link href="/2017/07/14/macos-xcode-xia-zai-di-zhi/"/>
      <url>/2017/07/14/macos-xcode-xia-zai-di-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="Xcode下载——绝对的官方地址"><a href="#Xcode下载——绝对的官方地址" class="headerlink" title="Xcode下载——绝对的官方地址"></a>Xcode下载——绝对的官方地址</h3><p>下载方式简单粗暴：<br>第一种、点击Xcode版本名称稍等几秒即可开始下载<br>另一种、右键复制链接地址，打开下载软件，新建任务把复制的链接粘贴在地址输入框即可开始下载<br>本文中涉及到的下载地址均为苹果官方下载地址</p> <span id="more"></span><h4 id="Xcode-2"><a href="#Xcode-2" class="headerlink" title="Xcode 2"></a>Xcode 2</h4><p><a href="http://adcdownload.apple.com/Developer_Tools/xcode_2.3/xcode_2.3_8m1780_oz693620813.dmg">Xcode_2.3.dmg</a> 915.0MB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_2.4/xcode_2.4_8k1079_6936199.dmg">Xcode_2.4.dmg</a> 938.2MB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_2.4.1/xcode_2.4.1_8m1910_6936315.dmg">Xcode_2.4.1.dmg</a> 923.2MB</p><h4 id="Xcode-3"><a href="#Xcode-3" class="headerlink" title="Xcode 3"></a>Xcode 3</h4><p><a href="http://adcdownload.apple.com/Developer_Tools/xcode_3.0/xcode_3.0.dmg">Xcode_3.0.dmg</a> 1.1GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_3.2/xcode3210a432.dmg">Xcode_3.2.dmg</a> 748.7MB<br><a href="http://adcdownload.apple.com/ios/ios_sdk_4.0.1__final/xcode_3.2.3_and_ios_sdk_4.0.1.dmg">Xcode_3.2.3_and_ios_sdk_4.0.1.dmg</a> 2.2GB<br><a href="http://adcdownload.apple.com/ios/ios_sdk_4.0.2__final/xcode_3.2.3_and_ios_sdk_4.0.2.dmg">Xcode_3.2.3_and_ios_sdk_4.0.2.dmg</a> 2.4GB<br><a href="http://adcdownload.apple.com/ios/ios_sdk_4.1__final/xcode_3.2.4_and_ios_sdk_4.1.dmg">Xcode_3.2.4_and_ios_sdk_4.1.dmg</a> 2.9GB<br><a href="http://adcdownload.apple.com/ios/ios_sdk_4.2__final/xcode_3.2.5_and_ios_sdk_4.2_final.dmg">Xcode_3.2.5_and_ios_sdk_4.2.dmg</a> 3.5GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_3.2.6_and_ios_sdk_4.3__final/xcode_3.2.6_and_ios_sdk_4.3.dmg">Xcode_3.2.6_and_ios_sdk_4.3.dmg</a> 4.1GB</p><h4 id="Xcode-4"><a href="#Xcode-4" class="headerlink" title="Xcode 4"></a>Xcode 4</h4><p><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4_and_ios_sdk_4.3__final/xcode_4_and_ios_sdk_4.3__final.dmg">Xcode_4_and_ios_sdk_4.3.dmg</a> 4.2GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.0.1_and_ios_sdk_4.3/xcode_4.0.1_and_ios_sdk_4.3.dmg">Xcode_4.0.1_and_ios_sdk_4.3.dmg</a> 4.2GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.0.2_and_ios_sdk_4.3/xcode_4.0.2_and_ios_sdk_4.3.dmg">Xcode_4.0.2_and_ios_sdk_4.3.dmg</a> 4.2GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.1_for_snow_leopard_21110/xcode_4.1_for_snow_leopard.dmg">Xcode_4.1_for_snow_leopard.dmg</a> 4.3GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.1_for_lion_21263/installxcode_41_lion.dmg">Xcode_4.1_for_lion.dmg</a> 2.9GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.2_for_snow_leopard/xcode_4.2_for_snow_leopard.dmg">Xcode_4.2_for_snow_leopard.dmg</a> 1.6GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.2_for_lion_21264/installxcode_42_lion.dmg">Xcode_4.2_for_lion.dmg</a> 1.6GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.2.1_for_lion_21265/installxcode_421_lion.dmg">Xcode_4.2.1_for_lion.dmg</a> 1.6GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.3_for_lion_21266/xcode_43_lion.dmg">Xcode_4.3_for_lion.dmg</a>  1.4GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.3.1_for_lion_21267/xcode_431_lion.dmg">Xcode_4.3.1_for_lion.dmg</a> 1.4GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.3.2/xcode_432_lion.dmg">Xcode_4.3.2_for_lion.dmg</a> 1.8GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.3.3_for_lion/xcode_4.3.3_for_lion.dmg">Xcode_4.3.3_for_lion.dmg</a> 1.8GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.4_21362/xcode446938108a.dmg">Xcode_4.4.dmg</a> 1.8GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.4.1/xcode_4.4.1_6938145.dmg">Xcode_4.4.1.dmg</a> 1.8GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.5/xcode_4.5.dmg">Xcode_4.5.dmg</a> 1.5GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.5.1/xcode4510417539a.dmg">Xcode_4.5.1.dmg</a> 1.5GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.5.2/xcode4520418508a.dmg">Xcode_4.5.2.dmg</a> 1.5GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.6/xcode460417218a.dmg">Xcode_4.6.dmg</a> 1.6GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.6.1/xcode4610419628a.dmg">Xcode_4.6.1.dmg</a> 1.6GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.6.2/xcode4620419895a.dmg">Xcode_4.6.2.dmg</a> 1.6GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_4.6.3/xcode4630916281a.dmg">Xcode_4.6.3.dmg</a> 1.6GB</p><h4 id="Xcode-5"><a href="#Xcode-5" class="headerlink" title="Xcode 5"></a>Xcode 5</h4><p><a href="http://adcdownload.apple.com/Developer_Tools/xcode_5/xcode_5.dmg">Xcode_5.dmg</a> 1.9GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_5.0.1/xcode_5.0.1.dmg">Xcode_5.0.1.dmg</a> 2.0GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_5.0.2/xcode_5.0.2.dmg">Xcode_5.0.2.dmg</a> 2.0GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_5.1/xcode_5.1.dmg">Xcode_5.1.dmg</a> 2.1GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_5.1.1/xcode_5.1.1.dmg">Xcode_5.1.1.dmg</a>  2.1GB</p><h4 id="Xcode-6"><a href="#Xcode-6" class="headerlink" title="Xcode 6"></a>Xcode 6</h4><p><a href="http://adcdownload.apple.com/Developer_Tools/xcode_6.0.1/xcode_6.0.1.dmg">Xcode_6.0.1.dmg</a> 2.1GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_6.1/56841_xcode_6.1.dmg">Xcode_6.1.dmg</a> 2.5GB<br><a href="http://adcdownload.apple.com/Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg">Xcode_6.1.1.dmg</a> 2.5GB<br><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_6.2/Xcode_6.2.dmg">Xcode_6.2.dmg</a> 2.5GB<br><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_6.3/Xcode_6.3.dmg">Xcode_6.3.dmg</a> 2.5GB<br><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_6.3.1/Xcode_6.3.1.dmg">Xcode_6.3.1.dmg</a> 2.5GB<br><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_6.3.2/Xcode_6.3.2.dmg">Xcode_6.3.2.dmg</a> 2.5GB<br><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_6.4/Xcode_6.4.dmg">Xcode_6.4.dmg</a> 2.6GB</p><h4 id="Xcode-7"><a href="#Xcode-7" class="headerlink" title="Xcode 7"></a>Xcode 7</h4><p><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_7/Xcode_7.dmg">Xcode_7.dmg</a> 3.5GB<br><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_7.0.1/Xcode_7.0.1.dmg">Xcode_7.0.1.dmg</a> 3.5GB<br><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_7.1/Xcode_7.1.dmg">Xcode_7.1.dmg</a> 4.2GB<br><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_7.1.1/Xcode_7.1.1.dmg">Xcode_7.1.1.dmg</a> 4.2GB<br><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_7.2/Xcode_7.2.dmg">Xcode_7.2.dmg</a> 4.4GB<br><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_7.2.1/Xcode_7.2.1.dmg">Xcode_7.2.1.dmg</a> 4.4GB<br><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_7.3/Xcode_7.3.dmg">Xcode_7.3.dmg</a> 4.8GB<br><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg">Xcode_7.3.1.dmg</a> 4.8GB</p><h4 id="Xcode-8"><a href="#Xcode-8" class="headerlink" title="Xcode 8"></a>Xcode 8</h4><p><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_8/Xcode_8.xip">Xcode_8.xip</a> 4.1GB<br><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_8.1/Xcode_8.1.xip">Xcode_8.1.xip</a> 4.1GB<br><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_8.2/Xcode_8.2.xip">Xcode_8.2.xip</a> 4.2GB<br><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_8.2.1/Xcode_8.2.1.xip">Xcode_8.2.1.xip</a> 4.2GB<br><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_8.3/Xcode_8.3.xip">Xcode_8.3.xip</a> 4.1GB<br><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_8.3.1/Xcode_8.3.1.xip">Xcode_8.3.1.xip</a> 4.1GB<br><a href="http://adcdownload.apple.com/Developer_Tools/Xcode_8.3.2/Xcode8.3.2.xip">Xcode_8.3.2.xip</a>4.1GB</p>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
